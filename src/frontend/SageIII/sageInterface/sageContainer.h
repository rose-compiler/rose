#ifndef ROSE_sageContainer_H
#define ROSE_sageContainer_H
#include <RoseFirst.h>
#include <rosedll.h>
#include <Cxx_GrammarDeclarations.h>
#include <Cxx_GrammarVariants.h>

#include <Rose/BinaryAnalysis/RelativeVirtualAddress.h>

#include <map>
#include <ostream>
#include <set>
#include <string>
#include <vector>

// These declarations were originally generated by ROSETTA's CxxGrammarMetaProgram tool, but since they never depended on any of
// that tool's inputs, they don't need to generated.

class SgInitializedName;
// DQ (6/1/2004): Change this to be a list of pointers to SgInitializedName (to fix Beata's Bug beata.C)
typedef Rose_STL_Container<SgInitializedName*> SgInitializedNamePtrList;
typedef SgInitializedNamePtrList*              SgInitializedNamePtrListPtr;

class SgDeclarationStatement;

// DQ (1/28/2016): Different ways of documenting typedefs (none appear to be working with Doxygen).
/** \typedef SgDeclarationStatementPtrList
    \brief This is socumentation for the following typedef
 */
typedef Rose_STL_Container<SgDeclarationStatement*> SgDeclarationStatementPtrList;

/** \typedef SgDeclarationStatementPtrListPtr
    \brief This is socumentation for the following typedef
 */
typedef SgDeclarationStatementPtrList*              SgDeclarationStatementPtrListPtr;

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
// tps (8/20/2007): Added support for binaries.
/** \typedef SgAsmBlockPtrList
    This is socumentation for the following typedef
 */
typedef Rose_STL_Container<SgAsmBlock*>     SgAsmBlockPtrList;

/** This is socumentation for the following typedef */
typedef SgAsmBlockPtrList*                  SgAsmBlockPtrListPtr;

// JJW (8/28/2008): Added SgAsmInterpretation
typedef Rose_STL_Container<SgAsmInterpretation*> SgAsmInterpretationPtrList;

// DQ (6/14/2008): Added to support new exec format IR nodes
typedef Rose_STL_Container<SgAsmGenericSection*> SgAsmGenericSectionPtrList;
typedef SgAsmGenericSectionPtrList*              SgAsmGenericSectionPtrListPtr;

typedef Rose_STL_Container<SgAsmGenericFile*> SgAsmGenericFilePtrList;
typedef SgAsmGenericSectionPtrList*           SgAsmGenericFilePtrListPtr;

// DQ (6/14/2008): Added to support new exec format IR nodes
// typedef Rose_STL_Container<SgAsmGenericSegment*> SgAsmGenericSegmentPtrList;
// typedef SgAsmGenericSegmentPtrList*              SgAsmGenericSegmentPtrListPtr;

// DQ (6/14/2008): Added to support new exec format IR nodes
// typedef Rose_STL_Container<SgAsmElfSegmentEntry*> SgAsmElfSegmentEntryPtrList;
// typedef SgAsmElfSegmentEntryPtrList*              SgAsmElfSegmentEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmPEImportItem*> SgAsmPEImportItemPtrList;
typedef SgAsmPEImportItemPtrList*              SgAsmPEImportItemPtrListPtr;

typedef Rose_STL_Container<SgAsmPEImportDirectory*> SgAsmPEImportDirectoryPtrList;
typedef SgAsmPEImportDirectoryPtrList*              SgAsmPEImportDirectoryPtrListPtr;

typedef Rose_STL_Container<SgAsmPEImportItem*> SgAsmPEImportItemPtrList;
typedef SgAsmPEImportItemPtrList*              SgAsmPEImportItemPtrListPtr;

// DQ (6/14/2008): Added to support new exec format IR nodes
typedef Rose_STL_Container<SgAsmElfSymbol*> SgAsmElfSymbolPtrList;
typedef SgAsmElfSymbolPtrList*              SgAsmElfSymbolPtrListPtr;

// DQ (8/4/2008): Added to support new exec format IR nodes
typedef Rose_STL_Container<SgAsmCoffSymbol*> SgAsmCoffSymbolPtrList;
typedef SgAsmCoffSymbolPtrList*              SgAsmCoffSymbolPtrListPtr;

// DQ (8/8/2008): Added to support new exec format IR nodes
typedef Rose_STL_Container<SgAsmGenericSymbol*> SgAsmGenericSymbolPtrList;
typedef SgAsmGenericSymbolPtrList*              SgAsmGenericSymbolPtrListPtr;
#endif

class SgStatement;
typedef Rose_STL_Container<SgStatement*>    SgStatementPtrList;
typedef SgStatementPtrList*                 SgStatementPtrListPtr;

class SgBaseClass;
// DQ (6/21/2005): Change from list of SgBaseClass to list of SgBaseClass*
typedef Rose_STL_Container<SgBaseClass*>    SgBaseClassPtrList;
typedef SgBaseClassPtrList*                 SgBaseClassPtrListPtr;

class SgNode;
typedef Rose_STL_Container<SgNode*>         SgNodePtrList;
typedef SgNodePtrList*                      SgNodePtrListPtr;

class SgType;
typedef Rose_STL_Container<SgType*>         SgTypePtrList;
typedef SgTypePtrList*                      SgTypePtrListPtr;

class SgExpression;
typedef Rose_STL_Container<SgExpression*>   SgExpressionPtrList;
typedef SgExpressionPtrList*                SgExpressionPtrListPtr;

class SgKeyDatumPair;
typedef Rose_STL_Container<SgKeyDatumPair*>  SgKeyDatumPairPtrList;

class SgComprehension;
typedef Rose_STL_Container<SgComprehension*>  SgComprehensionPtrList;

typedef Rose_STL_Container<VariantT>       VariantTList;

// Liao 9/27/2010: new typedef for SgVarRefExp list
class SgVarRefExp;
typedef Rose_STL_Container<SgVarRefExp*>   SgVarRefExpPtrList;
typedef SgVarRefExpPtrList*                SgVarRefExpPtrListPtr;

class SgAttribute;
typedef Rose_STL_Container<SgAttribute*>    SgAttributePtrList;
typedef SgAttributePtrList*                 SgAttributePtrListPtr;

// DQ (6/14/2008): I think this should be unsigned char
// typedef Rose_STL_Container<char*>           SgCharPtrList;
// typedef SgCharPtrList*                      SgCharPtrListPtr;
typedef Rose_STL_Container<unsigned char>   SgCharList;
typedef SgCharList*                         SgCharListPtr;

typedef SgExpression*                       SgExpressionPtr;
typedef SgStatement*                        SgStatementPtr;
typedef SgInitializedName*                  SgInitializedNamePtr;

// DQ (4/7/2001) Add SgFile list support for multi-file support within SgProject
class SgFile;
typedef std::vector<SgFile*>                SgFilePtrList;
typedef SgFilePtrList*                      SgFilePtrListPtr;

// DQ (2/27/2019): Modified to add the line number so that we could support adding comments
// and CPP directives to shared IR nodes to support multi-file compilation.
// DQ (5/22/2006): Added this support so that we could have general way of interpreting STL
// containers so that we could simplify that code used to generated code for the destructors.
// JJW (6/21/2008): Changed to a unordered vector for performance
typedef int                                   SgFileId;
typedef std::vector<SgFileId>                 SgFileIdList;
// typedef struct { int file_id; int line_number; } SgFileIdLineNumber;
// typedef std::vector<SgFileIdLineNumber>          SgFileIdList;
typedef int                                   SgFileLineNumber;
typedef std::vector<SgFileLineNumber>         SgFileLineNumberList;

// DQ (5/22/2006): Added this support so that we could have general way of interpreting STL
// containers so that we could simplify that code used to generated code for the destructors.
typedef Rose_STL_Container<std::string>     SgStringList;
typedef SgStringList*                       SgStringListPtr;

// DQ (3/10/2007): Added STL set of SgNode* so that we could support existence tests in the
// symbol table without a linear search of the symbol table (where we don't use the name).
// This test helps detect where symbols may have been inserted into the symbol table using
// two different names, or there names changed without properly unloading and reloading the
// associated symbol.
typedef std::set<SgNode*>                   SgNodeSet;
typedef SgNodeSet*                          SgNodeSetPtr;

class ROSEAttributesList;
typedef ROSEAttributesList*                 ROSEAttributesListPtr;

class ROSEAttributesListContainer;
typedef ROSEAttributesListContainer*        ROSEAttributesListContainerPtr;

// I don't think these are needed
// typedef vector<ROSEAttributesListContainer*>         ROSEAttributesListContainerList;
// typedef ROSEAttributesListContainerList*             ROSEAttributesListContainerListPtr;

// MK: The data member p_nodes of the SgModifierNodes class is now an
// STL vector, therefore we define the following data types
typedef std::vector<SgModifierType*>        SgModifierTypePtrVector;
// DQ (12/19/2005): This is not used anywhere!
// typedef SgModifierTypePtrVector          SgModifierTypePtrVectorPtr;

// DQ (12/6/2003): added bit vector typedef to support addition of more flags
// that can be held in a long integer for the Unparse_Info object.
typedef std::vector<bool>                   SgBitVector;

// DQ (3/12/2004): Added for template support
class SgTemplateParameter;
typedef Rose_STL_Container<SgTemplateParameter*> SgTemplateParameterPtrList;
typedef SgTemplateParameterPtrList*              SgTemplateParameterPtrListPtr;

// DQ (3/12/2004): Added for template support
class SgTemplateArgument;
typedef Rose_STL_Container<SgTemplateArgument*>  SgTemplateArgumentPtrList;
typedef SgTemplateArgumentPtrList*               SgTemplateArgumentPtrListPtr;

// DQ (9/6/2004): Added for qualified name support (e.g. A::B::C::dataMember)
// This form of qualified name support was later removed!
// class SgSymbol;
// typedef list<SgSymbol*>      SgSymbolPtrList;
// typedef SgSymbolPtrList*     SgSymbolPtrListPtr;

// DQ (5/6/2005): Added support for SgDirectory IR node!
class SgDirectory;
typedef std::vector<SgDirectory*>           SgDirectoryPtrList;
typedef SgDirectoryPtrList*                 SgDirectoryPtrListPtr;

// DQ (12/21/2005): Added to support explicit name qualifiers (this provides only global qualifier info so far)
class SgQualifiedName;
typedef Rose_STL_Container<SgQualifiedName*> SgQualifiedNamePtrList;
typedef SgQualifiedNamePtrList*              SgQualifiedNamePtrListPtr;

// DQ (10/4/2006): Add support for storing unique numbers with SgBasicBlock IR nodes.
// This mechanism premits unique numbers to be computed and cached and the cache to
// be easily invalidated.
// Name this as a list since the ROSETTA code generation will use this information.
class SgBasicBlock;
typedef SgBasicBlock*                       SgBasicBlockPtr;
// typedef std::map<SgBasicBlock*,int>      SgBasicBlockPtrList;
typedef std::vector<SgBasicBlockPtr>        SgBasicBlockPtrList;
typedef SgBasicBlockPtrList*                SgBasicBlockPtrListPtr;

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
// DQ (3/15/2007): Added support for binaries.
typedef Rose_STL_Container<SgAsmStatement*> SgAsmStatementPtrList;
typedef SgAsmStatementPtrList*              SgAsmStatementPtrListPtr;

typedef Rose_STL_Container<SgAsmInstruction*> SgAsmInstructionPtrList;
typedef SgAsmInstructionPtrList*              SgAsmInstructionPtrListPtr;

// DQ (3/15/2007): Added support for binaries.
typedef Rose_STL_Container<SgAsmExpression*> SgAsmExpressionPtrList;
typedef SgAsmExpressionPtrList*              SgAsmExpressionPtrListPtr;

typedef Rose_STL_Container<SgAsmIntegerValueExpression*> SgAsmIntegerValuePtrList;
typedef SgAsmIntegerValuePtrList*                SgAsmIntegerValuePtrListPtr;

// DQ (3/15/2007): Added support for binaries.
typedef Rose_STL_Container<SgAsmSynthesizedDeclaration*> SgAsmSynthesizedDeclarationPtrList;
typedef SgAsmSynthesizedDeclarationPtrList*              SgAsmSynthesizedDeclarationPtrListPtr;

typedef Rose_STL_Container<SgAsmX86Instruction*> SgAsmX86InstructionPtrList;
#ifdef ROSE_ENABLE_ASM_AARCH64
typedef Rose_STL_Container<SgAsmAarch64Instruction*> SgAsmAarch64InstructionPtrList;
#endif
#endif

// DQ (11/19/2007): Added support for Fortran namelist statement.
typedef Rose_STL_Container<SgNameGroup*>           SgNameGroupPtrList;
typedef SgNameGroupPtrList*                        SgNameGroupPtrListPtr;

// DQ (11/20/2007): Added support for Fortran data statement.
typedef Rose_STL_Container<SgDataStatementGroup*>  SgDataStatementGroupPtrList;
typedef SgDataStatementGroupPtrList*               SgDataStatementGroupPtrListPtr;

// DQ (11/20/2007): Added support for Fortran data statement.
typedef Rose_STL_Container<SgDataStatementObject*> SgDataStatementObjectPtrList;
typedef SgDataStatementObjectPtrList*              SgDataStatementObjectPtrListPtr;

// DQ (11/20/2007): Added support for Fortran data statement.
typedef Rose_STL_Container<SgDataStatementValue*>  SgDataStatementValuePtrList;
typedef SgDataStatementValuePtrList*               SgDataStatementValuePtrListPtr;

// DQ (11/21/2007): Added support for common block statements (which can have multiple common blocks)
typedef Rose_STL_Container<SgCommonBlockObject*>   SgCommonBlockObjectPtrList;
typedef SgCommonBlockObjectPtrList*                SgCommonBlockObjectPtrListPtr;

// DQ (11/21/2007): Added support for dimension statements (which can have multiple entries)
typedef Rose_STL_Container<SgDimensionObject*>     SgDimensionObjectPtrList;
typedef SgDimensionObjectPtrList*                  SgDimensionObjectPtrListPtr;

// DQ (11/21/2007): Added support for dimension statements (which can have multiple entries)
typedef Rose_STL_Container<SgLabelSymbol*>     SgLabelSymbolPtrList;
typedef SgLabelSymbolPtrList*                  SgLabelSymbolPtrListPtr;

// DQ (11/21/2007): Added support for format statements (which can have multiple entries)
typedef Rose_STL_Container<SgFormatItem*>      SgFormatItemPtrList;
typedef SgFormatItemPtrList*                   SgFormatItemPtrListPtr;

// DQ (8/21/2008): Moved this from Node.code to make it local since
// we can't reference the nested addr_t directly from glogal scope.
// typedef uint64_t addr_t; // address and size (file and memory)
typedef Rose_STL_Container<Rose::BinaryAnalysis::Address> SgAddressList;
typedef SgAddressList* SgAddressListPtr;

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
typedef Rose_STL_Container<rose_rva_t>         SgRVAList;
typedef SgRVAList*                             SgRVAListPtr;

typedef Rose_STL_Container<SgAsmPEExportEntry*> SgAsmPEExportEntryPtrList;
typedef SgAsmPEExportEntryPtrList*              SgAsmPEExportEntryPtrListPtr;
#endif

typedef Rose_STL_Container<uint16_t>           SgUnsigned16List;
typedef SgUnsigned16List*                      SgUnsigned16ListPtr;

typedef Rose_STL_Container<unsigned>           SgUnsignedList;
typedef SgUnsignedList*                        SgUnsignedListPtr;

// DQ (8/7/2008): Added list of size_t types for binary format support.
typedef Rose_STL_Container<size_t>             SgSizeTList;
typedef SgSizeTList*                           SgSizeTListPtr;

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
typedef Rose_STL_Container<SgAsmNEEntryPoint*> SgAsmNEEntryPointPtrList;
typedef SgAsmNEEntryPointPtrList*              SgAsmNEEntryPointPtrListPtr;

typedef Rose_STL_Container<SgAsmNERelocEntry*> SgAsmNERelocEntryPtrList;
typedef SgAsmNERelocEntryPtrList*              SgAsmNERelocEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmLEPageTableEntry*> SgAsmLEPageTableEntryPtrList;
typedef SgAsmLEPageTableEntryPtrList*              SgAsmLEPageTableEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmLEEntryPoint*> SgAsmLEEntryPointPtrList;
typedef SgAsmLEEntryPointPtrList*              SgAsmLEEntryPointPtrListPtr;

// The OS/2 SgAsmLERelocEntry reused the Windows SgAsmNERelocEntry
typedef SgAsmNERelocEntry SgAsmLERelocEntry;
typedef Rose_STL_Container<SgAsmLERelocEntry*> SgAsmLERelocEntryPtrList;
typedef SgAsmLERelocEntryPtrList*              SgAsmLERelocEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmGenericHeader*> SgAsmGenericHeaderPtrList;
typedef SgAsmGenericHeaderPtrList*              SgAsmGenericHeaderPtrListPtr;

typedef Rose_STL_Container<SgAsmGenericDLL*> SgAsmGenericDLLPtrList;
typedef SgAsmGenericDLLPtrList*              SgAsmGenericDLLPtrListPtr;
#endif

typedef Rose_STL_Container<unsigned char>    SgUnsignedCharList;
typedef SgUnsignedCharList*                  SgUnsignedCharListPtr;

// DQ (10/1/2008): Added support for lists of SgModuleStatement where they are
// not a part of the current translation unit.  A place for the information in
// the *.mod files to be put.  This is just the type declaration for the list.
typedef Rose_STL_Container<SgModuleStatement*> SgModuleStatementPtrList;
typedef SgModuleStatementPtrList*              SgModuleStatementPtrListPtr;

// TOO1 (5/16/2013)
typedef Rose_STL_Container<SgJavaPackageDeclaration*> SgJavaPackageDeclarationPtrList;

// DQ (6/12/2013): Added to support use in Java support (in SgSourceFile).
typedef Rose_STL_Container<SgJavaImportStatement*> SgJavaImportStatementPtrList;

// DQ (6/12/2013): Added to support use in Java support (in SgSourceFile).
typedef Rose_STL_Container<SgClassDeclaration*> SgClassDeclarationPtrList;

// DQ (10/4/2008): Support for list of names or rename entries for the SgUseStatement (Fortran 90 support)
typedef Rose_STL_Container<SgRenamePair*> SgRenamePairPtrList;
typedef SgRenamePairPtrList*              SgRenamePairPtrListPtr;

// DQ (10/6/2008): Added improved support for F90 interfaces using interface bodies.
typedef Rose_STL_Container<SgInterfaceBody*> SgInterfaceBodyPtrList;
typedef SgInterfaceBodyPtrList*              SgInterfaceBodyPtrListPtr;

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
// DQ (11/5/2008): Addes as part of general Dwarf support in the AST for binary executables.
typedef Rose_STL_Container<SgAsmDwarfLine*> SgAsmDwarfLinePtrList;
typedef SgAsmDwarfLinePtrList*              SgAsmDwarfLinePtrListPtr;

typedef Rose_STL_Container<SgAsmDwarfMacro*> SgAsmDwarfMacroPtrList;
typedef SgAsmDwarfMacroPtrList*              SgAsmDwarfMacroPtrListPtr;

typedef Rose_STL_Container<SgAsmDwarfConstruct*> SgAsmDwarfConstructPtrList;
typedef SgAsmDwarfConstructPtrList*              SgAsmDwarfConstructPtrListPtr;

typedef Rose_STL_Container<SgAsmDwarfCompilationUnit*> SgAsmDwarfCompilationUnitPtrList;
typedef SgAsmDwarfCompilationUnitPtrList*              SgAsmDwarfCompilationUnitPtrListPtr;
#endif

// DQ (11/28/2008): Added support for list of integers (used for flag list in SgLinemarkerDirectiveStatement).
// typedef std::vector<int>                     SgIntegerList;
// Liao, 5/30/2009 types for OpenMP support
typedef Rose_STL_Container<SgOmpClause*>   SgOmpClausePtrList;
typedef SgOmpClausePtrList*                SgOmpClausePtrListPtr;

typedef Rose_STL_Container<SgOmpSectionStatement*>   SgOmpSectionStatementPtrList;
typedef SgOmpSectionStatementPtrList*                SgOmpSectionStatementPtrListPtr;

// DQ (1/13/2014): Added support for Java annotations.
typedef Rose_STL_Container<SgJavaMemberValuePair*> SgJavaMemberValuePairPtrList;
typedef SgJavaMemberValuePairPtrList* SgJavaMemberValuePairPtrListPtr;

// DQ (3/6/2014): Added support for Untyped IR nodes.

// Rasmussen (08/25/2022): Removed all untyped Sage nodes. Ultimately it proved easier to
// construct regular IR nodes from the Jovial parser. Using the untyped system just led to an
// unnecessary step and wasted effort.

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
class SgAsmRegisterReferenceExpression;
typedef Rose_STL_Container<SgAsmRegisterReferenceExpression*> SgAsmRegisterReferenceExpressionPtrList;
typedef SgAsmRegisterReferenceExpressionPtrList* SgAsmRegisterReferenceExpressionPtrListPtr;
#endif

// DQ (9/3/2014): Added support for C++11 Lambda expressions.
typedef Rose_STL_Container<SgLambdaCapture*>     SgLambdaCapturePtrList;
typedef SgLambdaCapturePtrList*                  SgLambdaCapturePtrListPtr;

// DQ (9/15/2018) Add SgSourceFile list support for header file reporting (for unparse headers option).
class SgSourceFile;
typedef Rose_STL_Container<SgSourceFile*>        SgSourceFilePtrList;
typedef SgSourceFilePtrList*                     SgSourceFilePtrListPtr;

// DQ (9/18/2018) Add SgIncludeFile list support for header file reporting (for unparse headers option).
class SgIncludeFile;
typedef Rose_STL_Container<SgIncludeFile*>        SgIncludeFilePtrList;
typedef SgIncludeFilePtrList*                     SgIncludeFilePtrListPtr;

// PP (11/24/2020) Add support for Ada representation clauses
class SgAdaComponentClause;
typedef Rose_STL_Container<SgAdaComponentClause*> SgAdaComponentClausePtrList;
typedef SgAdaComponentClausePtrList*              SgAdaComponentClausePtrListPtr;

// DQ (10/28/2013): Forward declaration for new token unparsing support.
class TokenStreamSequenceToNodeMapping;
class FrontierNode;
class PreviousAndNextNodeData;

// DQ (11/30/2015): Added support for mapping of the AST to macro expansions.
class MacroExpansion;

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
#include <SgSharedVector.h>

typedef SgSharedVector<unsigned char>             SgFileContentList;
typedef SgFileContentList*                        SgFileContentListPtr;

typedef Rose_STL_Container<SgAsmElfRelocEntry*>   SgAsmElfRelocEntryPtrList;
typedef SgAsmElfRelocEntryPtrList*                SgAsmElfRelocEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmElfNoteEntry*>    SgAsmElfNoteEntryPtrList;
typedef SgAsmElfNoteEntryPtrList*                 SgAsmElfNoteEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmElfDynamicEntry*> SgAsmElfDynamicEntryPtrList;
typedef SgAsmElfDynamicEntryPtrList*              SgAsmElfDynamicEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmElfEHFrameEntryCI*> SgAsmElfEHFrameEntryCIPtrList;
typedef SgAsmElfEHFrameEntryCIPtrList*              SgAsmElfEHFrameEntryCIPtrListPtr;

typedef Rose_STL_Container<SgAsmElfEHFrameEntryFD*> SgAsmElfEHFrameEntryFDPtrList;
typedef SgAsmElfEHFrameEntryFDPtrList*              SgAsmElfEHFrameEntryFDPtrListPtr;

typedef Rose_STL_Container<SgAsmElfSegmentTableEntry*> SgAsmElfSegmentTableEntryPtrList;
typedef SgAsmElfSegmentTableEntryPtrList* SgAsmElfSegmentTableEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmElfSymverEntry*> SgAsmElfSymverEntryPtrList;
typedef SgAsmElfSymverEntryPtrList*              SgAsmElfSymverEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmElfSymverDefinedEntry*> SgAsmElfSymverDefinedEntryPtrList;
typedef SgAsmElfSymverDefinedEntryPtrList*              SgAsmElfSymverDefinedEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmElfSymverDefinedAux*> SgAsmElfSymverDefinedAuxPtrList;
typedef SgAsmElfSymverDefinedAuxPtrList*              SgAsmElfSymverDefinedAuxPtrListPtr;

typedef Rose_STL_Container<SgAsmElfSymverNeededEntry*> SgAsmElfSymverNeededEntryPtrList;
typedef SgAsmElfSymverNeededEntryPtrList*              SgAsmElfSymverNeededEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmElfSymverNeededAux*> SgAsmElfSymverNeededAuxPtrList;
typedef SgAsmElfSymverNeededAuxPtrList*              SgAsmElfSymverNeededAuxPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmAttribute*> SgAsmJvmAttributePtrList;
typedef SgAsmJvmAttributePtrList*              SgAsmJvmAttributePtrListPtr;

typedef Rose_STL_Container<SgAsmJvmBootstrapMethod*> SgAsmJvmBootstrapMethodPtrList;
typedef SgAsmJvmBootstrapMethodPtrList*              SgAsmJvmBootstrapMethodPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmInnerClassesEntry*> SgAsmJvmInnerClassesEntryPtrList;
typedef SgAsmJvmInnerClassesEntryPtrList*              SgAsmJvmInnerClassesEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmConstantPoolEntry*> SgAsmJvmConstantPoolEntryPtrList;
typedef SgAsmJvmConstantPoolEntryPtrList*              SgAsmJvmConstantPoolEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmExceptionHandler*> SgAsmJvmExceptionHandlerPtrList;
typedef SgAsmJvmExceptionHandlerPtrList*              SgAsmJvmExceptionHandlerPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmField*> SgAsmJvmFieldPtrList;
typedef SgAsmJvmFieldPtrList*              SgAsmJvmFieldPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmMethodParametersEntry*> SgAsmJvmMethodParametersEntryPtrList;
typedef SgAsmJvmMethodParametersEntryPtrList*              SgAsmJvmMethodParametersEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmLineNumberEntry*> SgAsmJvmLineNumberEntryPtrList;
typedef SgAsmJvmLineNumberEntryPtrList*              SgAsmJvmLineNumberEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmLocalVariableEntry*> SgAsmJvmLocalVariableEntryPtrList;
typedef SgAsmJvmLocalVariableEntryPtrList*              SgAsmJvmLocalVariableEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmLocalVariableTypeEntry*> SgAsmJvmLocalVariableTypeEntryPtrList;
typedef SgAsmJvmLocalVariableTypeEntryPtrList*              SgAsmJvmLocalVariableTypeEntryPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmMethod*> SgAsmJvmMethodPtrList;
typedef SgAsmJvmMethodPtrList*              SgAsmJvmMethodPtrListPtr;

typedef Rose_STL_Container<SgAsmJvmStackMapFrame*> SgAsmJvmStackMapFramePtrList;
typedef SgAsmJvmStackMapFramePtrList*              SgAsmJvmStackMapFramePtrListPtr;

typedef Rose_STL_Container<SgAsmJvmStackMapVerificationType*> SgAsmJvmStackMapVerificationTypePtrList;
typedef SgAsmJvmStackMapVerificationTypePtrList*              SgAsmJvmStackMapVerificationTypePtrListPtr;

typedef Rose_STL_Container<SgAsmPERVASizePair*> SgAsmPERVASizePairPtrList;
typedef SgAsmPERVASizePairPtrList* SgAsmPERVASizePairPtrListPtr;
#endif

// DQ (11/20/2010): Added type for SgToken list
// Build a type for the SgToken list.
typedef Rose_STL_Container<SgToken*> SgTokenPtrList;
typedef SgTokenPtrList* SgTokenPtrListPtr;

// DQ (11/6/2008): This is the support for mapping instructions to source code and back.
// When it is further along it will be moved to the SgAsmDwarfCompilationUnit as a member
// function which will built it if it has not previously been built.
// This is how a triplet would be built (in the future), instead of a pair, but for now use a pair.
// std::tr1::tuple<int, int, int> tp;
typedef std::pair<int,int> LineColumnFilePosition;
typedef std::pair<int,LineColumnFilePosition> FileIdLineColumnFilePosition;

typedef std::pair<uint64_t,FileIdLineColumnFilePosition> AddressFileIdLineColumnFilePositionPair;
typedef std::pair<FileIdLineColumnFilePosition,uint64_t> FileIdLineColumnFilePositionAddressPair;

// typedef std::multimap<uint64_t,FileIdLineColumnFilePosition> SgInstructionAddressSourcePositionMapPtrList;
// typedef std::multimap<FileIdLineColumnFilePosition,uint64_t> SgSourcePositionInstructionAddressMapPtrList;
typedef std::multimap<uint64_t,FileIdLineColumnFilePosition> SgInstructionAddressSourcePositionMapPtrList;
typedef std::multimap<FileIdLineColumnFilePosition,uint64_t> SgSourcePositionInstructionAddressMapPtrList;

typedef std::pair<SgInstructionAddressSourcePositionMapPtrList*,SgSourcePositionInstructionAddressMapPtrList*> DwarfInstructionSourceMapReturnType;

ROSE_DLL_API std::ostream& operator<<(std::ostream&, const SgName&);

// DQ (12/6/2003): Added output function for SgBitVector objects
std::ostream& operator<<(std::ostream&, const std::vector<bool>&);

// DQ (8/3/2005): Added output function for STL set objects
std::ostream& operator<<(std::ostream&, const std::set<int>&);

// DQ (10/4/2006): Added output function for STL map objects
std::ostream& operator<<(std::ostream&, const std::map<SgNode*,int>&);

// DQ (10/6/2006): Added output function for STL map objects
std::ostream& operator<<(std::ostream&, const std::map<SgNode*,std::string>&);

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
std::ostream& operator<<(std::ostream&, const Rose_STL_Container<SgAsmStatement*>&);
std::ostream& operator<<(std::ostream&, const Rose_STL_Container<SgAsmExpression*>&);
#endif

// DQ (11/20/2007): Part of support for the Fortran data statement
std::ostream& operator<<(std::ostream&, const Rose_STL_Container<SgDataStatementObject*>&);
std::ostream& operator<<(std::ostream&, const Rose_STL_Container<SgDataStatementValue*>&);
std::ostream& operator<<(std::ostream&, const Rose_STL_Container<SgCommonBlockObject*>&);
std::ostream& operator<<(std::ostream&, const Rose_STL_Container<SgDimensionObject*>&);
std::ostream& operator<<(std::ostream&, const Rose_STL_Container<SgLabelSymbol*>&);
std::ostream& operator<<(std::ostream&, const Rose_STL_Container<SgFormatItem*>&);

// DQ (4/19/2006): forward declaration of PreprocessingInfo so that
// PreprocessingInfo can follow Sage III class declarations and contain
// a Sg_File_Info object (to record the filename of the comments and
// CPP directoves).
// class PreprocessingInfo;

// DQ (4/23/2006): The friend declaration the SgProject class is not enough this must be defined outside of the class (for g++ 4.1.0).
std::ostream & operator<< ( std::ostream & os, const Rose_STL_Container<std::string> & l );

#ifndef SWIG

std::ostream& operator<<(std::ostream&, const std::multimap<Rose::BinaryAnalysis::Address, Rose::BinaryAnalysis::Address>&);
std::ostream& operator<<(std::ostream&,
                         const std::vector<std::pair<Rose::BinaryAnalysis::Address, Rose::BinaryAnalysis::Address>>&);
// struct SgAsmGenericFormat::fileDetails;
// std::ostream & operator<< ( std::ostream & os, const SgAsmGenericFormat::fileDetails & sb );
std::ostream & operator<< ( std::ostream & os, const struct stat & sb );

// endif for ifndef ROSE_USE_SWIG_SUPPORT
#endif

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
// DQ (3/15/2007): Added support for binaries
std::ostream & operator<< ( std::ostream & os, const Rose_STL_Container<SgAsmStatement*> & l );
#endif

// DQ (5/8/2007): Added support for type elaboration lists, hidden type lists, and hidden declaration lists.
std::ostream & operator<< ( std::ostream & os, const std::set<SgSymbol*> & l );

#endif
