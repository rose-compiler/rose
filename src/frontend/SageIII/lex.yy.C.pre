/* DO NOT EDIT - DO NOT EDIT - DO NOT EDIT - DO NOT EDIT */
/* THIS FILE IS AUTO-GENERATED FROM preproc-c.ll */



#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer Rose_C_Cxx__create_buffer
#define yy_delete_buffer Rose_C_Cxx__delete_buffer
#define yy_scan_buffer Rose_C_Cxx__scan_buffer
#define yy_scan_string Rose_C_Cxx__scan_string
#define yy_scan_bytes Rose_C_Cxx__scan_bytes
#define yy_init_buffer Rose_C_Cxx__init_buffer
#define yy_flush_buffer Rose_C_Cxx__flush_buffer
#define yy_load_buffer_state Rose_C_Cxx__load_buffer_state
#define yy_switch_to_buffer Rose_C_Cxx__switch_to_buffer
#define yypush_buffer_state Rose_C_Cxx_push_buffer_state
#define yypop_buffer_state Rose_C_Cxx_pop_buffer_state
#define yyensure_buffer_stack Rose_C_Cxx_ensure_buffer_stack
#define yy_flex_debug Rose_C_Cxx__flex_debug
#define yyin Rose_C_Cxx_in
#define yyleng Rose_C_Cxx_leng
#define yylex Rose_C_Cxx_lex
#define yylineno Rose_C_Cxx_lineno
#define yyout Rose_C_Cxx_out
#define yyrestart Rose_C_Cxx_restart
#define yytext Rose_C_Cxx_text
#define yywrap Rose_C_Cxx_wrap
#define yyalloc Rose_C_Cxx_alloc
#define yyrealloc Rose_C_Cxx_realloc
#define yyfree Rose_C_Cxx_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define Rose_C_Cxx__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Rose_C_Cxx__create_buffer
#endif

#ifdef yy_delete_buffer
#define Rose_C_Cxx__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Rose_C_Cxx__delete_buffer
#endif

#ifdef yy_scan_buffer
#define Rose_C_Cxx__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Rose_C_Cxx__scan_buffer
#endif

#ifdef yy_scan_string
#define Rose_C_Cxx__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Rose_C_Cxx__scan_string
#endif

#ifdef yy_scan_bytes
#define Rose_C_Cxx__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Rose_C_Cxx__scan_bytes
#endif

#ifdef yy_init_buffer
#define Rose_C_Cxx__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Rose_C_Cxx__init_buffer
#endif

#ifdef yy_flush_buffer
#define Rose_C_Cxx__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Rose_C_Cxx__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define Rose_C_Cxx__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Rose_C_Cxx__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define Rose_C_Cxx__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Rose_C_Cxx__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define Rose_C_Cxx_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Rose_C_Cxx_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define Rose_C_Cxx_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Rose_C_Cxx_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define Rose_C_Cxx_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Rose_C_Cxx_ensure_buffer_stack
#endif

#ifdef yylex
#define Rose_C_Cxx_lex_ALREADY_DEFINED
#else
#define yylex Rose_C_Cxx_lex
#endif

#ifdef yyrestart
#define Rose_C_Cxx_restart_ALREADY_DEFINED
#else
#define yyrestart Rose_C_Cxx_restart
#endif

#ifdef yylex_init
#define Rose_C_Cxx_lex_init_ALREADY_DEFINED
#else
#define yylex_init Rose_C_Cxx_lex_init
#endif

#ifdef yylex_init_extra
#define Rose_C_Cxx_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Rose_C_Cxx_lex_init_extra
#endif

#ifdef yylex_destroy
#define Rose_C_Cxx_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Rose_C_Cxx_lex_destroy
#endif

#ifdef yyget_debug
#define Rose_C_Cxx_get_debug_ALREADY_DEFINED
#else
#define yyget_debug Rose_C_Cxx_get_debug
#endif

#ifdef yyset_debug
#define Rose_C_Cxx_set_debug_ALREADY_DEFINED
#else
#define yyset_debug Rose_C_Cxx_set_debug
#endif

#ifdef yyget_extra
#define Rose_C_Cxx_get_extra_ALREADY_DEFINED
#else
#define yyget_extra Rose_C_Cxx_get_extra
#endif

#ifdef yyset_extra
#define Rose_C_Cxx_set_extra_ALREADY_DEFINED
#else
#define yyset_extra Rose_C_Cxx_set_extra
#endif

#ifdef yyget_in
#define Rose_C_Cxx_get_in_ALREADY_DEFINED
#else
#define yyget_in Rose_C_Cxx_get_in
#endif

#ifdef yyset_in
#define Rose_C_Cxx_set_in_ALREADY_DEFINED
#else
#define yyset_in Rose_C_Cxx_set_in
#endif

#ifdef yyget_out
#define Rose_C_Cxx_get_out_ALREADY_DEFINED
#else
#define yyget_out Rose_C_Cxx_get_out
#endif

#ifdef yyset_out
#define Rose_C_Cxx_set_out_ALREADY_DEFINED
#else
#define yyset_out Rose_C_Cxx_set_out
#endif

#ifdef yyget_leng
#define Rose_C_Cxx_get_leng_ALREADY_DEFINED
#else
#define yyget_leng Rose_C_Cxx_get_leng
#endif

#ifdef yyget_text
#define Rose_C_Cxx_get_text_ALREADY_DEFINED
#else
#define yyget_text Rose_C_Cxx_get_text
#endif

#ifdef yyget_lineno
#define Rose_C_Cxx_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Rose_C_Cxx_get_lineno
#endif

#ifdef yyset_lineno
#define Rose_C_Cxx_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Rose_C_Cxx_set_lineno
#endif

#ifdef yywrap
#define Rose_C_Cxx_wrap_ALREADY_DEFINED
#else
#define yywrap Rose_C_Cxx_wrap
#endif

#ifdef yyalloc
#define Rose_C_Cxx_alloc_ALREADY_DEFINED
#else
#define yyalloc Rose_C_Cxx_alloc
#endif

#ifdef yyrealloc
#define Rose_C_Cxx_realloc_ALREADY_DEFINED
#else
#define yyrealloc Rose_C_Cxx_realloc
#endif

#ifdef yyfree
#define Rose_C_Cxx_free_ALREADY_DEFINED
#else
#define yyfree Rose_C_Cxx_free
#endif

#ifdef yytext
#define Rose_C_Cxx_text_ALREADY_DEFINED
#else
#define yytext Rose_C_Cxx_text
#endif

#ifdef yyleng
#define Rose_C_Cxx_leng_ALREADY_DEFINED
#else
#define yyleng Rose_C_Cxx_leng
#endif

#ifdef yyin
#define Rose_C_Cxx_in_ALREADY_DEFINED
#else
#define yyin Rose_C_Cxx_in
#endif

#ifdef yyout
#define Rose_C_Cxx_out_ALREADY_DEFINED
#else
#define yyout Rose_C_Cxx_out
#endif

#ifdef yy_flex_debug
#define Rose_C_Cxx__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug Rose_C_Cxx__flex_debug
#endif

#ifdef yylineno
#define Rose_C_Cxx_lineno_ALREADY_DEFINED
#else
#define yylineno Rose_C_Cxx_lineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Rose_C_Cxx_wrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[207] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   96,   95,
       57,   37,   54,    1,   57,   19,   55,   33,   12,   15,
       56,    6,    7,   17,   30,    9,   29,   11,   18,   34,
       34,   10,    8,   35,   28,   36,   16,   38,   31,   32,
       13,    4,   20,    5,   14,   37,   33,   38,   72,   75,
       95,   78,   76,   78,   69,   70,   95,   71,   95,   61,
       63,   95,   64,   95,   84,   81,   82,   84,   84,   94,
       93,   94,   89,   90,   95,   91,   95,   37,    2,   24,
       21,   22,   23,   40,   39,    0,   34,    0,   26,   27,

       38,   25,   37,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   38,   73,   74,   77,   68,   67,   66,
       67,   62,   60,   59,   60,   83,   80,    0,   92,   88,
       87,   86,   87,   34,    0,    0,    0,    0,    0,   46,
        0,    0,    0,    0,    0,   38,   65,   58,   79,   85,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   38,    0,    0,   49,   50,    0,    0,
        0,    0,    0,   44,    0,    0,    0,   38,    0,    0,
       51,   45,   47,    0,    0,    0,   43,    0,   38,    0,
       42,   48,    0,   53,    0,    0,    0,   41,   52,    0,

        0,    0,    0,    3,    0,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    7,    8,    9,    1,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   29,   30,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       31,   32,   33,   34,   29,    1,   35,   36,   37,   38,

       39,   40,   41,   29,   42,   29,   29,   43,   44,   45,
       46,   47,   29,   48,   49,   50,   51,   29,   52,   53,
       29,   29,   54,   55,   56,   57,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[58] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        2,    2,    1,    1,    1,    1,    1,    1,    2,    2,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[220] =
    {   0,
        0,    0,    0,   56,   56,   57,   58,   59,   60,   61,
       69,   73,   74,   83,   68,   75,   94,  101,  292,  293,
      293,  289,  293,  293,  287,  263,  293,  293,  293,  293,
      293,  293,  293,  293,  272,  293,   69,  293,   93,   98,
      100,  293,  293,  261,  293,  260,  293,    0,  293,  293,
      293,  293,  259,  293,  293,  109,  114,  231,  293,  293,
      280,  293,  293,  262,  293,  293,  278,  293,  111,  293,
      293,  277,  293,  121,  293,  293,  293,  264,  122,  293,
      293,  258,  293,  293,  274,  293,  126,  274,  293,  293,
      293,  293,  293,  293,  293,   77,  118,  114,  293,  293,

        0,  293,  129,  135,  197,  141,  210,   99,  101,  206,
      199,  200,  209,  193,  293,  293,  293,  293,  293,  293,
      239,  293,  293,  293,  238,  293,  293,  237,  293,  293,
      293,  293,  236,  133,  188,  197,  118,  198,  187,  124,
      197,  188,  197,  193,  182,  190,  293,  293,  293,  293,
      189,  185,  186,  186,  182,  177,  183,  183,  177,  180,
      177,  178,  171,  167,  166,  168,  293,  293,  172,  163,
      170,  170,  157,  293,  163,  166,  163,  159,  146,  151,
      293,  293,  293,  149,  147,  137,  293,  114,  156,  168,
      293,  293,  111,  293,  108,  173,   93,  293,  293,  155,

      192,   68,  197,  293,   72,  293,  251,  253,  255,  257,
      259,  261,  263,  265,   68,  267,  269,  271,  273
    } ;

static const flex_int16_t yy_def[220] =
    {   0,
      207,  207,  206,    3,  208,  208,  209,  209,  210,  210,
      211,  211,  212,  212,  213,  213,  214,  214,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  215,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  215,  206,  206,
      216,  206,  206,  206,  206,  206,  206,  206,  217,  206,
      206,  206,  206,  218,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  219,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      215,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  215,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  215,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  215,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  215,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  215,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,    0,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206
    } ;

static const flex_int16_t yy_nxt[351] =
    {   0,
       21,   22,   23,   21,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   48,
       49,   21,   50,   51,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   52,   53,   54,   55,   56,   60,   60,
       63,   63,   66,   66,   57,   67,   67,   68,   68,  101,
       81,   71,   64,   64,   72,   71,   76,   81,   72,  201,
       73,   77,   82,  205,   73,   76,   92,   61,   61,   82,
       77,   69,   69,   78,   58,   93,   84,  134,  134,   85,

       74,   86,   78,   84,   74,   79,   85,   94,   86,   96,
      103,   96,   95,  120,   79,  106,  121,  104,   97,   97,
       97,   97,  200,  124,  127,   87,  125,  128,  132,   96,
      103,  133,   87,   98,   97,   97,  106,  104,   97,   97,
      140,  137,  106,  138,   96,  141,  139,  105,  199,  198,
       98,  107,  108,  134,  134,  109,  110,  196,  195,  153,
      111,  157,  201,  197,  112,  113,  154,  105,  158,  196,
      202,  194,  107,  108,  196,  197,  109,  110,  107,  108,
      197,  111,  109,  110,  193,  112,  113,  111,  192,  191,
      190,  112,  113,  203,  203,  203,  203,  203,  203,  203,

      203,  203,  203,  189,  188,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  166,  165,  164,  163,
      162,  161,  160,  159,  156,  155,  152,  151,  150,  149,
      148,  147,  146,  145,  144,  204,  143,  142,  136,  135,
      204,   20,   20,   59,   59,   62,   62,   65,   65,   70,
       70,   75,   75,   80,   80,   83,   83,  115,  115,  119,
      119,  123,  123,  131,  131,   88,  130,  129,  126,  122,
      118,  117,  116,  114,  102,  100,   99,   91,   90,   89,
       88,  206,   19,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206
    } ;

static const flex_int16_t yy_chk[351] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    4,    5,    6,
        7,    8,    9,   10,    4,    9,   10,    9,   10,  215,
       15,   11,    7,    8,   11,   12,   13,   16,   12,  205,
       11,   13,   15,  202,   12,   14,   37,    5,    6,   16,
       14,    9,   10,   13,    4,   37,   17,   96,   96,   17,

       11,   17,   14,   18,   12,   13,   18,   39,   18,   40,
       56,   41,   39,   69,   14,   57,   69,   56,   40,   40,
       41,   41,  197,   74,   79,   17,   74,   79,   87,   97,
      103,   87,   18,   40,   98,   98,  104,  103,   97,   97,
      109,  108,  106,  108,  134,  109,  108,   56,  195,  193,
       40,   57,   57,  134,  134,   57,   57,  189,  188,  137,
       57,  140,  200,  189,   57,   57,  137,  103,  140,  190,
      200,  186,  104,  104,  196,  190,  104,  104,  106,  106,
      196,  104,  106,  106,  185,  104,  104,  106,  184,  180,
      179,  106,  106,  201,  201,  201,  201,  201,  203,  203,

      203,  203,  203,  178,  177,  176,  175,  173,  172,  171,
      170,  169,  166,  165,  164,  163,  162,  161,  160,  159,
      158,  157,  156,  155,  154,  153,  152,  151,  146,  145,
      144,  143,  142,  141,  139,  138,  136,  135,  133,  128,
      125,  121,  114,  113,  112,  201,  111,  110,  107,  105,
      203,  207,  207,  208,  208,  209,  209,  210,  210,  211,
      211,  212,  212,  213,  213,  214,  214,  216,  216,  217,
      217,  218,  218,  219,  219,   88,   85,   82,   78,   72,
       67,   64,   61,   58,   53,   46,   44,   35,   26,   25,
       22,   19,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;


/* 
    preproc.lex: This lexer currently recognizes C style comments, C++ style 
    comments, preprocessor directives, and c/c++ linkage specifications.  
    line/column/text information for each recognized directive is stored in 
    ROSEAttributesList.  This information is used by the unparser.
*/

/*
-------------------------------------------------------------------------------------
Originally written and modified by Markus Schordan and Dan Quinlan.
(see ChangeLog).

08-05-2006: Rewritten significantly by Ramakrishna Upadrasta.
Reason: For supporting additional features and bug-fixing (see summary below).
Note: The old preproc.lex is available in the same directory as preproc.original.lex
------------------------------------------------------------------------------------
*/
//Ramakrishna Upadrasta
//01-12-07: This is only version 0 of this file


/*
Summary of the changes:
=========================================================================================
    The regular expressions (and the action code) for C++ comments and 
    C style comments has been cleaned up and are (hopefully:) upto the standard.
=========================================================================================
    Naming of variables: 
        changed the lex variable names (states/start conditions) so that 
            CXX_COMMENT to corresponds to C++ style comments (beginning with //) and 
            C_COMMENT to correspond to C-style comments (enclosed by / * and * / ).
        Earlier they were
            C_COMMENT corresponded to C++ style comments
            CPP_COMMENT corresponded to C-style comments.
        It was felt that the names were confusing.
        The other choice was to name the C-style comments as C_COMMENT and C++ style 
        comments as CPP_COMMENT as in Wave. That was also found to be confusing, as CPP usually 
        means C Pre Processor). The new terminology is (partly) taken from makefiles which 
        allows 3 types of flags (C_FLAGS/CPP_FLAGS/CXX_FLAGS).

=========================================================================================
        Use STL types for instead of fixed size buffers for the following data structures
        commentString, macroString and bracestack.  (earlier they were 
                char commentString[10000000] for comments 
                char macroString[10000000] for macro strings
                and char bracestack[500] for matching of braces)
=========================================================================================
    Exact Position information for literals
        The previous method to get the position information from EDG is incorrect in 
        most of the cases. A second scan (like this lexer does) of the input was thought 
        to be necessary to attach additional info.
=========================================================================================
    Support for char literals
        including the '\e' '\U' which would be part of 2008 standard
        refer to ???? for details
=========================================================================================
    Semi colons
        We have to ensure that semi colons for that donot actually end 
        statements are taken care of carefully.
        class A {
        f(); <-- this semi colon should be taken care of carefully.
        }
=========================================================================================
    Double colons (::'s)
        They can only occur in  .........
        we identify them with 
=========================================================================================
trigraphs
    
=========================================================================================
    backslashes followed by newlines
        Either inside or outside of comments
=========================================================================================
    Whitespace info:
        The 

=========================================================================================
    Line number information:
        A better line count

=========================================================================================
    Trigraphs/Digraphs
=========================================================================================
    Proper identification and matching of different varieties of brackets
        Parenthesis ()
        Curly braces {}: The support for this existed earlier
        Square brackets []
=========================================================================================
    Support for keywords
        C++
        C
        C99
        C++Ox 
            Ones only in 
=========================================================================================
    To be done in CHAR literals
        wierd char literals
        testing for octal and hex char literals
        testing for backslashes in char literals.
    To be done in INT literals
        testing for 
=========================================================================================
    Limitations/open questions: 
        This lexer does not handle lots of important cases, like 
                character literals etc.  
                Trigraph sequences, alternative tokens (lex.trigraph and lex.digraph of the standard).  
                hexadecimal floating point literals and similar arcane stuff 
                        (HOW DOES EDG handle them? How does Wave handle them?)
    The user should probably use the wave workaround (does it support these?????), if she needs such things.
=========================================================================================
    Use of standard variable names like ([:space:] and [:blank:]) that come with FLEX. 
    Read the flex http://www.gnu.org/software/flex/manual/ for details. They work like C functions
    isspace and isblank respectively.
=========================================================================================
=========================================================================================
    A ROSE-sequence point in the original program is a position in the input program where 
    synchronization of the AST happens with the input program. For now, the sequence points
    are specific lexical tokens in the input program. In specific, they are 
        parenthesis: () 
        curly braces: {} 
        semi colons: ;
        new lines: \n
    The possible are contenders for being sequence points
        keywords???


    Sequence points of the program so that exact code generation is done
        If the code is not transformed? we synchronize the code generation
        If the code is transformed, we synchronize the code generation immediately after the next sequence point.

    An extension to the above token/character based sequence-points is to use parsing-constructs in the
    the grammar of the source language, like
        end of statement-sequence
        end of function/class/namespace definition
=========================================================================================
    ellipsis????

=========================================================================================
=========================================================================================
=========================================================================================
Notes about coding style:
    There is a unsaid tradition of separating the patterns and the actions in LEX files by tabs.
    I am using that, though Dan prefers that whitespace be used for indentation.
*/

/*
Test cases these (atleast fix) and effect:
    test2005_170.C about the buffer size of (C and C++ style) comments.
    test2001_18.C (and its related files: test2001_18A.h and test2001_18B.h): which is about the includes having code segments??????????????
    test2006_15.C: which is about the handling of the character literals.  
    test2005_184.C: which is about handling of backslashes at the end of C++ style comments
-------------------
    test2005_131.C
The ones that have singlequotes in a IF(0) and were earlier preprocessed silently, but are being flagged (incorrectly??) because we identify character literrals
Cxx tests
    test2004_154.C
    test2005_178.C
    test2005_191.C
    test2005_194.C
    test2005_196.C
    test2005_198.C
    test2005_199.C
    test2006_16.C
    test2006_17.C
    test2006_18.C
    test2006_26.C
-------------------------------------------------
write test cases so that 
    comments and preprocssor stuff etc.
    
*/
/*
       CHANGE LINES LIKE THIS TO ACCEPT std::string instead of char*, which makes us give it a c_str
                    preprocessorList.addElement(macrotype,macroString_str.c_str(),globalFileName,preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num); 
*/

/* DQ (12/10/2016): This is a technique to suppress warnings in generated code that we want to be an error elsewhere in ROSE. 
   See https://gcc.gnu.org/onlinedocs/gcc/Diagnostic-Pragmas.html for more detail.
 */
#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
#pragma GCC diagnostic ignored "-Wsign-compare"
#endif

#include "sage3basic.hhh"
#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <string>
#include <string.h>
#include <list>

/* DQ (1/21/2008): This now has a single definition in the header file: ROSE/src/frontend/SageIII/general_defs.h */
#include "general_token_defs.h"


#if 0
// DQ (1/21/2008): This definition is now redundent with what is in general_token_defs.h
struct token_element
{
    std::string token_lexeme;
    int token_id;
};
#endif

#if 0
// These are now defined in general_defs.h
//Ideally this should inherit from Sg_File_Info
//But for now, this will work
struct file_pos_info
{
    int line_num;
    int column_num;
};

struct stream_element
{ 
    struct token_element * p_tok_elem;
    struct file_pos_info beginning_fpi;
    struct file_pos_info ending_fpi;
};
#endif


using namespace std;

#define DEBUG_LEX_PASS 0

// list <stream_element*> ROSE_token_stream;
// typedef list <stream_element*>:: iterator SE_ITR;
LexTokenStreamTypePointer ROSE_token_stream_pointer = NULL;
typedef LexTokenStreamType::iterator SE_ITR;

struct file_pos_info curr_beginning;


//Rama
//#ifdef ROSE_TOKEN_IDENTIFIERS_H
//#define ROSE_TOKEN_IDENTIFIERS_H

using namespace ROSE_token_ids;

token_element ROSE_C_CXX_keyword_map[] = 
   {
        {"asm",              C_CXX_ASM }, 
        {"auto",             C_CXX_AUTO },
        {"bool",             C_CXX_BOOL },
        {"break",            C_CXX_BREAK },
        {"case",             C_CXX_CASE },
        {"catch",            C_CXX_CATCH },
        {"char",             C_CXX_CHAR },
        {"class",            C_CXX_CLASS },
        {"const",            C_CXX_CONST },
        {"const_cast",       C_CXX_CONSTCAST },
        {"continue",         C_CXX_CONTINUE },
        {"default",          C_CXX_DEFAULT },
        //{"defined",        C_CXX_DEFINED },
        {"delete",           C_CXX_DELETE },
        {"do",               C_CXX_DO },
        {"double",           C_CXX_DOUBLE },
        {"dynamic_cast",     C_CXX_DYNAMICCAST },
        {"else",             C_CXX_ELSE },
        {"enum",             C_CXX_ENUM },
        {"explicit",         C_CXX_EXPLICIT },
        {"export",           C_CXX_EXPORT },
        {"extern",           C_CXX_EXTERN },
        {"false",            C_CXX_FALSE },
        {"float",            C_CXX_FLOAT },
        {"for",              C_CXX_FOR },
        {"friend",           C_CXX_FRIEND },
        {"goto",             C_CXX_GOTO },
        {"if",               C_CXX_IF },
        {"inline",           C_CXX_INLINE },
        {"int",              C_CXX_INT },
        {"long",             C_CXX_LONG },
        {"mutable",          C_CXX_MUTABLE },
        {"namespace",        C_CXX_NAMESPACE },
        {"new",              C_CXX_NEW },
        {"operator",         C_CXX_OPERATOR },
        {"private",          C_CXX_PRIVATE },
        {"protected",        C_CXX_PROTECTED },
        {"public",           C_CXX_PUBLIC },
        {"register",         C_CXX_REGISTER },
        {"reinterpret_cast", C_CXX_REINTERPRETCAST },
        {"return",           C_CXX_RETURN },
        {"short",            C_CXX_SHORT },
        {"signed",           C_CXX_SIGNED },
        {"sizeof",           C_CXX_SIZEOF },
        {"static",           C_CXX_STATIC },
        {"static_cast",      C_CXX_STATICCAST },
        {"struct",           C_CXX_STRUCT },
        {"switch",           C_CXX_SWITCH },
        {"template",         C_CXX_TEMPLATE },
        {"this",             C_CXX_THIS },
        {"throw",            C_CXX_THROW },
        {"true",             C_CXX_TRUE },
        {"try",              C_CXX_TRY },
        {"typedef",          C_CXX_TYPEDEF },
        {"typeid",           C_CXX_TYPEID },
        {"typename",         C_CXX_TYPENAME },
        {"union",            C_CXX_UNION },
        {"unsigned",         C_CXX_UNSIGNED },
        {"using",            C_CXX_USING },
        {"virtual",          C_CXX_VIRTUAL },
        {"void",             C_CXX_VOID },
        {"volatile",         C_CXX_VOLATILE },
        {"wchar_t",          C_CXX_WCHART },
        {"while",            C_CXX_WHILE }
   };



//We know that this is a magic number. 
//We also know how to fix it.
#define NUM_C_CXX_KEYWORDS 63

//returns -1 if the string is not a keyword
//otherwise returns the token ID
int identify_if_C_CXX_keyword(std::string str)
   {
  // In FORTRAN, the identifiers are case insensitive.
  // So, variable 'ArEa' is the same as 'aReA'

     string lowered_str;
     for(unsigned int i = 0; i < str.size(); i++)
        {
          lowered_str += (unsigned char)tolower(str[i]);
        }

  // DQ (9/29/2013): This loop over keywords is rather inifficent, there should be a better implementation.

  // printf("got called with %s. Converted to %s\n", str.c_str(), lowered_str.c_str());
     for(int i = 0; i < NUM_C_CXX_KEYWORDS; i++)
        {
          if(lowered_str == ROSE_C_CXX_keyword_map[i].token_lexeme)
             {
               return (ROSE_C_CXX_keyword_map[i].token_id);
             }
        }

     return -1;
   }


int getNumberOfLines( std::string internalString )
   {
  // This code is copied from the similar support in rose_attributes_list.C.

     int line = 0;
     int i    = 0;
     while (internalString[i] != '\0')
        {
          if (internalString[i] == '\n')
             {
               line++;
             }
          i++;
        }

     return line;
   }

int getColumnNumberOfEndOfString( std::string internalString )
   {
  // This code is copied from the similar support in rose_attributes_list.C.

     int col = 1;
     int i   = 0;

  // DQ (10/1/2013): I think we want to have the column number after a '\n' be zero.
  // DQ (10/27/2006): the last line has a '\n' so we need the length 
  // of the last line before the '\n" triggers the counter to be reset!
  // This fix is required because the strings we have include the final '\n"
     int previousLineLength = col;
     while (internalString[i] != '\0')
        {
          if (internalString[i] == '\n')
             {
            // previousLineLength = col;
               col = 1;
               previousLineLength = col;
             }
            else
             {
               col++;
               previousLineLength = col;
             }
          i++;
        }

     int endingColumnNumber   = previousLineLength;

  // printf ("lexer: getColumnNumberOfEndOfString(): endingColumnNumber = %d \n",endingColumnNumber);

#if 0
  // If this is a one line comment then the ending position is the length of the comment PLUS the starting column position
     if (getNumberOfLines(internalString) == 1)
        {
       // endingColumnNumber += get_file_info()->get_col() - 1;
          endingColumnNumber += internalString.length() - 1;
        }
#endif

     return endingColumnNumber;
   }


void add_token (std::string str, int preproc_line_num, int & preproc_column_num, int tokenId )
   {
  // This function refactors the support to build a token and add it to the
  // list of tokens. It also increments the preproc_column_num as well.

     token_element *p_tok_elem = new token_element;
     p_tok_elem->token_lexeme = yytext;

     int is_keyword = identify_if_C_CXX_keyword(str);

#if DEBUG_LEX_PASS
     //printf("%s is either a %s token \n",str.c_str(),(is_keyword != -1) ? "keyword" : "identifier");
#endif

#if 0
     printf("%s is a %s token str.length() = %zu \n",str.c_str(),(is_keyword != -1) ? "keyword" : "identifier",str.length());
     if (str.length() == 1)
        {
          printf ("str[0] = %d \n",str[0]);
        }
     if (str.length() == 2)
        {
          printf ("str[0] = %d \n",str[0]);
          printf ("str[1] = %d \n",str[1]);
        }
#endif

  // found a keyword?
     if(is_keyword != -1)
        {
       // printf("%s is a keyword\n", str.c_str());
          p_tok_elem->token_id = is_keyword;
        }
       else
        {
       // printf("%s is not a keyword\n", str.c_str());
          if (tokenId == C_CXX_SYNTAX)
             {
               p_tok_elem->token_id = C_CXX_SYNTAX;
             }
            else
             {
               if (tokenId == C_CXX_WHITESPACE)
                  {
                    p_tok_elem->token_id = C_CXX_WHITESPACE;
                  }
                 else
                  {
                    p_tok_elem->token_id = C_CXX_IDENTIFIER;
                  }
             }
        }

     stream_element *p_se = new stream_element;
     p_se->p_tok_elem = p_tok_elem;

  // Added a pointer to the processed PreprocessingInfo object.
     p_se->p_preprocessingInfo = NULL;

  // DQ (9/29/2013): uncommented so that we can
  // set the source position.
     p_se->beginning_fpi.line_num = preproc_line_num;
     p_se->beginning_fpi.column_num = preproc_column_num;

     int number_of_lines = getNumberOfLines(str);

  // p_se->ending_fpi.line_num = preproc_line_num;
     p_se->ending_fpi.line_num = preproc_line_num + number_of_lines;

     int last_string_length = getColumnNumberOfEndOfString(str);

  // printf ("In add_token(): preproc_column_num = %d last_string_length = %d \n",preproc_column_num,last_string_length);

  // p_se->ending_fpi.column_num = preproc_column_num-1;
  // p_se->ending_fpi.column_num = (preproc_column_num-1) + (last_string_length - 1);
     if (number_of_lines == 0)
        {
          p_se->ending_fpi.column_num = (preproc_column_num-1) + (last_string_length - 1);
       // printf ("In add_token(): ending_fpi.column_num set to (preproc_column_num-1) + (last_string_length - 1) \n");
        }
       else
        {
          p_se->ending_fpi.column_num = (last_string_length - 1);
       // printf ("In add_token(): ending_fpi.column_num set to (last_string_length - 1) \n");
        }

  // When using the std::string we need to subtract 1 for the null terminal.
  // preproc_column_num += strlen(yytext);
  // preproc_column_num += str.length();

  // DQ (12/26/2018): This is reset when we see a windows CR LF pair.
     if (str.length() == 2)
        {
          if (str[0] == '\r' && str[1] == '\n')
             {
#if 0
               printf ("Found a CR LF Windows line ending pair, reset the column number \n");
#endif
               preproc_column_num = 1;
             }
            else
             {
               preproc_column_num += str.length();
             }
        }
       else
        {
          preproc_column_num += str.length();
        }

  // push the element onto the token stream
     ROSE_token_stream_pointer->push_back(p_se);

#if 0
  // DQ (11/29/2018): Investigating form-feeds and windows line endings (and how the token-based unparsing is removing them).
     if (p_tok_elem->token_id == C_CXX_WHITESPACE)
        {
          printf ("p_se->beginning_fpi.line_num   = (%d,%d) \n",p_se->beginning_fpi.line_num,p_se->beginning_fpi.column_num);
          if (p_tok_elem->token_lexeme.length() == 1)
             {
               printf ("Found token of length one \n");
               char character = p_tok_elem->token_lexeme[0];
               printf ("character = %d \n",(int)character);
             }
#if 0
          printf ("Exiting as a test! \n");
          ROSE_ASSERT(false);
#endif
        }
#endif
   }


void add_preprocessingInfo_to_token_stream (PreprocessingInfo* preprocessingInfo, int preproc_line_num, int preproc_column_num, int number_of_lines)
   {
  // This function is overloaded with the one above and refactors the 
  // support to build a token and add it to the list of tokens. It 
  // also increments the preproc_column_num as well.

     token_element *p_tok_elem = new token_element;

  // We don't have to set this since it will be an empty string.
  // unless it is helpful to set the string to that of the 
  // PreprocessingInfo.
     ROSE_ASSERT(preprocessingInfo != NULL);
     p_tok_elem->token_lexeme = preprocessingInfo->getString();

     p_tok_elem->token_id = C_CXX_PREPROCESSING_INFO;

#if DEBUG_LEX_PASS
     printf("This is a PreprocessingInfo object processed as a token: preprocessingInfo = %p \n",preprocessingInfo);
#endif

#if DEBUG_LEX_PASS
     for (size_t i = 0; i < p_tok_elem->token_lexeme.length(); i++)
        {
          printf("   --- p_tok_elem->token_lexeme[i] = %c = (ascii value) %d \n",p_tok_elem->token_lexeme[i],p_tok_elem->token_lexeme[i]);
       // if (p_tok_elem->token_lexeme[i+1] == '\r')
          if (p_tok_elem->token_lexeme[i+1] != '\0')
             {
               printf("   --- --- p_tok_elem->token_lexeme[i+1] = %c = (ascii value) %d \n",p_tok_elem->token_lexeme[i+1],p_tok_elem->token_lexeme[i+1]);
             }
        }
#endif

     stream_element *p_se = new stream_element;
     p_se->p_tok_elem = p_tok_elem;

  // Added a pointer to the processed PreprocessingInfo object.
     p_se->p_preprocessingInfo = preprocessingInfo;

  // DQ (9/29/2013): uncommented so that we can
  // set the source position.
     p_se->beginning_fpi.line_num   = preproc_line_num;
     p_se->beginning_fpi.column_num = preproc_column_num;

  // preproc_column_num += p_tok_elem->token_lexeme.length();

  // Adjust the increment in the current line number based on the size of the macro.
  // Note: we don't want to modify the value of preproc_line_num, since that will have 
  // been taken care of in the processing of the CPP directive or C/C++ comment.
  // int numberOfLines = preprocessingInfo->getNumberOfLines();
  // ROSE_ASSERT(numberOfLines >= 1);
#if 0
     printf ("In add_token(PreprocessingInfo*,int,int&): line column number correctly?: numberOfLines = %d \n",numberOfLines);
#endif
  // p_se->ending_fpi.line_num   = preproc_line_num + (numberOfLines - 1);

#if 0
     printf ("In add_token(PreprocessingInfo*,int,int&): line column number correctly?: number_of_lines = %d \n",number_of_lines);
#endif
     p_se->ending_fpi.line_num = preproc_line_num + number_of_lines;

  // preproc_column_num = preprocessingInfo->getColumnNumberOfEndOfString();

     int last_string_length = getColumnNumberOfEndOfString(p_tok_elem->token_lexeme);

  // printf ("In add_preprocessingInfo_to_token_stream(): preproc_column_num = %d last_string_length = %d \n",preproc_column_num,last_string_length);

  // p_se->ending_fpi.column_num = preproc_column_num-1;
  // p_se->ending_fpi.column_num = last_string_length - 1;

     if (number_of_lines == 0)
        {
          p_se->ending_fpi.column_num = (preproc_column_num-1) + (last_string_length - 1);
       // printf ("In add_preprocessingInfo_to_token_stream(): ending_fpi.column_num set to (preproc_column_num-1) + (last_string_length - 1) \n");
        }
       else
        {
          p_se->ending_fpi.column_num = (last_string_length - 1);
       // printf ("In add_preprocessingInfo_to_token_stream(): ending_fpi.column_num set to (last_string_length - 1) \n");
        }

  // push the element onto the token stream
     ROSE_token_stream_pointer->push_back(p_se);
   }


//#endif



#include "sage3.h"

// DQ (11/17/2004): Avoid compiler warning about unused function
#define YY_NO_UNPUT

#ifdef BOOL_IS_BROKEN
// If BOOL_IS_BROKEN then we can assume that there is no definition for "true" and "false"
#ifndef false
#define false 0
#endif
#ifndef true
#define true  1
#endif
#ifndef bool
typedef int bool;
#endif
#endif

#ifndef ROSE_ASSERT
#define ROSE_ASSERT assert
#endif

#include "rose_attributes_list.h"
#define yytext Rose_C_Cxx_text
#define yylex  Rose_C_Cxx_lex

#define HANDLEMACROSTART preproc_start_line_num=preproc_line_num; preproc_start_column_num=1; preproc_column_num+=strlen(yytext); macroString = yytext; BEGIN MACRO;

int i = 0;

std::string commentString;
std::string macroString;
//remove these _st's later
std::stack<int> curly_brace_stack_st;
std::stack<int> parenthesis_stack;
std::stack<int> square_bracket;

//All the above should be "matching constructs"
//create new for various casts and templates


// DQ (4/19/2006):
// Store the name of the current file so that we can generate Sg_File_Info objects
// for each comment.  Later we might want starting and ending fileInfo for each 
// comments and CPP directive.
std::string globalFileName;

int curr_brace_depth=0;
int ls_startingline_no; 
int ls_startingpreproc_column_num; 
int brace_counting_on=0;
PreprocessingInfo::DirectiveType macrotype = PreprocessingInfo::CpreprocessorUnknownDeclaration;

int topcurlybracestack();
void pushbracestack(int);
int popbracestack();
bool isemptystack();

int num_of_newlines(char*);

ROSEAttributesList preprocessorList;


//add stuff for char literals???????????

/*
whitespacenl            [\t\n ]+
whitespace              [\t ]+
lineprefix              ^{whitespace}*"#"{whitespace}*
macrokeyword            "include"|"define"|"undef"|"line"|"error"|"warning"|"if"|"ifdef"|"ifndef"|"elif"|"else"|"endif"
mlinkagespecification   ^{whitespace}*"extern"{whitespace}*(("\"C\"")|("\"C++\"")){whitespacenl}*"{"
*/

//refresher: blank and space function exactly as the STDLIB functions isblank and isspace respectively.
//blank matches only the various blank characters (\b,\t). It does NOT match new line. (and its variants).
//space matches blanks, newlines (various flavours like formfeed etc) as well as other stuff like vertical tab '\v' etc.
//refer to http://www.gatago.com/comp/std/c/18426853.html among others for difference between these two.
/*
The following was the original 
whitespacenl            [\t\n ]+
whitespace              [\t ]+

I changed it to
whitespacenl            [:space:]+
whitespace              [:blank:]+
This does not work.

What worked was the following:
whitespacenl            [[:space:]]+
whitespace              [[:blank:]]+

*/

/*
I am not sure if the whitespacenl would count the number of newlines in code that has backslashes properly.
*/




#define INITIAL 0
#define NORMAL 1
#define CXX_COMMENT 2
#define C_COMMENT 3
#define STRING_LIT 4
#define CHAR_LIT 5
#define MACRO 6
#define C_COMMENT_INMACRO 7
#define STRING_LIT_IN_MACRO 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{





int preproc_line_num = 1;
        /*bad way to initialize*/
int preproc_start_line_num = preproc_line_num;
int preproc_column_num = 1;
int preproc_start_column_num = preproc_column_num;
                        /*Do we need this  ???*/
BEGIN NORMAL;




	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 207 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 293 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP

{ 
#if DEBUG_LEX_PASS
     printf("%s is a form-feed token (length = %" PRIuPTR ") \n",yytext,strlen(yytext));
#endif
  // DQ (11/29/2018): Adding form feed support to ROSE.
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_WHITESPACE);
   }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP

{ 
#if DEBUG_LEX_PASS
     printf("%s is a windows line ending token (length = %" PRIuPTR ") \n",yytext,strlen(yytext));
#endif
  // DQ (11/29/2018): Adding windows line ending support to ROSE.
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_WHITESPACE);

  // DQ (12/26/2018): Adding windows line ending support to ROSE (increment the line count).
     preproc_line_num  += 1;

  // DQ (12/26/2018): This is reset in the add_token() function.
  // preproc_column_num = 1;
   }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP

{ 
#if DEBUG_LEX_PASS
     printf("%s is a mlinkagespecification token \n",yytext);
#endif
     preprocessorList.addElement(PreprocessingInfo::ClinkageSpecificationStart,yytext,globalFileName,preproc_line_num,preproc_column_num,0); 
     preproc_line_num+=num_of_newlines(yytext); 

     add_token(yytext,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(yytext); 

     curr_brace_depth++; 
     pushbracestack(curr_brace_depth);
   }
	YY_BREAK
/*Handle the braces (left and right). Push and Pop the bracestack accordingly*/
case 4:
YY_RULE_SETUP

{ 
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n",yytext);
#endif
     if (!isemptystack()) 
        { 
       /* we only count braces within a linkage specification. */ 
          curr_brace_depth++; 
        } 
  // printf("Ram: found left brace at preproc_line_num = %d, preproc_column_num = %d\n", preproc_line_num, preproc_column_num);

     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 5:
YY_RULE_SETUP

{ 
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n",yytext);
#endif

     bool added_link_specification_as_token = false;
     if (!isemptystack()) 
        { 
          if (curr_brace_depth==topcurlybracestack()) 
             { 
               popbracestack();

            // The semantics of ROSEAttributesList::addElement() is to use std::vector::push_back();
               preprocessorList.addElement(PreprocessingInfo::ClinkageSpecificationEnd, yytext, globalFileName, preproc_line_num, preproc_column_num, 0); 

               added_link_specification_as_token = true;

            // This token should maybe be special since it marks the end of a link specification (later).
               add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_line_num,preproc_column_num,0);
             }

          curr_brace_depth--; 
        } 
  // printf("Ram: found right brace at preproc_line_num = %d, preproc_column_num = %d\n", preproc_line_num, preproc_column_num);

     if (added_link_specification_as_token == false)
        {
          add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
        }
  // preproc_column_num++; 
   }
	YY_BREAK
case 6:
YY_RULE_SETUP

{ 
                    /*if(!isemptystack()) 
                    { 
                        //we only count braces within a linkage specification. 
                        curr_brace_depth++; 
                    }
                    */
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 7:
YY_RULE_SETUP

{ 
                    /*
                    if(!isemptystack()) 
                    { 
                        if(curr_brace_depth==topcurlybracestack()) 
                        { 
                            popbracestack(); 
                            preprocessorList.addElement(PreprocessingInfo::ClinkageSpecificationEnd, 
                                                            yytext, globalFileName, preproc_line_num, preproc_column_num, 0); 
                        }
                        curr_brace_depth--; 
                    } 
                    */
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
/* DQ (9/29/2013): Added additional syntax to token handling */
case 8:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 9:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 10:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 11:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 12:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 13:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 14:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 15:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 16:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 17:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 18:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 19:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num++; 
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 20:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num++; 
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 21:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num += 2;
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 22:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num += 2;
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 23:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num += 2;
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 24:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num += 2;
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 25:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num += 2;
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 26:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num += 2;
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 27:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
  // preproc_column_num += 2;
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 28:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 29:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 30:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 31:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 32:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 33:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a syntax token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
  // preproc_column_num++; 
   }
	YY_BREAK
case 34:
YY_RULE_SETUP

{
  // MS (7/14/2020): C++14 support for "'" in numbers, also added binary/hex prefix (octal is implicit)
  // DQ (9/29/2013): This does not accound for 0L to be a single literal
#if DEBUG_LEX_PASS
     printf("%s is a numeric literal token \n", yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,0);
  // preproc_column_num += strlen(yytext);
   }
	YY_BREAK
case 35:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a whitespace token (length = %" PRIuPTR ") \n",yytext,strlen(yytext));
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 36:
YY_RULE_SETUP

{
#if DEBUG_LEX_PASS
     printf("%s is a whitespace token (length = %" PRIuPTR ") \n",yytext,strlen(yytext));
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_SYNTAX);
   }
	YY_BREAK
case 37:
YY_RULE_SETUP

{ 
#if DEBUG_LEX_PASS
     printf("%s is a whitespace token (length = %" PRIuPTR ") \n",yytext,strlen(yytext));
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_WHITESPACE);
   }
	YY_BREAK
case 38:
YY_RULE_SETUP

{
#if 1
#if DEBUG_LEX_PASS
    printf("%s matched identifier regex \n",yytext);
#endif
     add_token(yytext,preproc_line_num,preproc_column_num,0);
#else
     token_element *p_tok_elem = new token_element;
     p_tok_elem->token_lexeme = yytext;

     int is_keyword = identify_if_C_CXX_keyword(yytext);

#if DEBUG_LEX_PASS
     printf("%s is either a %s token \n",yytext,(is_keyword != -1) ? "keyword" : "identifier");
#endif

  // found a keyword?
     if(is_keyword != -1)
        {   
       // printf("%s is a keyword\n", yytext); 
          p_tok_elem->token_id = is_keyword;
        }
       else
        {   
       // printf("%s is not a keyword\n", yytext); 
          p_tok_elem->token_id = C_CXX_IDENTIFIER;
        }

     stream_element *p_se = new stream_element;
     p_se->p_tok_elem = p_tok_elem;

  // DQ (9/29/2013): uncommented so that we can
  // set the source position.
  // p_se->beginning_fpi.line_num = preproc_column_num;
     p_se->beginning_fpi.line_num = preproc_line_num;
     p_se->beginning_fpi.column_num = preproc_column_num;
     preproc_column_num += strlen(yytext);
     p_se->ending_fpi.line_num = preproc_line_num;
     p_se->ending_fpi.column_num = preproc_column_num-1;

  // push the element onto the token stream
     ROSE_token_stream_pointer->push_back(p_se);
#endif
   }
	YY_BREAK
/*begin handling the C++ style comments. */
case 39:
YY_RULE_SETUP

{
                    /*Handle the C comments.*/ 
                    preproc_start_line_num=preproc_line_num; 
                    preproc_start_column_num=preproc_column_num; 
                    preproc_column_num+=2; 
                    commentString = yytext; 
                    BEGIN CXX_COMMENT;
                }
	YY_BREAK
/*The normal mode actions. Handle the preprocessor stuff and any other characters. */
/*Do we need the backslash character?????????????*/
case 40:
YY_RULE_SETUP

{
                    preproc_start_line_num=preproc_line_num; 
                    preproc_start_column_num=preproc_column_num; 
                    preproc_column_num+=strlen(yytext);
                    
                    //copy the comment to commentString 
                    commentString = yytext; 
                    BEGIN C_COMMENT; 
                }
	YY_BREAK
/* These are the alternative tokens. Refer to page 12 of C++ std to understand their representation */
/*<NORMAL>"<%"     {curr_token = ALT_LEFT_CURLY; do_yytext_bookeeping(); }
<NORMAL>"<%"     { }
      */
/* DQ (9/29/2013): I think this should not be here, it can't be matched given that we handle identifiers above. */
/*
<NORMAL>"static_cast"   { 
#if DEBUG_LEX_PASS
                    printf("%s is a static_cast token \n",yytext);
#endif
                    preproc_column_num++; 
                }
    */
case 41:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorIncludeDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 42:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorDefineDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 43:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorUndefDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 44:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorLineDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 45:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorErrorDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 46:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorIfDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 47:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorIfdefDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 48:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorIfndefDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 49:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorElifDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 50:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorElseDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 51:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorEndifDeclaration; HANDLEMACROSTART }
	YY_BREAK
case 52:
YY_RULE_SETUP

{ macrotype=PreprocessingInfo::CpreprocessorWarningDeclaration; HANDLEMACROSTART }
	YY_BREAK
/* DQ (9/30/2013): Added support to recognize #pragma as a token */
case 53:
YY_RULE_SETUP

{
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_PRAGMA);
   }
	YY_BREAK
/*Add code here to attach the whitespace before newlines (and general lineprefix code) */
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP

{
     add_token(yytext,preproc_line_num,preproc_column_num,C_CXX_WHITESPACE);
     preproc_line_num++;
     preproc_column_num = 1; 
   } 
	YY_BREAK
case 55:
YY_RULE_SETUP

{
  /* preproc_line_num+=num_of_newlines(yytext); */ 
     add_token(yytext,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(yytext); 
     BEGIN STRING_LIT;
   }
	YY_BREAK
case 56:
YY_RULE_SETUP

{
   /*preproc_line_num+=num_of_newlines(yytext);*/ 
#if DEBUG_LEX_PASS
    printf("char literal BEGIN.");    
#endif
    add_token(yytext,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(yytext); 
     BEGIN CHAR_LIT;
   }
	YY_BREAK
case 57:
YY_RULE_SETUP

{ preproc_column_num++; }
	YY_BREAK
/* Actions for character literals. Since the part between single quote can be more than one
                         * character of input (e.g., '\\', '\'', '\n', '\012', etc) we parse them sort of like strings. */
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP

{/*eat escaped DOS line-term*/  preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP

{/*eat escaped linefeed*/       preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 60:
YY_RULE_SETUP

{/*eat escaped something*/      add_token(yytext,preproc_line_num,preproc_column_num,0); /*preproc_column_num+=strlen(yytext);*/ }
	YY_BREAK
case 61:
YY_RULE_SETUP

{/*eat non-special characters*/ add_token(yytext,preproc_line_num,preproc_column_num,0); /*preproc_column_num+=strlen(yytext);*/ }
	YY_BREAK
case 62:
/* rule 62 can match eol */
YY_RULE_SETUP

{/*eat DOS line-term*/          preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP

{/*eat linefeed*/               preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 64:
YY_RULE_SETUP

{
   /*end of character literal*/   
     add_token(yytext,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(yytext); 
#if DEBUG_LEX_PASS
    printf("char literal END.");    
#endif
     BEGIN NORMAL;
   }
	YY_BREAK
/* Actions for string literals. */
case 65:
/* rule 65 can match eol */
YY_RULE_SETUP

{/*eat escaped DOS line-term*/  add_token(yytext,preproc_line_num,preproc_column_num,0); preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 66:
/* rule 66 can match eol */
YY_RULE_SETUP

{/*eat escaped linefeed*/       add_token(yytext,preproc_line_num,preproc_column_num,0); preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 67:
YY_RULE_SETUP

{/*eat escaped something*/      add_token(yytext,preproc_line_num,preproc_column_num,0); /*preproc_column_num+=strlen(yytext);*/ }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP

{/*eat DOS line-term*/          add_token(yytext,preproc_line_num,preproc_column_num,0); preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 69:
YY_RULE_SETUP

{/*eat non-special characters*/ add_token(yytext,preproc_line_num,preproc_column_num,0); /*preproc_column_num+=strlen(yytext)*/; }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP

{/*eat linefeed*/               add_token(yytext,preproc_line_num,preproc_column_num,0); preproc_line_num++; preproc_column_num=1; }
	YY_BREAK
case 71:
YY_RULE_SETUP

{
   /* end of string literal */
     add_token(yytext,preproc_line_num,preproc_column_num,0);
  // preproc_column_num+=strlen(yytext); 
     BEGIN NORMAL; 
   }
	YY_BREAK
/*Actions for a C++ style comment.*/
case 72:
YY_RULE_SETUP

{ /* eat anything that is not a backslash or a newline*/ commentString += yytext;}
	YY_BREAK
case 73:
YY_RULE_SETUP

{ 
                            /*eat up backslashes not immdediately followed by newlines*/ 
                            commentString += yytext;
                            /*fix the preproc_column_num at other places ????????????????????  ??????????????*/ 
                            preproc_column_num=1; 
                        }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP

{ 
                            /*if backslash is followed by a newline, then eat them (backslash, newline) up, increment preproc_line_num and continue*/ 
                            commentString += yytext;
                            preproc_line_num++; 
}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP

{
                            preproc_line_num++; preproc_column_num=1; 
                            commentString += yytext;
                            preprocessorList.addElement(PreprocessingInfo::CplusplusStyleComment, 
                                    commentString,globalFileName, preproc_start_line_num, preproc_start_column_num,preproc_line_num-preproc_start_line_num); 

                         // This element of the token stream is special since it is from a PreprocessorInfo object.
                            add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);

                            BEGIN NORMAL; 
                        }
	YY_BREAK
/* negara1 (07/25/2011): Added handling of CXX comments that appear at the last line of a file. */
case YY_STATE_EOF(CXX_COMMENT):

{
                            preprocessorList.addElement(PreprocessingInfo::CplusplusStyleComment, 
                                    commentString,globalFileName, preproc_start_line_num, preproc_start_column_num,preproc_line_num-preproc_start_line_num); 

                         // This element of the token stream is special since it is from a PreprocessorInfo object.
                            add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);

                            yyterminate();
                        }
	YY_BREAK
/*Actions while in a C style comment.*/
case 76:
/* rule 76 can match eol */
YY_RULE_SETUP

{
                            commentString += yytext;
                            preproc_line_num++; 
                            preproc_column_num=1; 
                        }
	YY_BREAK
case 77:
YY_RULE_SETUP

{
                            commentString += yytext;
                            preproc_column_num+=strlen(yytext); 
                         /* printf("hello Ram: The comment string is ####%s#############. It is of %d lines, the current line number is %d\n",commentString.c_str(), preproc_line_num-preproc_start_line_num+1, preproc_line_num);
                          */
                         // DQ (10/1/2013): This is a bug fix the number of lines should be computed using 
                         // "preproc_line_num-preproc_start_line_num" not "preproc_line_num-preproc_start_line_num+1"
                         // preprocessorList.addElement(PreprocessingInfo::C_StyleComment,commentString,globalFileName,preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num+1); 
                            preprocessorList.addElement(PreprocessingInfo::C_StyleComment,commentString,globalFileName,preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num); 

                         // This element of the token stream is special since it is from a PreprocessorInfo object.
                            add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);

                            BEGIN(NORMAL); 

                        }
	YY_BREAK
case 78:
YY_RULE_SETUP

{ 
                    commentString += yytext;
                    preproc_column_num++; 
                }
	YY_BREAK
/*Actions while in a MACRO.*/
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP

{   // Escaped DOS line termination
#if DEBUG_LEX_PASS
                    printf("%s is an escaped  windows line ending token in a CPP directive (length = %" PRIuPTR ") \n",yytext,strlen(yytext));
#endif
                    macroString += yytext;
                    ++preproc_line_num;
                    preproc_column_num = 1;
                }
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP

{   // Escape line termination
                    macroString += yytext;
                    ++preproc_line_num;
                    preproc_column_num = 1;
                }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP

{   // End of macro

                 // DQ (12/30/2018): This is where windows line endings are normalized, and we need to supress this.
                 // macroString = Rose::StringUtility::fixLineTermination(macroString + yytext);
                    macroString = macroString + yytext;

                    preproc_line_num++; 
                    preproc_column_num=1; 
                    preprocessorList.addElement(macrotype, macroString, globalFileName,
                                                preproc_start_line_num, preproc_start_column_num,
                                                preproc_line_num-preproc_start_line_num);

                 // This element of the token stream is special since it is from a PreprocessorInfo object.
                    add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);
                    BEGIN NORMAL; 
                }
	YY_BREAK
case YY_STATE_EOF(MACRO):

{   // End of macro

                 // DQ (12/30/2018): This is where windows line endings are normalized, and we need to supress this.
                 // macroString = Rose::StringUtility::fixLineTermination(macroString + yytext);
                    macroString = macroString + yytext;

                    preprocessorList.addElement(macrotype, macroString, globalFileName,
                                                preproc_start_line_num, preproc_start_column_num,
                                                preproc_line_num-preproc_start_line_num);

                 // This element of the token stream is special since it is from a PreprocessorInfo object.
                    add_preprocessingInfo_to_token_stream(preprocessorList.lastElement(),preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num);

                    yyterminate();
                }
	YY_BREAK
case 82:
YY_RULE_SETUP

{
                    preproc_column_num+=2; 
                    macroString += yytext;
                    BEGIN STRING_LIT_IN_MACRO;
                }
	YY_BREAK
case 83:
YY_RULE_SETUP

{
                    preproc_column_num+=2; 
                    macroString += yytext;
                    BEGIN C_COMMENT_INMACRO;
                }
	YY_BREAK
case 84:
YY_RULE_SETUP

{   // Add character to macro string; we'll fix up line termination issues at the end of the <MACRO> state.
                    macroString += yytext;
                    preproc_column_num++; 
                }
	YY_BREAK
/* MS 08/31/2020: added special case of string literal inside macro; note GNU allows single double quotes in macros, but EDG rejects it */
/* Actions for string literals. */
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP

{/*eat escaped DOS line-term*/  preproc_line_num++; preproc_column_num=1; macroString += yytext;}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP

{/*eat escaped linefeed*/       preproc_line_num++; preproc_column_num=1; macroString += yytext;}
	YY_BREAK
case 87:
YY_RULE_SETUP

{/*eat escaped something*/       /*preproc_column_num+=strlen(yytext);*/macroString += yytext; }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP

{/*eat DOS line-term*/          preproc_line_num++; preproc_column_num=1; macroString += yytext;}
	YY_BREAK
case 89:
YY_RULE_SETUP

{/*eat non-special characters*/ preproc_column_num+=strlen(yytext);macroString += yytext; }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP

{/*eat linefeed*/               preproc_line_num++; preproc_column_num=1; macroString += yytext;}
	YY_BREAK
case 91:
YY_RULE_SETUP

{
   /* end of string literal */
     macroString += yytext;
     preproc_column_num+=strlen(yytext); 
   /* go back into macro state */
     BEGIN MACRO; 
   }
	YY_BREAK
case 92:
YY_RULE_SETUP

{ 
                                //This code copies the comment only into the macrobuffer, but not into comment buffer
                                macroString += yytext;

                                /*
                                commentString += yytext;
                                //to add the comment as separate element use this:
                                preprocessorList.addElement(PreprocessingInfo::C_StyleComment,commentString.c_str(),globalFileName,preproc_start_line_num,preproc_start_column_num,preproc_line_num-preproc_start_line_num); 
                                */
                                preproc_column_num+=strlen(yytext); 
                                BEGIN MACRO; 
                            }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP

{ 
                                macroString += yytext;
                                preproc_line_num++; preproc_column_num=1; 
                            }
	YY_BREAK
case 94:
YY_RULE_SETUP

{ 
                                macroString += yytext;
                                preproc_column_num++; 
                            }
	YY_BREAK
case 95:
YY_RULE_SETUP

ECHO;
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NORMAL):
case YY_STATE_EOF(C_COMMENT):
case YY_STATE_EOF(STRING_LIT):
case YY_STATE_EOF(CHAR_LIT):
case YY_STATE_EOF(C_COMMENT_INMACRO):
case YY_STATE_EOF(STRING_LIT_IN_MACRO):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 207 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 207 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 206);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"




const int maxstacksize=500;
int bracestack[maxstacksize];

int top=0;
void pushbracestack(int brace_no) { bracestack[top++]=brace_no; }
int topcurlybracestack() { if(top) return bracestack[top-1]; else return -1; }
int popbracestack() { return bracestack[--top]; }
bool isemptystack() { return top==0; }

int num_of_newlines(char* s)
   {
     int num = 0;
     while(*s != '\0')
        {
          if(*s == '\n')
               num++;
          s++;
        }
     return num;
   }


// DQ (1/4/2021): Adding support for comments and CPP directives and tokens to use new_filename.
// DQ (3/30/2006): Modified to use C++ style string instead of C style char* string
// ROSEAttributesList *getPreprocessorDirectives( char *fileName)
//! This function extracts the comments and CPP preprocessor control directives from the input file.
// ROSEAttributesList *getPreprocessorDirectives( std::string fileName )
// ROSEAttributesList *getPreprocessorDirectives( std::string fileName, LexTokenStreamTypePointer & input_token_stream_pointer )
// ROSEAttributesList *getPreprocessorDirectives( std::string fileName )
ROSEAttributesList *getPreprocessorDirectives( std::string fileName, std::string new_filename )
   {
  // DQ (11/9/2020): Introduce tracking of performance of ROSE.
     TimingPerformance timer ("AST collect comments and CPP directives():");

     FILE *fp = NULL;
     ROSEAttributesList *preprocessorInfoList = new ROSEAttributesList; // create a new list
     ROSE_ASSERT (preprocessorInfoList != NULL);

#if 0
  // DQ (8/18/2019): Debugging the performance overhead of the header file unparsing support.
     printf ("&&&&&&&&&&&&&&&&&&& Inside of lex file: getPreprocessorDirectives(): fileName = %s new_filename = %s \n",fileName.c_str(),new_filename.c_str());
#endif

#if 0
     printf ("Saving list of processed files to insure that files are not processed more than once! \n");
#endif
#if 0
     static std::set<std::string> file_set;
     if (file_set.find(fileName) == file_set.end())
        {
          file_set.insert(fileName);
        }
       else
        {
       // DQ (5/22/2020): We need to allow this in the narrow case of a source file that is being copied.
          printf ("WARNING: fileName has been processed previously (allowed for source files being copied): %s \n",fileName.c_str());
       // ROSE_ASSERT(false);
        }
#endif

#if 0
  // DQ (8/18/2019): Trying to find where this is called in the processing of the header files.
     static int counter = 0;
     if (counter > 10)
        {
          printf ("Exiting as a test while processing the 10th file \n");
          ROSE_ASSERT(false);
        }
     counter++;
#endif

  // printf ("Inside of lex file: getPreprocessorDirectives() \n");
  // ROSE_ASSERT(false);

  // assert(input_token_stream_pointer == NULL);
     ROSE_token_stream_pointer = new LexTokenStreamType;
     assert(ROSE_token_stream_pointer != NULL);

  // Share a pointer to the same LexTokenStreamType just allocated
  // input_token_stream_pointer = ROSE_token_stream_pointer;
  // assert(input_token_stream_pointer != NULL);

  // Attach the token stream to the ROSEAttributesList being returned.
     preprocessorInfoList->set_rawTokenStream(ROSE_token_stream_pointer);

  // Set the global filename to be used in the PreprocessingInfo constructor.
  // globalFileName = fileName;
     if (new_filename != "")
        {
          globalFileName = new_filename;
#if 0
          printf ("Using non-physical new_filename: globalFileName = %s \n",globalFileName.c_str());
#endif
        }
       else
        {
          globalFileName = fileName;
#if 0
          printf ("Using physical filename: globalFileName = %s \n",globalFileName.c_str());
#endif
        }


     if ( fileName.empty() == false )
        {
          std::map<std::string,ROSEAttributesList* >::iterator iItr = mapFilenameToAttributes.find(fileName);
       // std::cout << "Trying to find fileName " << fileName << std::endl;
          if ( iItr != mapFilenameToAttributes.end())
             {
            // std::cout << "Found requested file: " << fileName << " size: " << iItr->second->size() << std::endl; 
               for(std::vector<PreprocessingInfo*>::iterator jItr = iItr->second->getList().begin(); jItr != iItr->second->getList().end(); ++jItr)
                  {
                  // std::cout << "Inserting element" <<  (*jItr)->getString() << std::endl;
                     preprocessorInfoList->insertElement(**jItr);
                  }

             }
            else
             {
               fp = fopen( fileName.c_str(), "r");
               if (fp)
                  {
                    yyin = fp;
#if DEBUG_LEX_PASS
                    printf ("In getPreprocessorDirectives(): calling yylex() \n");
#endif
                    yylex();
#if DEBUG_LEX_PASS
                    printf ("In getPreprocessorDirectives(): DONE: calling yylex() \n");
#endif

#if 0
                 // DQ (8/17/2020): Debugging code.
                 // Writes all gathered information to stdout
                    preprocessorList.display("TEST Collection of Comments and CPP Directives");
#endif
                 // bugfix (9/29/2001)
                 // The semantics required here is to move the elements accumulated into the
                 // preprocessorList into the preprocessorInfoList and delete them from the
                 // preprocessorList (which will be used again to accumulate PreprocessingInfo objects
                 // when the next file is processed).  We have to be able to process several files using
                 // this getPreprocessorDirectives() function.
                    preprocessorInfoList->moveElements( preprocessorList ); // create a copy that we can pass on

                 // The accumulator list should now be empty
                    assert (preprocessorList.getLength() == 0);
                    fclose(fp);  
                  }
                 else
                  {
                 // DQ (5/14/2006): Added error checking for collection of comments and CPP directives.
                    printf ("Error: can't find the requested file (%s) \n",fileName.c_str());

                 // DQ (11/8/2019): Uncomment so that we can identify calling location where this is called with a filename that does not exist (see buildFile()).
                 // ROSE_ASSERT(false);
                    ROSE_ASSERT(false);
                  }
             }
        }

  // DQ (1/4/2021): We need to use the globalFileName and the logic which sets it above.
  // preprocessorInfoList->setFileName(fileName);
     preprocessorInfoList->setFileName(globalFileName);

  // DQ (11/3/2019): Make sure that the filename is filled in.
     ROSE_ASSERT(preprocessorInfoList->getFileName() != "");

#if DEBUG_LEX_PASS || 0
     printf ("Leaving getPreprocessorDirectives(fileName = %s): preprocessorInfoList->size() = %d \n",fileName.c_str(),(int)preprocessorInfoList->size());
     printf (" --- preprocessorInfoList->getFileName() = %s \n",preprocessorInfoList->getFileName().c_str());
     printf (" --- preprocessorInfoList->getList().size() = %zu \n",preprocessorInfoList->getList().size());
#endif

  // DQ (9/29/2013): Added assertion (debugging token handling in ROSE).
     ROSE_ASSERT(preprocessorInfoList->get_rawTokenStream() != NULL);

#if DEBUG_LEX_PASS || 0
     printf ("Leaving getPreprocessorDirectives(): preprocessorInfoList->get_rawTokenStream() = %p \n",preprocessorInfoList->get_rawTokenStream());
     printf ("Leaving getPreprocessorDirectives(): preprocessorInfoList->get_rawTokenStream()->size() = %" PRIuPTR " \n",preprocessorInfoList->get_rawTokenStream()->size());
#endif

#if 0
     if (preprocessorInfoList->getFileName() == "/home/quinlan1/ROSE/git_rose_development/tests/nonsmoke/functional/CompileTests/UnparseHeadersUsingTokenStream_tests/test0/Simple.h")
        {
          printf ("Found specific file: tests/nonsmoke/functional/CompileTests/UnparseHeadersUsingTokenStream_tests/test0/Simple.h \n");
          ROSE_ASSERT(false);
        }
#endif

#if 0
     printf ("Exiting in getPreprocessorDirectives() \n");
     ROSE_ASSERT(false);
#endif

     return preprocessorInfoList;
   }

