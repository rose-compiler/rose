namespace
{

struct MethodHeader : std::tuple<std::uint16_t, std::uint16_t, std::uint32_t, std::uint32_t>
{
  static constexpr std::uint8_t TINY           = 0x2;
  static constexpr std::uint8_t FAT            = 0x3;
  static constexpr std::uint8_t FORMAT         = TINY | FAT;
  static constexpr std::uint8_t MORE_SECTS     = 0x8;
  static constexpr std::uint8_t INIT_LOCALS    = 0x10;
  static constexpr std::uint8_t FLAGS          = MORE_SECTS | INIT_LOCALS;
  static constexpr std::uint8_t FAT_HEADER_LEN = 12;

  using base = std::tuple<std::uint16_t, std::uint16_t, std::uint32_t, std::uint32_t>;
  using base::base;

  // accessors
  std::uint16_t flags() const          { return std::get<0>(*this); }
  bool          tiny()  const          { return (flags() & FORMAT) != FAT; }
  bool          moreSections()  const  { return (flags() & FLAGS) == MORE_SECTS; }
  bool          initLocals()  const    { return (flags() & FLAGS) == INIT_LOCALS; }
  std::uint8_t  headerSize() const     { return tiny() ? 1 : FAT_HEADER_LEN; }

  std::uint16_t maxStackSize() const   { return std::get<1>(*this); }
  std::uint32_t codeSize() const       { return std::get<2>(*this); }
  std::uint32_t localVarSigTok() const { return std::get<3>(*this); }

  // mutators
  void flags(bool hasMoreSects, bool initsLocals)
  { 
    std::uint16_t val = hasMoreSects || initsLocals ? FAT : TINY;
    
    if (hasMoreSects) val |= MORE_SECTS; 
    if (initsLocals)  val |= INIT_LOCALS;     
 
    std::get<0>(*this) = val;
  }
   
  void useFatHeaderIf(bool requiresFatHeader)
  {
    if (requiresFatHeader && tiny())
      std::get<0>(*this) |= FAT;  
  }
  
  void maxStackSize(std::uint16_t len)   
  { 
    useFatHeaderIf(len != 8);
    std::get<1>(*this) = len; 
  }
  
  void codeSize(std::uint32_t len)       
  { 
    useFatHeaderIf(len >= (1 << 6));
    std::get<2>(*this) = len; 
  }
  
  void localVarSigTok(std::uint32_t sig) 
  { 
    useFatHeaderIf(sig != 0);
    std::get<3>(*this) = sig; 
  }
};

MethodHeader
parseFatHeader(Rose::BinaryAnalysis::Address base_va, std::uint32_t rva, SgAsmPEFileHeader* fhdr)
{
  std::uint8_t         buf[12];
  const std::size_t    nread = fhdr->get_loaderMap()->readQuick(&buf, base_va + rva, sizeof(buf));
  ROSE_ASSERT(nread == 12);

  const std::uint16_t  flags    = Rose::BinaryAnalysis::ByteOrder::leToHost(*reinterpret_cast<uint16_t*>(buf+0));
  const std::uint16_t  maxStack = Rose::BinaryAnalysis::ByteOrder::leToHost(*reinterpret_cast<uint16_t*>(buf+2));
  const std::uint16_t  codeSize = Rose::BinaryAnalysis::ByteOrder::leToHost(*reinterpret_cast<uint32_t*>(buf+4));
  const std::uint16_t  localIni = Rose::BinaryAnalysis::ByteOrder::leToHost(*reinterpret_cast<uint32_t*>(buf+8));
  const MethodHeader   res{ flags, maxStack, codeSize, localIni };

  ROSE_ASSERT(!res.tiny());
  ROSE_ASSERT(res.headerSize() == MethodHeader::FAT_HEADER_LEN);
  return res;
}


MethodHeader
parseTinyHeader(std::uint8_t header)
{
  return { header & MethodHeader::FORMAT, 8, header >> 2, 0 };
}


SgAsmBlock*
disassemble(Rose::BinaryAnalysis::Address base_va, SgAsmCilMethodDef* m, MethodHeader mh,
            std::vector<std::uint8_t>& buf, const Rose::BinaryAnalysis::Disassembler::Base::Ptr& disasm)
{
  Rose::BinaryAnalysis::Address addr = 0;
  const std::size_t  sz = buf.size();
  std::vector<SgAsmInstruction*> lst;

  using Rose::BinaryAnalysis::MemoryMap;

  MemoryMap::Ptr map = MemoryMap::instance();
  map->insert(Rose::BinaryAnalysis::AddressInterval::baseSize(base_va, sz),
              MemoryMap::Segment::staticInstance(buf.data(), sz,
                                                 MemoryMap::READABLE|MemoryMap::EXECUTABLE, "CIL code segment"));

  while (addr < sz) {
    SgAsmInstruction* instr = disasm->disassembleOne(map, base_va + addr);
    ASSERT_not_null(instr);

    lst.push_back(instr);
    addr += instr->get_size();

    if (disasm->architecture()->isUnknown(instr)) {
      // Pad block with noops because something went wrong
      // TODO: don't pad with noops, pad by expanding current unknown instruction
      SgUnsignedCharList rawBytes(1,'\0');
      while (addr < sz) {
        SgAsmCilInstruction* insn = new SgAsmCilInstruction(base_va+addr, disasm->architecture()->name(), "nop",
                                            Rose::BinaryAnalysis::CilInstructionKind::Cil_nop);
        insn->set_rawBytes(rawBytes);
        ASSERT_require(insn->get_rawBytes().size() == 1);
        lst.push_back(insn);
        addr += insn->get_size();
      }
    }

    // Just checking for when last instruction is not return from function (or similar terminating instruction)
    ASSERT_require(addr <= sz);
    if (addr == sz) {
      switch (instr->get_anyKind())
      {
        namespace rb = Rose::BinaryAnalysis;
        case 0:
        case rb::CilInstructionKind::Cil_ret:
        case rb::CilInstructionKind::Cil_throw:
        case rb::CilInstructionKind::Cil_br:
        case rb::CilInstructionKind::Cil_br_s:
        case rb::CilInstructionKind::Cil_endfinally:
          break;
        default:
          mlog[INFO] << "last instruction in block is not Cil_ret (or like), is 0x" << std::hex << (int) instr->get_anyKind() << std::dec << "\n";
      }
    }
  }

  if (addr > sz) {
    mlog[FATAL] << "instruction address exceeds size of instruction block\n";
    ROSE_ABORT();
  }

  return sb::buildBasicBlock(lst);
}

enum struct code_type
{
  cil            = 0,
  native         = 1,
  optil_reserved = 2,
  runtime        = 3,
  mask           = cil | native | optil_reserved | runtime,
};

inline
code_type operator&(int lhs, code_type rhs)
{
  return static_cast<code_type>(lhs & int(rhs));
}

inline
code_type operator&(code_type lhs, int rhs)
{
  return static_cast<code_type>(int(lhs) & rhs);
}

inline
code_type operator&(code_type lhs, code_type rhs)
{
  return static_cast<code_type>(int(lhs) & int(rhs));
}


void decodeMetadata(Rose::BinaryAnalysis::Address base_va, SgAsmCilMetadataHeap* mdh, SgAsmCilMetadataRoot* root, 
                    size_t dbgbuf_beg, size_t dbgbuf_lim)
{
  ASSERT_not_null(mdh); ASSERT_not_null(root);

  SgAsmCilUint8Heap* stringHeap = root->get_StringHeap();
  ASSERT_not_null(stringHeap);

  SgAsmPEFileHeader* fhdr = SageInterface::getEnclosingNode<SgAsmPEFileHeader>(root);
  ASSERT_not_null(fhdr);
  
  SgAsmCilMethodDefTable* mtbl = mdh->get_MethodDefTable();
  ASSERT_not_null(mtbl);
  
  // decode methods
  for (SgAsmCilMethodDef* m : mtbl->get_elements())
  {
    ASSERT_not_null(m);

    Rose::BinaryAnalysis::Address rva = static_cast<std::uint32_t>(m->get_RVA());
    
    if (rva == 0) continue;
      
    // parse header
    std::uint8_t   mh0;
    std::size_t    nread = fhdr->get_loaderMap()->readQuick(&mh0, base_va + rva, 1);
    ROSE_ASSERT(nread == 1);

    const bool     isTiny = (mh0 & MethodHeader::FORMAT) == MethodHeader::TINY;
    ROSE_ASSERT(isTiny || (((base_va+rva)%4) == 0));
    MethodHeader   mh = isTiny ? parseTinyHeader(mh0) : parseFatHeader(base_va, rva, fhdr);

    m->set_stackSize(mh.maxStackSize());
    m->set_hasMoreSections(mh.moreSections());
    m->set_initLocals(mh.initLocals());
    
    // parse code
    Rose::BinaryAnalysis::Address codeRVA = rva + mh.headerSize();
    std::uint32_t  codeLen = mh.codeSize();

    std::cerr << "base_va: "    << base_va    << " <= "
              << "code_beg: "   << base_va + codeRVA << " <= "
              << "code_lim: "   << base_va + codeRVA + codeLen << " <= "
              << "dbgbuf_beg: " << dbgbuf_beg << " <= "
              << "dbgbuf_lim: " << dbgbuf_lim 
              << std::endl;
    
    //ASSERT_require(dbgbuf_beg                  <= base_va + codeRVA);
    //ASSERT_require(base_va + codeRVA + codeLen <= dbgbuf_lim);

    std::vector<std::uint8_t> code(codeLen, 0);
    std::size_t nreadCode = fhdr->get_loaderMap()->readQuick(code.data(), base_va + codeRVA, codeLen);
    ASSERT_require(nreadCode == codeLen);

    SgAsmBlock* blk = nullptr;
    
    switch (m->get_ImplFlags() & code_type::mask)
    {
      namespace rb = Rose::BinaryAnalysis;

      case code_type::cil: {
        auto arch = rb::Architecture::findByName("cil").orThrow();
        blk = disassemble(base_va + codeRVA, m, mh, code, rb::Disassembler::Cil::instance(arch));
        break;
      }

      case code_type::native: {
        auto arch = rb::Architecture::findByName("intel-pentium4").orThrow();
        blk = disassemble(base_va + codeRVA, m, mh, code, rb::Disassembler::X86::instance(arch));
        break;
      }
        
      case code_type::runtime :
        std::cerr << "  - runtime provided: " << code.size()
                  << std::endl;
        // looking for sample code
        ROSE_ABORT();
        break;

      default:
        ROSE_ABORT();
    }

    ASSERT_not_null(blk);
    m->set_body(blk);
  }
}


std::vector<std::uint8_t> 
unparseMethodHeader(const MethodHeader& mh)
{
  std::vector<std::uint8_t> res;

  if (mh.tiny())
  {
    const std::uint8_t hd = mh.flags() + (mh.codeSize() << 2);
    
    res.push_back(hd);
    return res;
  }
  
  std::size_t loc{0};
  
  ASSERT_require(loc == res.size());
  write16bitValue(mh.flags(),          res, loc); 
  write16bitValue(mh.maxStackSize(),   res, loc);
  write32bitValue(mh.codeSize(),       res, loc);
  write32bitValue(mh.localVarSigTok(), res, loc);
  
  return res;
}

std::vector<std::uint8_t> 
unparseMethodHeader(SgAsmCilMethodDef* m, std::size_t codesize)
{
  ASSERT_not_null(m);
  
  MethodHeader mh;
  
  mh.flags(m->get_hasMoreSections(), m->get_initLocals());
  mh.maxStackSize(m->get_stackSize());
  mh.codeSize(codesize);
  // \todo mh.localVarSigTok(m->get_LocalVarSigTok());
  
  return unparseMethodHeader(mh);
}



std::vector<std::uint8_t> 
unparseCode(SgAsmBlock* blk)
{
  ASSERT_not_null(blk);
  
  std::vector<std::uint8_t> res;
  
  for (SgAsmStatement const* asmstmt : blk->get_statementList())
  {
    SgAsmInstruction const*   instr = isSgAsmInstruction(asmstmt);
    ASSERT_not_null(instr);
    
    SgUnsignedCharList const& iraw  = instr->get_rawBytes();
    
    std::copy(iraw.begin(), iraw.end(), std::back_inserter(res));
  }
    
  return res;
}


void encodeMetadata(std::vector<std::uint8_t>& buf, Rose::BinaryAnalysis::Address base_va, Rose::BinaryAnalysis::Address limit_va,
                    const SgAsmCilMetadataHeap* mdh, const SgAsmCilMetadataRoot* root)
{
  ASSERT_not_null(mdh); ASSERT_not_null(root);
  ASSERT_require(buf.size() >= limit_va);
  
  SgAsmCilUint8Heap* stringHeap = root->get_StringHeap();
  ASSERT_not_null(stringHeap);

  SgAsmPEFileHeader* fhdr = SageInterface::getEnclosingNode<SgAsmPEFileHeader>(root);
  ASSERT_not_null(fhdr);
  
  SgAsmCilMethodDefTable* mtbl = mdh->get_MethodDefTable();
  ASSERT_not_null(mtbl);
  
  // decode methods
  for (SgAsmCilMethodDef* m : mtbl->get_elements())
  {
    ASSERT_not_null(m);

    const Rose::BinaryAnalysis::Address rva = static_cast<std::uint32_t>(m->get_RVA());
    
    if (rva == 0) continue;
    
    // only code that can be parsed can be unparsed ..
    ASSERT_require(  ((m->get_ImplFlags() & code_type::mask) == code_type::cil)
                  || ((m->get_ImplFlags() & code_type::mask) == code_type::native)
                  );
                  
    // \todo revise and write directly into buf              
    
    std::vector<std::uint8_t> code = unparseCode(m->get_body());
    std::vector<std::uint8_t> mh   = unparseMethodHeader(m, code.size());
    
    // any code must be written before the metadata object section
    ASSERT_require(limit_va > rva + base_va + mh.size() + code.size());
    
    std::copy(mh.begin(),   mh.end(),   buf.data() + rva + base_va);
    std::copy(code.begin(), code.end(), buf.data() + rva + base_va + mh.size());
  }
}    


template <class SageAsmCilHeap>
SageAsmCilHeap*
getHeapInternal(const std::vector<SgAsmCilDataStream*>& streams, int8_t& idx, const std::string& streamID)
{
  const int numHeaps = streams.size();

  if (idx < 0)
  {
    while ((++idx < numHeaps) && (streams[idx]->get_Name() != streamID));
  }

  if (idx < numHeaps)
    return dynamic_cast<SageAsmCilHeap*>(streams[idx]);

  return nullptr;
}

void dumpCilStream(std::ostream& os, const std::string& name, const SgAsmCilDataStream* stream, const int& idx)
{
  if (stream == nullptr)
  {
    os << "  " << name << " not available." << std::endl;
    return;
  }
  
  assert(idx >= 0);
  os << "  " << name << " @ get_Streams[" << idx << "]" << std::endl;
    
  stream->dump(os);
}

}


