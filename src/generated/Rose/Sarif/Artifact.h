//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                         THIS FILE IS MACHINE GENERATED  --  DO NOT MODIFY
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// This file was generated by Rosebud
//     ./rosebud --no-locations --backend=sawyer '--serializer=boost,cereal'
//         --sawyer-generated=/Users/rasmussen17/ROSE/rose-develop/src/generated/Rose/Sarif --sawyer-header-prefix=rose/Rose/Sarif
//
// See documentation for the ::Rosebud namespace for information about the input language and how to best run
// the commands to (re)generate this file. See `rosebud --help` for documentation about command-line switches.
//
// The ::Rosebud namespace might be documented at one of these places:
//     https://rpm.is/rose
//     http://rosecompiler.org/ROSE_HTML_Reference/index.html
//
#ifndef ROSE_Sarif_Artifact_H
#define ROSE_Sarif_Artifact_H
#include <RoseFirst.h>

#include <rosePublicConfig.h>
#ifdef ROSE_ENABLE_BOOST_SERIALIZATION
#include <boost/serialization/access.hpp>
#include <boost/serialization/base_object.hpp>
#include <boost/serialization/map.hpp>
#include <boost/serialization/set.hpp>
#include <boost/serialization/shared_ptr.hpp>
#include <boost/serialization/vector.hpp>
#include <boost/serialization/version.hpp>
#endif

#include <rosePublicConfig.h>
#ifdef ROSE_HAVE_CEREAL
#include <cereal/access.hpp>
#include <cereal/cereal.hpp>
#include <cereal/types/memory.hpp>
#endif

#include <featureTests.h>
#ifdef ROSE_ENABLE_SARIF
#include <Rose/Sarif/Node.h>

#include <string>

#ifdef ROSE_HAVE_CEREAL
#include <cereal/types/utility.hpp>
#endif

namespace Rose {
namespace Sarif {

/** Represents an analysis artifact such as a file.
 *
 *  An artifact is referred to by a [URI](https://en.wikipedia.org/wiki/Uniform_Resource_Identifier), and has additional optional
 *  properties such as @ref description, @ref mimeType "MIME type", @ref sourceLanguage "source language", and @ref hash.
 *
 *  Example:
 *
 *  @snippet{trimleft} sarifUnitTests.C sarif_artifact */
class Artifact: public Node {
public:
    // Automatically generated; do not modify!
    /** Shared-ownership pointer to @ref Artifact.
     *
     *  @{ */
    using Ptr = ArtifactPtr;
    using ConstPtr = ArtifactConstPtr;
    /** @} */

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Properties
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:

    /** Property: URI.
     *
     *  The location of this artifact. The URI is set when the artifact is constructed. 
     *  
     *  @{ */
public:
    // Automatically generated; do not modify!
    std::string const& uri() const;
public:
    // Automatically generated; do not modify!
    void uri(std::string const&);
private:
    // Automatically generated; do not modify!
    std::string uri_P2871_;
    /** @} */

    /** Property: Description.
     *
     *  Optional multi-line description of the artifact. 
     *  
     *  @{ */
public:
    // Automatically generated; do not modify!
    std::string const& description() const;
public:
    // Automatically generated; do not modify!
    void description(std::string const&);
private:
    // Automatically generated; do not modify!
    std::string description_P6653_;
    /** @} */

    /** Property: MIME type.
     *
     *  The [MIME type](https://www.rfc-editor.org/info/rfc2045) for this property. 
     *  
     *  @{ */
public:
    // Automatically generated; do not modify!
    std::string const& mimeType() const;
public:
    // Automatically generated; do not modify!
    void mimeType(std::string const&);
private:
    // Automatically generated; do not modify!
    std::string mimeType_P3959_;
    /** @} */

    /** Property: Source language.
     *
     *  If this artifact is source code, then this property should indicate the language. The source language should be lower
     *  case, special symbols should be spelled out, and abbreviations expanded. A language variant can be specified after a
     *  slash character. Examples "c" (C), "cplusplus" (C++), "csharp" (C#), "cplusplus/17" (C++17), "visualbasic" (vb). 
     *  
     *  @{ */
public:
    // Automatically generated; do not modify!
    std::string const& sourceLanguage() const;
public:
    // Automatically generated; do not modify!
    void sourceLanguage(std::string const&);
private:
    // Automatically generated; do not modify!
    std::string sourceLanguage_P9848_;
    /** @} */

    /** Property: Hash.
     *
     *  Specifies a hash of the contents. The hash consists of a hash name such as "sha256" and a string hash value.
     *
     * @{ */
public:
    // Automatically generated; do not modify!
    std::pair<std::string, std::string> const& hash() const;
public:
    // Automatically generated; do not modify!
    std::pair<std::string, std::string>& hash();
public:
    // Automatically generated; do not modify!
    void hash(std::pair<std::string, std::string> const&);
private:
    // Automatically generated; do not modify!
    std::pair<std::string, std::string> hash_P7247_;

public:
    void hash(const std::string &name, const std::string &value);
    /** @} */

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Overrides
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
public:
    bool emit(std::ostream&) override;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Generated constructors, etc.
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

protected:
    /** Constructor. */
    explicit Artifact(std::string const& uri);

public:
    /** Allocating constructor. */
    static Ptr instance(std::string const& uri);

protected:
    /** Default constructor. */
    Artifact();

private:
    // Automatically generated; do not modify!
    /** Default allocating constructor. */
    static Ptr instance();

public:
    virtual ~Artifact();

    //----------------------- Boost serialization for Artifact -----------------------
#ifdef ROSE_ENABLE_BOOST_SERIALIZATION
private:
    friend class boost::serialization::access;

    template<class S>
    void serialize(S &s, const unsigned /*version*/) {
        s & BOOST_SERIALIZATION_BASE_OBJECT_NVP(Node);
        s & BOOST_SERIALIZATION_NVP(uri_P2871_);
        s & BOOST_SERIALIZATION_NVP(description_P6653_);
        s & BOOST_SERIALIZATION_NVP(mimeType_P3959_);
        s & BOOST_SERIALIZATION_NVP(sourceLanguage_P9848_);
        s & BOOST_SERIALIZATION_NVP(hash_P7247_);
    }
#endif // ROSE_ENABLE_BOOST_SERIALIZATION

#ifdef ROSE_HAVE_CEREAL
private:
    friend class cereal::access;

    // Automatically generated; do not modify!
    template<class Archive>
    void CEREAL_SAVE_FUNCTION_NAME(Archive &archive) const {
        archive(cereal::base_class<Node>(this));
        archive(cereal::make_nvp("uri", uri_P2871_));
        archive(cereal::make_nvp("description", description_P6653_));
        archive(cereal::make_nvp("mimeType", mimeType_P3959_));
        archive(cereal::make_nvp("sourceLanguage", sourceLanguage_P9848_));
        archive(cereal::make_nvp("hash", hash_P7247_));
    }

    // Automatically generated; do not modify!
    template<class Archive>
    void CEREAL_LOAD_FUNCTION_NAME(Archive &archive) {
        archive(cereal::base_class<Node>(this));
        archive(cereal::make_nvp("uri", uri_P2871_));
        archive(cereal::make_nvp("description", description_P6653_));
        archive(cereal::make_nvp("mimeType", mimeType_P3959_));
        archive(cereal::make_nvp("sourceLanguage", sourceLanguage_P9848_));
        archive(cereal::make_nvp("hash", hash_P7247_));
    }
#endif // ROSE_HAVE_CEREAL
};

} // namespace
} // namespace
#endif

#endif // include once
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                         THIS FILE IS MACHINE GENERATED  --  DO NOT MODIFY
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
