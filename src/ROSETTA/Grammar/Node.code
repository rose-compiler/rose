// -*- c++ -*-
HEADER_NODE_PREDECLARATION_START

#include <ROSE_DEPRECATED.h>
#include <semaphore.h>
#include <rosePublicConfig.h>
#include "setup.h"
#include <sageContainer.h>
#include <boost/format.hpp>

#ifdef ROSE_ENABLE_BOOST_SERIALIZATION
#include <boost/serialization/access.hpp>
#include <boost/serialization/base_object.hpp>
#include <boost/serialization/map.hpp>
#include <boost/serialization/set.hpp>
#include <boost/serialization/vector.hpp>
#include <boost/serialization/version.hpp>
#endif

#include <Sawyer/CommandLine.h>
#include <Sawyer/Interval.h>
#include <Sawyer/IntervalSet.h>

#include "processSupport.h"
#define __builtin_constant_p(exp) (0)

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
#include <Rose/BinaryAnalysis/AddressSet.h>
#include <Rose/BinaryAnalysis/RelativeVirtualAddress.h>
#include <Rose/BinaryAnalysis/AddressInterval.h>
#include <Rose/BinaryAnalysis/AddressIntervalSet.h>
#include <rose_extent.h>                                // deprecated
#include <Rose/BinaryAnalysis/RegisterDescriptor.h>
#include <Rose/BinaryAnalysis/InstructionMap.h>
#include <ROSE_NELMTS.h>
#endif

#include <Rose/Constants.h>
#include <sageHash.h>
#include <sageTraversal.h>
#include <sageRti.h>
#include <sageCopy.h>
#include <sageMemory.h>
#include <Cxx_GrammarVariants.h>
#include <Cxx_GrammarStorageClasses.h>
#include <virtualCFG.h>

namespace Rose { namespace Traits { namespace generated { template <typename NodeT> struct describe_node_t; } } }
namespace Rose { namespace Traits { namespace generated { template <typename NodeT, typename FieldT, FieldT NodeT::* fld_ptr> struct describe_field_t; } } }

#ifdef ROSE_ENABLE_BINARY_ANALYSIS
// Version numbers for SgAsm* nodes. Used for backward compatibility. */
BOOST_CLASS_VERSION(SgAsmInstruction, 1);
#endif

class PreprocessingInfo;
class AstRegExAttribute;
class AstAttribute;
class AstAttributeMechanism;
struct ReferenceToPointerHandler;

// DQ (3/18/2006): Forward declarations of classes used to control and tailor the code generation.
class UnparseDelegate;
class UnparseFormatHelp;

// DQ (4/32/2006): g++ 4.0.2 requires a forward declaration for this (a friend class declaration is not sufficient!)
class AstSpecificDataManagingClassStorageClass;

HEADER_NODE_PREDECLARATION_END


HEADER_START
     public:

      /*! \brief All nodes in the AST contain a isModified flag used to track changes to the AST.

           This flag can be set but this is typically an internal function used to track the modifications to AST.
           Within future unparsing this flag will control where the token stream is used alternatively to the
           code generation from the AST.
       */
          void set_isModified( bool isModified );

      /*! \brief Many nodes can hide other AST nodes and we need to track when outer nodes contain modified nodes even if they are not themselves modified.

          This flag is required to support the unparsing using the token stream.
       */
          void set_containsTransformation( bool containsTransformation );


      /*! \brief Acess function for isModified flag

          This flag records if the current IR node has been modified.
          It is set to false after and ROSE front-end processing.
       */
          bool get_isModified() const;

      /*! \brief Acess function for containsTransformation flag

          This flag records if the current IR node has a nested AST node that is marked as being modified.
       */
          bool get_containsTransformation() const;

      //! All nodes in the AST contain a reference to a parent node
          void set_parent ( SgNode* parent );

      //! Access function for parent node.
          SgNode* get_parent () const;

       // DQ (3/4/2022): Added access function for p_parent for debugging.
      //! Access function for direct access to uncomputed value of parent node.
          SgNode* get_raw_parent () const;

      //! Query function for if the input IR nodes is a child of the current IR node.
          bool isChild ( SgNode* node ) const;

       //! This function unparses the AST node (excluding comments and unnecessary white space)
           virtual std::string unparseToString(SgUnparse_Info* info) const;

           std::string unparseToString() const;

       //! This function unparses the AST node (including comments and white space)
          std::string unparseToCompleteString();

      /*! \brief Command line support for this compilation
          The command line is saved as a static variable so that it will be available to
          support the rewrite mechanism.

          \param argv - vector of strings holding command line arguments
          \param newFileName - current file name being used (part of support for multiple files on command line).
          \return returns vector of strings.
       */
          static std::vector<std::string> buildCommandLineToSubstituteTransformationFile( const std::vector<std::string>& argv, std::string newFileName );

       // JJW (10/16/2008): Replace variant() by variantT() and a cast (the
       // numbers are the same, but the enumerator names are different)
          int variant() const ROSE_DEPRECATED_FUNCTION {return (int)this->variantT();}

       // AS (10/22/2007): build function to return class hierachy subtree of a VariantT
          static std::vector<VariantT> getClassHierarchySubTreeFunction( VariantT v);
          static void getClassHierarchySubTreeFunction( VariantT v, std::vector<VariantT>&);

      /*! \brief DOCS IN HEADER: Access function for p_isVisited flag used previously by the AST traversals.

          \deprecated This function is not used and will be removed.
          \return Returns bool; true if previously visited within current AST traversal.
       */
          bool get_isVisited () const ROSE_DEPRECATED_FUNCTION;

      /*! \brief Access function for p_isVisited flag used previously by the AST traversals.

          \deprecated This function is not used and will be removed.
       */
          void set_isVisited ( bool isVisited ) ROSE_DEPRECATED_FUNCTION;

      /*! \brief Access function for performance optimizing global mangled name map.

          This mangle name caching is implemented to support better performance.
       */
          static std::map<SgNode*,std::string> & get_globalMangledNameMap();

      /*! \brief Support to clear the performance optimizing global mangled name map.
       */
          static void clearGlobalMangledNameMap();

      /*! \brief Access function for lower level optimizing of global mangled name map.

          This mangle name caching is implemented to shorter strings used in the globalMangledNameMap
          mechanism.
       */
          static std::map<std::string, uint64_t> & get_shortMangledNameCache();


      /*! \brief Access function for name qualification support (for names).

          This qualified name is stored with reference to where the name is used (as required) instead
          of with the IR node of what is names (e.g. function declaration, variable declaration, etc.).
       */
       // DQ (8/11/2025): Adding support for unordered maps for name qualification.
       // static std::map<SgNode*,std::string> & get_globalQualifiedNameMapForNames();
          static SgUnorderedMapNodeToString & get_globalQualifiedNameMapForNames();

      /*! \brief Access function for name qualification support (for names).

          This qualified name is stored with reference to where the name is used (as required) instead
          of with the IR node of what is names (e.g. function declaration, variable declaration, etc.).
       */
       // DQ (8/11/2025): Adding support for unordered maps for name qualification.
       // static void set_globalQualifiedNameMapForNames ( const std::map<SgNode*,std::string> & X );
          static void set_globalQualifiedNameMapForNames ( const SgUnorderedMapNodeToString & X );

      /*! \brief Access function for name qualification support (for type).

          This qualified name is stored with reference to where the type is used (as required) instead
          of with the IR node representing the type (which are typically shared) (e.g. function return
          type, variable type, etc.).
       */
       // DQ (8/11/2025): Adding support for unordered maps for name qualification.
       // static std::map<SgNode*,std::string> & get_globalQualifiedNameMapForTypes();
          static SgUnorderedMapNodeToString & get_globalQualifiedNameMapForTypes();

      /*! \brief Access function for name qualification support (for type).

          This qualified name is stored with reference to where the type is used (as required) instead
          of with the IR node representing the type (which are typically shared) (e.g. function return
          type, variable type, etc.).
       */
       // DQ (8/11/2025): Adding support for unordered maps for name qualification.
       // static void set_globalQualifiedNameMapForTypes ( const std::map<SgNode*,std::string> & X );
          static void set_globalQualifiedNameMapForTypes ( const SgUnorderedMapNodeToString & X );

       // DQ (3/13/2019): Added name qualification support for references to types than can embed many types.
      /*! \brief Access function for name qualification support (for maps of types).

          This qualified name is stored with reference to where the type is used (as required) instead
          of with the IR node representing the type (which are typically shared) (e.g. function return
          type, variable type, etc.).
       */
       // DQ (8/11/2025): Adding support for unordered maps for name qualification.
       // static std::map<SgNode*,std::map<SgNode*,std::string> > & get_globalQualifiedNameMapForMapsOfTypes();
          static std::map<SgNode*,SgUnorderedMapNodeToString> & get_globalQualifiedNameMapForMapsOfTypes();

       // DQ (3/13/2019): Added name qualification support for references to types than can embed many types.
      /*! \brief Access function for name qualification support (for maps of types).

          This qualified name is stored with reference to where the type is used (as required) instead
          of with the IR node representing the type (which are typically shared) (e.g. function return
          type, variable type, etc.).
       */
       // DQ (8/11/2025): Adding support for unordered maps for name qualification.
       // static void set_globalQualifiedNameMapForMapsOfTypes ( const std::map<SgNode*,std::map<SgNode*,std::string> > & X );
          static void set_globalQualifiedNameMapForMapsOfTypes ( const std::map<SgNode*,SgUnorderedMapNodeToString> & X );

      /*! \brief Access function for name qualification support (for template headers in template declarations).

          This name is stored with reference to where the template declaration is used (as required) instead
          of with the IR node (where it could be incorrect).  This design allows it to be computed as needed.
          Note that template headers are the substrings "template<typename T>" that apepar in header declarations.
          These can be repeated as required for deeply nested templated classes and thus are associated with
          name qualification of template declarations (along with the more common form of name qualication
          that also applies to template declarations).
       */
       // DQ (8/11/2025): Adding support for unordered maps for name qualification.
       // static std::map<SgNode*,std::string> & get_globalQualifiedNameMapForTemplateHeaders();
          static SgUnorderedMapNodeToString & get_globalQualifiedNameMapForTemplateHeaders();

      /*! \brief Access function for name qualification support (for template headers in template declarations).

          See documentation in get_globalQualifiedNameMapForTemplateHeaders() (above).
       */
       // static void set_globalQualifiedNameMapForTemplateHeaders ( const std::map<SgNode*,std::string> & X );
          static void set_globalQualifiedNameMapForTemplateHeaders ( const SgUnorderedMapNodeToString & X );

      /*! \brief Access function for name qualification support (for names of types).

          This type name is stored with reference to where the type is used (as required) instead
          of with the IR node representing the type (which are typically shared) (e.g. function return
          type, variable type, etc.).
       */
          static SgUnorderedMapNodeToString& get_globalTypeNameMap();

      /*! \brief Access function for name qualification support (for names of types).

          This qualified name is stored with reference to where the name is used (as required) instead
          of with the IR node of what is names (e.g. function declaration, variable declaration, etc.).
       */
          static void set_globalTypeNameMap ( const SgUnorderedMapNodeToString& X );

     /* name Persistant Attribute Mechanism

         This is the persistant attribute mechanism for attaching attributed to IR nodes across
         multiple passes. Note that these attributes are persistant in that they are preserved
         if the AST is written out to a file and read in from a file.  However, virtual function
         in the user-defined class derived from the AstAttribute must be defined for the attribute
         to be defined across the boundary of File I/O (simple pack and unpack functions).  More
         sophisticated mechanisms are available within the AstAttributeMechanism object
         (e.g iterating though attributes, etc; get_attributeMechanism() is available if direct
         access is required, however mostly only internal tools use this lower level support).

         \internal This used to be a public data member, but has been changed to be a protected
         pointer instead.  The functional interface of the AstAttributeMechanism is presevered
         but some of the names and the syntax for calling the interface have changed. The
         pointer to the AstAttributeMechanism is now generated by ROSETTA.
      */
     /* */
     //! Add a new attribute represented by the named string.
         virtual void addNewAttribute(std::string s,AstAttribute* a);
     //! Returns attribute of name 's'.
         virtual AstAttribute* getAttribute(std::string s) const;
     //! Replace existing attribute of name 's' with new AstAttribute.
         virtual void updateAttribute(std::string s,AstAttribute* a);  // formerly called: replace in AstAttributeMechanism
     /*! \brief This is a wrapper function with the following semantics:
         if no attribute of name 's' exists then \b addNewAttribute(s,a); is called,
         otherwise \b updateAttribute(s,a); is called.
      */
         virtual void setAttribute(std::string s,AstAttribute* a);
     //! Remove attribute of name 's' if present.
         virtual void removeAttribute(std::string s);
     //! Tests if attribute of name 's' is present.
         virtual bool attributeExists(std::string s) const;
     //! Returns the number of attributes on this IR node.
         virtual int numberOfAttributes() const;

     /*! \brief \b FOR \b INTERNAL \b USE Access function; if an attribute exists then
                a pointer to it is returned, else error.

         This is an access function used for getting the interally held pointer to a valid
         AstAttributeMechanism. It provides access to lower level functionality of the
         AstAttributeMechanism, put is mostly of use to internal tools.
      */
         virtual AstAttributeMechanism* get_attributeMechanism() const;
     /*!
         \brief \b FOR \b INTERNAL \b USE Access function; sets poiner to value AstAttributeMechanism.

         This is an access function used for setting the interally held pointer to a valid
         AstAttributeMechanism.
      */
         virtual void set_attributeMechanism(AstAttributeMechanism* a);

#if ALT_FIXUP_COPY
      /* name AST Copy Support Functions

          Support for IR node specific fixup of copy operation.
          This function helps reset scopes and build untraversed parts of the
          AST that are difficult to have be constructed using the automatically
          generated copy functions.

          \implementation These functions are used internally inside the AST copy mechanism.
           The public interface for this functionality is given below this section.
       */
          virtual void fixupCopy_scopes     (SgNode* copy, SgCopyHelp & help) const;
          virtual void fixupCopy_symbols    (SgNode* copy, SgCopyHelp & help) const;
          virtual void fixupCopy_references (SgNode* copy, SgCopyHelp & help) const;
#else
          virtual void fixupCopy(SgNode* copy, SgCopyHelp & help) const;
#endif

      /* name Source Position Information
          \brief Support for source code position information of all IR nodes.

          These are the virtual function definitions, they are overloaded for SgLocatedNode
          and a few of the SgSupport IR nodes.
       */

      /*! \brief File information containing filename, line number, column number,
                 and if the SgNode is a part of a new transformation, etc.

          \internal This function is only defined here to make get_file_info usable
                    without casting for for different types in polymorphic lists
                    actually only defined in SgLocatedNode(s).  It used to be defined
                    in the SgLocatedNode class.
       */
          virtual Sg_File_Info* get_file_info(void) const { return nullptr; }

      /*! \brief New function interface for Sg_File_Info data stores starting
                 location of contruct (typically the opening brace or first letter of keyword).
       */
          virtual Sg_File_Info* get_startOfConstruct(void) const {return nullptr;}

    /*! \brief New function interface for Sg_File_Info data stores ending
               location of contruct (typically the closing brace).
     */
          virtual Sg_File_Info* get_endOfConstruct(void) const { return nullptr; }

      /* name Control flow graph public functions

          These functions return control flow graph nodes for various positions
          around a construct. */
      /* */

#ifndef ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT
     /*! \brief Returns the CFG node for just before this AST node */
          VirtualCFG::CFGNode cfgForBeginning();
      /*! \brief Returns the CFG node for just after this AST node */
          VirtualCFG::CFGNode cfgForEnd();
#endif

#ifndef ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT
      /* name Control flow graph view helper functions

          These functions are used internally inside the control flow graph
          view code.  The public interface for this functionality is given
          below this section. */
      /* */

      /*! \brief Determine the CFG index for the end of this construct. */
          virtual unsigned int cfgIndexForEnd() const;

      /*! \brief Determine whether a particular CFG node index is "interesting"
          for this kind of node. */
          virtual bool cfgIsIndexInteresting(unsigned int index) const;

      /*! \brief Find the index of n in this node's CFG children. */
          virtual unsigned int cfgFindChildIndex(SgNode* n);

      /*! \brief Find the index just after n in this node's CFG children. */
          virtual unsigned int cfgFindNextChildIndex(SgNode* n);

      /*! \brief Find the out edges of a CFG node -- internal version. */
          virtual std::vector<VirtualCFG::CFGEdge> cfgOutEdges(unsigned int index = false);

      /*! \brief Find the in edges of a CFG node -- internal version. */
          virtual std::vector<VirtualCFG::CFGEdge> cfgInEdges(unsigned int index = false);
#endif

       //! Access function for symbol table specific to function types.
          static SgFunctionTypeTable* get_globalFunctionTypeTable();
       //! Access function for symbol table specific to function types.
          static void set_globalFunctionTypeTable(SgFunctionTypeTable* globalFunctionTypeTable);

       //! Access function for symbol table specific to non-function types.
          static SgTypeTable* get_globalTypeTable();
       //! Access function for symbol table specific to non-function types.
          static void set_globalTypeTable(SgTypeTable* globalTypeTable);

     protected:
          static std::vector<std::tuple<unsigned char*, unsigned, VariantT>> all_pools;
     public:
          static VariantT variantFromPool(SgNode const * n);

      /* \brief Mangled name cache for improved performance of mangled name generation
          This mangle name caching is implemented to support better performance.
       */

      /*! \brief Computes the number of nodes in the defined subtree of the AST.

          This function is used as a basis for steps in AST isomophism tests.
          The implementation uses a traversal of the AST subtree to count the
          number of IR nodes. So the complexity if order N in the size of the subtree.
       */
          int numberOfNodesInSubtree();

      /*! \brief Computes the depth of the current defined subtree of the AST.

          This function is used as a basis for steps in AST isomophism tests.
          The implementation uses a traversal of the AST subtree to count the
          depth of the AST traversal. So the complexity if order N in the size
          of the subtree.
       */
          int depthOfSubtree();

     protected:

        /*! \brief Final initialization for constructors
            This function is called at the end of generated constructors
            to allow the specification writer to add special initialization
            functions or tests.  Default is to do nothing.  Otherwise it should
            be overridden in the spec file, in NewHeaderCode/NewOutlinedCode.
        */
          virtual void post_construction_initialization();

     private:
       // Make the copy constructor private (to avoid it being used)
       /* We have to make the copy constructor available so that the SgUnparse_Info
          copy constructor can access it, I'm not clear if this is a good idea.
        */
       // $CLASSNAME(const $CLASSNAME &); /* private so it can't be used. */

      //! Delete operator= (to avoid it being used)
          $CLASSNAME & operator= (const $CLASSNAME &) = delete;

public:
    /** Allocate and return a new node after setting its parent.
     *
     *  ROSE's AST has this annoying, error-prone process for adding a node to the tree. One has to not only add the downward edge
     *  from parent to child, but also explicitly add the upward edge from child to parent. This two-step process makes it difficult
     *  to create child nodes and link them into the parent while the parent is being constructed. This function attempts to make
     *  this easier by doing everything in one step.
     *
     *  Use it like this:
     *
     * @code
     *  Parent::Parent(int foo, int bar)
     *      : p_child(createAndParent<Child>(this), p_foo(foo), p_bar(bar) {}
     * @endcode */
    template<class T>
    static typename std::enable_if<std::is_base_of<SgNode, T>::value, T*>::type
    createAndParent(SgNode *parent) {
        auto node = new T;
        node->set_parent(parent);
        return node;
    }

    /** Generated for tree edge data member initializations.
     *
     *  When initializing a data member that's an edge in the tree, this sets the nodes parent pointer to this object and then
     *  returns the node. It is used in generated code for constructors, like this:
     *
     * @code
     *  Foo::Foo(Bar *bar)
     *      : p_bar(adjustParent(bar, this)) {}
     * @endcode */
    template<class T>
    T* initParentPointer(T *child, SgNode *parent) {
        ASSERT_not_null(parent);
        if (child) {
#ifndef NDEBUG
            auto toString = [](SgNode *node) {
                if (node) {
                    return (boost::format("(%s*)%p") % node->class_name() % node).str();
                } else {
                    return std::string("nullptr");
                }
            };

            ASSERT_require2(child->get_parent() == nullptr,
                            "child " + toString(child) +
                            " cannot be inserted into " + toString(parent) +
                            " because it is already a child of " + toString(child->get_parent()));
#endif
            child->set_parent(this);
        }
        return child;
    }

    /** Set a child edge in a tree to point to a specific child.
     *
     *  Normally one has to remember to set the parent pointer when adding a child to a tree, and also be careful that the result is
     *  still a tree. This helper function tries to make that easier by checking some things and setting the parent pointer
     *  automatically.
     *
     *  For instance, this should work:
     *
     * @code
     *  SgAsmBinaryExpression *parent = ...;
     *  SgAsmBinaryExpression *child1 = ...;
     *  SgAsmBinaryExpression *child2 = ...;
     *
     *  parent->set_lhs(child1);
     *  ASSERT_require(child1->get_parent() == parent);
     *
     *  parent->set_lhs(child2);
     *  ASSERT_require(child1->get_parent() == nullptr);
     *  ASSERT_require(child2->get_parent() == parent);
     *
     *  parent->set_lhs(nullptr);
     *  ASSERT_require(child2->get_parent() == nullptr);
     * @endcode
     *
     *  The following should not work when assertions are enabled:
     *
     * @code
     *  SgAsmBinaryExpression *parent = ...;
     *  SgAsmBinaryExpression *child1 = ...;
     *  SgAsmBinaryExpression *child2 = ...;
     *
     *  parent->set_lhs(child1);
     *  parent->set_rhs(child1); // no longer a tree, but still acyclic
     * @endcode
     *
     * @{ */
    template<class T>
    typename std::enable_if<
        std::is_pointer<T>::value,
        void>::type
    changeChildPointer(T& edge, T const& child) {
#ifndef NDEBUG
        auto toString = [](SgNode *node) {
            if (node) {
                return (boost::format("(%s*)%p") % node->class_name() % node).str();
            } else {
                return std::string("nullptr");
            }
        };
#endif

        if (child != edge) {
            // If there is an old child, check that it has the correct parent and then remove it.
            if (edge) {
                ASSERT_require2(edge->get_parent() == this,
                                "node " + toString(edge) +
                                " is a child of " + toString(this) +
                                " but has wrong parent " + toString(edge->get_parent()));
                edge->set_parent(nullptr);
                edge = nullptr;
            }

            // If there is a new child, check its parent pointer and then insert it.
            if (child) {
                ASSERT_require2(child->get_parent() == nullptr,
                                "node " + toString(child) +
                                " is to be a child of " + toString(this) +
                                " but is already a child of " + toString(child->get_parent()));
                child->set_parent(this);
                edge = child;
            }
        }
    }

    // This gets called for non-pointers, which is the situation for nodes that are only lists of other nodes. We're currently
    // not checking them because the ROSETTA-generated API has too many ways to get around this check, most of which make it
    // impossible to enforce constraints regarding the parent/child consistency. For example:
    //
    //    node->children().clear(); // removes a whole bunch of children but doesn't clear their parent pointers
    //    node->children()[i] = child; // changes the ith child, but doesn't clear the previous ith child's parent pointer
    //    for (auto &tmp: node->children()) tmp = nullptr; // changes each child but doesn't clear parent pointers
    //    ad nausiam...
    template<class T>
    typename std::enable_if<
        !std::is_pointer<T>::value,
        void>::type
    changeChildPointer(T& edge, T const& child) {
        edge = child;
    }
    /** @} */


private:
    // This is called by the debugSerializationBegin and debugSerializationEnd that are in turn called at the beginning and end of
    // each AST node's serialization function. The implementation below uses two counters: classSerializationDepth shared by all
    // instances of this class, and objectSerializationDepth_ which is a per-instance counter. The relationship of these two
    // counters can tell us how deeply nested these recursive calls are, and which of those recursion levels are due to traversing
    // through the base classes versus traversing through data members. In the output, we use one character of indentation per
    // recursion level, with spaces (' ') representing recursion due to data members and dots ('.') representing recursion due to
    // base classes.
    void debugSerializationHelper(const char*, bool) {}

protected:
    /** This gets called by all Rosebud-generated destructors.
     *
     *  Rosebud generates a call to @p destructorHelper from every destructor implementation. This gives the user a chance to
     *  do something special. There are some things to be aware of when reimplementing this function, and you should be well
     *  versed in the C++ rules about calling virtual functions from destructors.
     *
     *  @li The implementation must not attempt to access any data members of derived classes. These data members have already
     *  been destroyed by time this function is called.
     *
     *  @li Any calls you make to virtual functions declared in this class will dispatch only to implementations in this class
     *  or its base classes, not any derived classes.
     *
     *  @li Your implementation must expect to be called multiple times for the same object. This occurs when this class implements
     *  this function but its derived class does not. During destruction of a derived object, the derived class's Rosebud-generated
     *  destructor will call @p destructorHelper, which will dispatch to the implementation in this class. Then, when the part of
     *  the object corresponding to this class is being destroyed, the destructor will call @p destructorHelper again, which will
     *  dispatch to this implementation again. This may happen recursively mutliple times.
     *
     *  @li Your implementation should not destroy anything that a subclass might need during its destruction. This follows from the
     *  rule above, but is generally not a problem in practice. The reason it's not a problem is that the derived classes are
     *  usually Rosebud-generated and thus their destructors only call @p destructorHelper. Therefore, in order for any derived
     *  class to any work, it must be done in its @p destructorHelper, which would be called before the implementation of @p
     *  destructorHelper in this class is called.
     *
     *  All attempts should be made to avoid having to implement a @p destructorHelper in any class but the most base class (and
     *  that one does nothing). Instead, use data members whose own destructors do their cleanup. For instance, if this class needs
     *  a pointer to data allocated on the stack, then instead of using a raw pointer which needs to be deleted in this class's
     *  destructor, use a smart pointer whose own destructor deletes the data. If you follow this advice, then you don't need to
     *  be well-versed in the details of C++ object destruction. */
     virtual void destructorHelper() {}

protected:
    /** Called by generated serializers.
     *
     *  All generated serialization functions call this function as the first or last thing they do. This is a convenient place to
     *  put temporary debugging code or breakpoints if you're trying to figure out what went wrong. You can also override it in
     *  particular derived classes if you need to debug just one class.
     *
     * @{ */
    virtual void debugSerializationBegin(const char *className) {
        debugSerializationHelper(className, true);
    }
    virtual void debugSerializationEnd(const char *className) {
        debugSerializationHelper(className, false);
    }
    /** @} */

     public:

HEADER_END


HEADER_IS_CLASSNAME_START
     // the generated cast function
     // friend ROSE_DLL_API $CLASSNAME* is$CLASSNAME ( SgNode* s );

          typedef $BASECLASS base_node_type;
HEADER_IS_CLASSNAME_END

HEADER_PARSER_START
      //! Parser from AST using parent grammar (lower level less specific grammar).
      /*! We parse from a lower level grammar into a higher level grammar
          An element (or root of s subtree of elements) of a lower level
          grammar is also an element (or root of) a higher level grammar
          This text is located in parserPrototype.macro and is used only
          for non-child terminals/nonterminals.
       */
          friend SgNode* Sgparse ( $PARENT_GRAMMARS_PREFIX_$CLASS_BASE_NAME* X );

HEADER_PARSER_END


SOURCE_START


// ###############################
// Start of source code for SgNode
// ###############################

// Support for global function type symbol table (moved to be static data pointer)
SgFunctionTypeTable* SgNode::p_globalFunctionTypeTable = nullptr;

// DQ (7/22/2010): Added type table for non-function types (supports construction of unique types).
SgTypeTable*         SgNode::p_globalTypeTable         = nullptr;

// DQ (3/12/2007): Added mangled name map to improve performance of generating mangled names
std::map<SgNode*,std::string> SgNode::p_globalMangledNameMap;
std::map<std::string,uint64_t> SgNode::p_shortMangledNameCache;

// DQ (5/28/2011): Added central location for qualified name maps (for names and types).
// these maps store the required qualified name for where an IR node is referenced (not
// at the IR node which has the qlocal qualifier).  Thus we can support multiple references
// to an IR node which might have different qualified names.  This is critical to the
// qualified name support.
SgUnorderedMapNodeToString SgNode::p_globalQualifiedNameMapForNames;
SgUnorderedMapNodeToString SgNode::p_globalQualifiedNameMapForTypes;
SgUnorderedMapNodeToString SgNode::p_globalQualifiedNameMapForTemplateHeaders;

std::unordered_map<SgNode*,std::string> SgNode::p_globalTypeNameMap;

// DQ (3/13/2019): The fix for referencing types than contain many parts is to have a map of maps
// to the generated name qualification substrings for each type, all associted with a single reference
// node to the statement refering to the type.
// DQ (8/11/2025): Adding support for unordered maps for name qualification.
std::map<SgNode*,SgUnorderedMapNodeToString> SgNode::p_globalQualifiedNameMapForMapsOfTypes;

#if ALT_FIXUP_COPY
void
SgNode::fixupCopy_scopes(SgNode* /*copy*/, SgCopyHelp & /*help*/) const
   {
  // This is the empty default inplementation, not a problem if it is called!
   }

void
SgNode::fixupCopy_symbols(SgNode* /*copy*/, SgCopyHelp & /*help*/) const
   {
  // This is the empty default inplementation, not a problem if it is called!
   }

void
SgNode::fixupCopy_references(SgNode* /*copy*/, SgCopyHelp & /*help*/) const
   {
  // This is the empty default inplementation, not a problem if it is called!
   }
#else
// DQ (10/5/2007): Added IR node specific function to permit copies, via AST copy(), to be fixedup
// Usually this will correct scopes and in a few cases build child IR nodes that are not traversed
// (and thus shared in the result from the automatically generated copy function).
void
SgNode::fixupCopy(SgNode* /*copy*/, SgCopyHelp & /*help*/) const
   {
  // This is the empty default inplementation, not a problem if it is called!
   }
#endif

SgFunctionTypeTable*
SgNode::get_globalFunctionTypeTable()
   {
  // If there is no global function type symbol table then build one
     if (p_globalFunctionTypeTable == nullptr)
        {
          p_globalFunctionTypeTable = new SgFunctionTypeTable();
        }

     ASSERT_not_null(p_globalFunctionTypeTable);
     return p_globalFunctionTypeTable;
   }

void
SgNode::set_globalFunctionTypeTable ( SgFunctionTypeTable* globalFunctionTypeTable )
   {
     p_globalFunctionTypeTable = globalFunctionTypeTable;
   }

SgTypeTable*
SgNode::get_globalTypeTable()
   {
  // If there is no global function type symbol table then build one
     if (p_globalTypeTable == nullptr)
        {
          p_globalTypeTable = new SgTypeTable();
        }

     ASSERT_not_null(p_globalTypeTable);
     return p_globalTypeTable;
   }

void
SgNode::set_globalTypeTable ( SgTypeTable* globalTypeTable )
   {
     p_globalTypeTable = globalTypeTable;
   }

// DQ (3/17/2007): return reference to the global mangled name map (the use
// of this map is a performance optimization).
std::map<SgNode*,std::string> &
SgNode::get_globalMangledNameMap()
   {
     return p_globalMangledNameMap;
   }

std::map<std::string, uint64_t> &
SgNode:: get_shortMangledNameCache()
   {
     return p_shortMangledNameCache;
   }

// DQ (3/17/2007): return reference to the global mangled name map (the use
// of this map is a performance optimization).
void
SgNode::clearGlobalMangledNameMap()
   {
  // Remove all elements from the globalMangledNameMap
     p_globalMangledNameMap.clear();
   }

// DQ (8/11/2025): Adding support for unordered maps for name qualification.
// std::map<SgNode*,std::string> & SgNode::get_globalQualifiedNameMapForNames()
SgUnorderedMapNodeToString &
SgNode::get_globalQualifiedNameMapForNames()
   {
     return p_globalQualifiedNameMapForNames;
   }

// DQ (8/11/2025): Adding support for unordered maps for name qualification.
void
SgNode::set_globalQualifiedNameMapForNames(const SgUnorderedMapNodeToString & X)
   {
     p_globalQualifiedNameMapForNames = X;
   }

// DQ (8/11/2025): Adding support for unordered maps for name qualification.
SgUnorderedMapNodeToString &
SgNode::get_globalQualifiedNameMapForTypes()
   {
     return p_globalQualifiedNameMapForTypes;
   }

// DQ (8/11/2025): Adding support for unordered maps for name qualification.
void
SgNode::set_globalQualifiedNameMapForTypes(const SgUnorderedMapNodeToString & X)
   {
     p_globalQualifiedNameMapForTypes = X;
   }

// DQ (8/11/2025): Adding support for unordered maps for name qualification.
std::map<SgNode*,SgUnorderedMapNodeToString> &
SgNode::get_globalQualifiedNameMapForMapsOfTypes()
   {
     return p_globalQualifiedNameMapForMapsOfTypes;
   }

// DQ (8/11/2025): Adding support for unordered maps for name qualification.
void
SgNode::set_globalQualifiedNameMapForMapsOfTypes(const std::map<SgNode*,SgUnorderedMapNodeToString> & X)
   {
     p_globalQualifiedNameMapForMapsOfTypes = X;
   }

// DQ (8/11/2025): Adding support for unordered maps for name qualification.
SgUnorderedMapNodeToString &
SgNode::get_globalQualifiedNameMapForTemplateHeaders()
   {
     return p_globalQualifiedNameMapForTemplateHeaders;
   }

// DQ (8/11/2025): Adding support for unordered maps for name qualification.
void
SgNode::set_globalQualifiedNameMapForTemplateHeaders(const SgUnorderedMapNodeToString & X)
   {
     p_globalQualifiedNameMapForTemplateHeaders = X;
   }

// DQ (6/3/2011): Added support for holding the map of type names that require qualification and at this position dependent.
SgUnorderedMapNodeToString&
SgNode::get_globalTypeNameMap()
   {
     return p_globalTypeNameMap;
   }

// DQ (6/3/2011): Added support for holding the map of type names that require qualification and at this position dependent.
void
SgNode::set_globalTypeNameMap(const SgUnorderedMapNodeToString& X)
   {
     p_globalTypeNameMap = X;
   }

void
SgNode::addNewAttribute(std::string s, AstAttribute* /*a*/)
   {
     printf ("Error: calling SgNode::addNewAttribute(%s) \n",s.c_str());
     ASSERT_require(false);
   }

void
SgNode::setAttribute(std::string s, AstAttribute* /*a*/)
   {
     printf ("Error: calling SgNode::setAttribute(%s) \n",s.c_str());
     ASSERT_require(false);
   }

AstAttribute*
SgNode::getAttribute(std::string s) const
   {
     printf ("Error: calling SgNode::getAttribute(%s) \n",s.c_str());
     ASSERT_require(false);

     return nullptr;
   }

void
SgNode::updateAttribute( std::string s, AstAttribute* /*a*/)
   {
     printf ("Error: calling SgNode::updateAttribute(%s) \n",s.c_str());
     ASSERT_require(false);
   }

void
SgNode::removeAttribute(std::string s)
   {
     printf ("Error: calling SgNode::removeAttribute(%s) \n",s.c_str());
     ASSERT_require(false);
   }

bool
SgNode::attributeExists(std::string s) const
   {
     printf ("Error: calling SgNode::attributeExists(%s) on node = %s \n",s.c_str(),class_name().c_str());
     ASSERT_require(false);
     return false;
   }

int
SgNode::numberOfAttributes() const
   {
     int returnValue = 0;
     return returnValue;
   }

AstAttributeMechanism*
SgNode::get_attributeMechanism() const
   {
     return nullptr;
   }

void
SgNode::set_attributeMechanism(AstAttributeMechanism* /*a*/)
   {
  // Nothing to do here, but we need this virtual function so that the correct access
  // function will be call on IR nodes where the AstAttributeMechanism is defined as
  // a data member.
     ASSERT_require2(false,"SgNode::set_attributeMechanism(AstAttributeMechanism* a) has been called\n");
   }

void
SgNode::post_construction_initialization()
   {
  // default implementation does nothing!
   }

void
SgNode::set_isModified(bool isModified)
   {
     ASSERT_this();
     p_isModified = isModified;
   }

bool
SgNode::get_isModified () const
   {
     ASSERT_this();
     return p_isModified;
   }

// Records when an AST subtree holds an AST node (or subtree) that has been modified.
void
SgNode::set_containsTransformation ( bool containsTransformation)
   {
     ASSERT_this();
     p_containsTransformation = containsTransformation;
   }

// Records when an AST subtree holds an AST node (or subtree) that has been modified.
bool
SgNode::get_containsTransformation() const
   {
     ASSERT_this();
     return p_containsTransformation;
   }

bool
SgNode::get_isVisited() const
   {
     ASSERT_this();
     ASSERT_require2(false,"The p_isVisited flag has been removed, it is an error to call this function\n");
     return true;
   }

void
SgNode::set_isVisited(bool /*isVisited*/)
   {
     ASSERT_this();
     ASSERT_require2(false,"The p_isVisited flag has been removed, it is an error to call this function\n");
     set_isModified(true);
   }

//  ! Permits specification of parent node (connects the AST tree)
/*  ! This function is called internally to connect the elements of the grammar to form the AST.
 */
void
SgNode::set_parent(SgNode* parent)
   {
     ASSERT_this();
     ASSERT_require(this != parent);
     p_parent = parent;

  // I think this should be always be true, so let's inforce it (this happends for test2005_64.C)
     if ( ( variantT() == V_SgClassDeclaration ) && ( parent != nullptr && parent->variantT() == V_SgFunctionParameterList ) )
        {
#ifdef ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION
          printf ("Warning: Found case in set_parent() where this is a SgClassDeclaration and parent is a SgFunctionParameterList \n");
#endif
        }

     if ( ( variantT() == V_SgTemplateDeclaration ) && ( parent != nullptr && parent->variantT() == V_SgTemplateInstantiationFunctionDecl ) )
        {
          printf ("Warning: Found case in set_parent() where this is a SgTemplateDeclaration and parent is a SgTemplateInstantiationFunctionDecl \n");
          ASSERT_require(false);
        }

     if ( ( variantT() == V_SgClassDeclaration ) && ( parent != nullptr && parent->variantT() == V_SgGlobal ) )
        {
#ifdef ROSE_DEBUG_NEW_EDG_ROSE_CONNECTION
          printf ("Warning: Found case in set_parent() where this is a SgClassDeclaration and parent is a SgGlobal \n");
#endif
        }

     if ( ( variantT() == V_SgTemplateInstantiationDecl ) && ( parent != nullptr && parent->variantT() == V_SgClassType ) )
        {
          printf ("Warning: Found case in set_parent() where this is a SgTemplateInstantiationDecl and parent is a SgClassType \n");
          printf ("Exiting in this case! \n");
          ASSERT_require(false);
        }
   }

/*! \brief Get the parent node.
    This function is called internally to connect the elements of the grammar to form the
    AST.  This is the backward reference up the tree.

    \internal We can't have ROSETTA build these access functions since we want specific
    checking of values for NULL pointers (parent point is NULL only for SgProject).
    In the case of a SgType this function returns NULL, because types are shared by design.
 */
SgNode*
SgNode::get_parent() const
   {
     ASSERT_this();
     return p_parent;
   }

/*! \brief Get the parent node.
    This function is provides access to the p_parent value directly. It is provided for debugging purposes only.
    The existance of this function is to preserve the original semantics of the get_parent() function which returns
    a NULL value for SgType nodes.
 */
SgNode*
SgNode::get_raw_parent() const
   {
     ASSERT_this();
     return p_parent;
   }

//! Query function for if the input IR nodes is a child of the current IR node.
bool
SgNode::isChild ( SgNode* node ) const
   {
     return (getChildIndex(node) != -1);
   }

vector<string>
$CLASSNAME::buildCommandLineToSubstituteTransformationFile( const vector<string>& argv, std::string newFileName )
   {
     int fileNameCounter  = 0;
     int fileNameLocation = 0;

  // return a copy of the commandline input to this function
     vector<string> transformation_argv(argv.size());

  // copy all the entries in the command line.
     for (unsigned int i=0; i < argv.size(); i++)
        {
       // Count up the number of filenames (if it is ZERO then this is likely a link line called
       // using the compiler (required for template processing in C++ with most compilers) if there
       // is ONE then this is the source file.  Currently their can only be ONE source file specified.

       // most options appear as -<option>
       // have to process +w2 (warnings option) on some compilers so include +<option>
          if ( argv[i].size() < 1 || (argv[i][0] != '-') || (argv[i][0] != '+') )
             {
               unsigned int length = argv[i].size();

            // look only for .c and .C files (source code files)
            // The length has to be greater then 2 or else we will generate a purify error!
               if ( (length > 2) && (argv[i][length-2] == '.') && ( (argv[i][length-1] == 'c') || (argv[i][length-1] == 'C') ) )
                  {
                    transformation_argv[i] = strdup(newFileName.c_str());

                 // record the location of the filename in the command line and the number of filenames
                    fileNameLocation = i;
                    fileNameCounter++;
                  }
                 else
                  {
                    transformation_argv [i] = argv[i];
                  }
             }
            else
             {
               transformation_argv [i] = argv[i];
             }
        }

  // For now ets only debug the case of a single file specified on the command line
     ASSERT_require(fileNameCounter == 1);
     ASSERT_require(fileNameLocation > 0);

  // We have found the location of the filename in the command line (now modify it)

     return transformation_argv;
   }

std::string
$CLASSNAME::unparseToString(SgUnparse_Info* info) const
   {
  // Generate the string (don't pass a SgUnparse_Info object so that we can use the
  // default settings).
     std::string outputString = globalUnparseToString(this,info);
     return outputString;
   }

std::string
$CLASSNAME::unparseToString() const
   {
     return this->unparseToString(nullptr);
   }

std::string
$CLASSNAME::unparseToCompleteString()
   {
  // Generate the string (pass a SgUnparse_Info object)
     SgUnparse_Info* inputUnparseInfoPointer = new SgUnparse_Info();
     inputUnparseInfoPointer->unset_SkipComments();    // generate comments
     inputUnparseInfoPointer->unset_SkipWhitespaces(); // generate all whitespaces to format the code
     std::string outputString = globalUnparseToString(this,inputUnparseInfoPointer);

  // DQ (2/18/2013): Added fix to delete SgUnparse_Info built to support unparseToCompleteString().
     delete inputUnparseInfoPointer;
     inputUnparseInfoPointer = nullptr;

     return outputString;
   }

void
SgCopyHelp::insertCopiedNodePair( const SgNode* key, SgNode* value )
   {
  // DQ (10/8/2007): This function support the saving of state used to associated original IR nodes with the copies made of them so that symbols can be updated.

     if (copiedNodeMap.find(key) == copiedNodeMap.end())
        {
       // Add the node to the map...
          copiedNodeMap[key] = value;
        }
   }


SgNode*
SgTreeCopy::copyAst( const SgNode *n )
   {
  // DQ (10/8/2007): I have modified this function to have a single return.
  // This function is called by the copy mechanism to copy AST child trees.

     SgNode *nCopy = nullptr;

  // If this is a SgType, then force it to be shared, since all SgTypes are shared.
     if (isSgType(n) != nullptr)
        {
       // Share the reference to the IR node.
          nCopy = const_cast<SgNode *>(n);
        }
       else
        {
       // If this is a class definition then only do a deep copy if it is from a defining class declaration.
          const SgClassDefinition* classDefinition = isSgClassDefinition(n);
          if (classDefinition != nullptr)
             {
               ASSERT_not_null(classDefinition->get_parent());
               SgClassDeclaration* classDeclaration = isSgClassDeclaration(classDefinition->get_parent());
               if (classDeclaration == classDeclaration->get_definingDeclaration())
                  {
                 // Do a deep copy on this IR node.
                    nCopy = n->copy(*this);
                  }
                 else
                  {
                 // Share the reference to the IR node.
                    nCopy = const_cast<SgNode *>(n);
                  }
             }
            else
             {
            // Do a deep copy on this IR node.
               nCopy = n->copy(*this);
             }

       // Set the parent to NULL, the copy mechanism we set it correctly ...
          nCopy->set_parent(nullptr);
        }

     return nCopy;
   }

// DQ (8/10/2008): Added to support binary file format.
std::ostream &
operator<< (std::ostream & os, const struct stat & /*sb*/)
   {
     return os;
   }

VirtualCFG::CFGNode
SgNode::cfgForBeginning()
   {
     ASSERT_this();
     return VirtualCFG::CFGNode(this, 0);
   }

VirtualCFG::CFGNode
SgNode::cfgForEnd()
   {
     ASSERT_this();
     return VirtualCFG::CFGNode(this, this->cfgIndexForEnd());
   }

VariantT SgNode::variantFromPool(SgNode const * n) {
  for (std::tuple<unsigned char*, unsigned, VariantT> const & pool: all_pools) {
    auto & base = std::get<0>(pool);
    auto & size = std::get<1>(pool);
    auto offset = ((unsigned char*)n - base);
    if ( offset >= 0 && offset < size ) return std::get<2>(pool);
  }
  return (VariantT)0;
}

SOURCE_END

SOURCE_ROOT_NODE_ERROR_FUNCTION_START

SOURCE_ROOT_NODE_ERROR_FUNCTION_END


SOURCE_ERROR_FUNCTION_START

SOURCE_ERROR_FUNCTION_END
