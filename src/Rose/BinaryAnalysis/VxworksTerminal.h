#ifndef ROSE_BinaryAnalysis_VxworksTerminal_H
#define ROSE_BinaryAnalysis_VxworksTerminal_H
#include <featureTests.h>
#ifdef ROSE_ENABLE_BINARY_ANALYSIS

#include <Rose/BinaryAnalysis/AddressInterval.h>
#include <Rose/BinaryAnalysis/MemoryMap.h>
#include <Rose/Diagnostics.h>

#include <Sawyer/PartialResult.h>
#include <Sawyer/Result.h>

#include <string>

namespace Rose {
namespace BinaryAnalysis {

/** Connection to a VxWorks terminal. */
class VxworksTerminal {
public:
    /** Shared-ownership pointer. */
    using Ptr = VxworksTerminalPtr;

    /** Information about connecting to a VxWorks terminal. */
    class Settings {
    public:
        AddressInterval where;                                /**< Affected addresses. */
        unsigned permissions = MemoryMap::READ_WRITE_EXECUTE; /**< Mapping permissions. */
        std::string prompt = "/[_a-zA-Z0-9]+->|-> /";         /**< VxWorks terminal prompt "literal" or "/regex/". */
        double delaySeconds = 0.01;                           /**< Number of seconds to delay before each command. */
        double timeoutSeconds = 2.0;                          /**< Number of seconds before assuming a missed prompt. */
        size_t bytesPerRequest = 1024;                        /**< Number of bytes to request per terminal command. */
        std::string host = "localhost";                       /**< Telnet server host or IP. */
        uint16_t port = 23;                                   /**< TCP port at which the telnet server is listening. */

    public:
        void print(std::ostream&) const;
    };

    /** Handle data transfers to/from the VxWorks terminal. */
    class DataTransfer {
    public:
        enum class State {
            NORMAL,                                     /**< Normal operational state transferring and handling data. */
            DRAIN,                                      /**< Terminate transfer when output to server becomes empty. */
            TERMINATE                                   /**< Terminate transfer at next opportunity. */
        };

    public:
        State state = State::NORMAL;                    /**< Current state of operation. */
        
    public:
        virtual ~DataTransfer() = default;

        /** Called for each line emitted by the VxWorks terminal.
         *
         *  Returns output that should be sent to the terminal. */
        virtual std::string handleInput(const std::string &line) = 0;

        /** Called each time a prompt is detected from the VxWorks terminal.
         *
         *  If the data transfer times out waiting for a prompt, then this function is called with an empty string.
         *
         *  Returns output that should be sent to the terminal. */
        virtual std::string handlePrompt(const std::string &prompt) = 0;
    };

private:
    Settings settings_;
    int server_ = -1;                                   // filedescriptor connected to the server if open, else -1

public:
    static Diagnostics::Facility mlog;

public:
    ~VxworksTerminal();
protected:
    VxworksTerminal();
    explicit VxworksTerminal(const Settings&);
    VxworksTerminal(const VxworksTerminal&) = delete;
    VxworksTerminal& operator=(const VxworksTerminal&) = delete;

public:
    /** Allocating constructor.
     *
     *  The object is created, but no attempt is made to connect to the remote server. The settings are either the defaults
     *  or the specified settings.
     *
     * @{ */
    static Ptr instance();
    static Ptr instance(const Settings&);
    /** @} */
    
public:
    /** Initialize diagnostic streams.
     *
     *  This is called automatically by @ref Rose::Diagnostics::initialize. */
    static void initDiagnostics();

    /** Property: Configuration settings.
     *
     * @{ */
    const Settings& settings() const;
    Settings& settings();
    /** @} */

    /** Generate locator string documentation.
     *
     *  Returns a documentation string that describes the locator string syntax used by the @ref parseLocatorString function.  The
     *  return value is used when generating man page documentation for most binary analysis tools. The settings argument provides
     *  the defaults referenced by the documentation. */
    static std::string locatorStringDocumentation(const Settings&);

    /** Parse a VxWorks terminal locator string.
     *
     *  The locator string is of the form ":[MEMORY_SETTINGS]:[CONNECTION_SETTINGS]:HOST". The full documentation is generated by
     *  the @ref locatorStringDocumentation function at runtime when producing the man pages output by most ROSE binary analysis
     *  tools.
     *
     *  Returns the parsed settings with defaults where a setting was not specified, or an error if something couldn't be parsed. */
    static Sawyer::Result<Settings, MemoryMap::LocatorError> parseLocatorString(const std::string&, const Settings &dflt);

    /** Open a connection to the terminal.
     *
     *  This function attempts to connect to the telnet port.
     *
     *  Returns nothing if the connection was opened successfully, or an error message if the connection failed. It is an error to
     *  try to connect when a connection is already open. */
    Sawyer::Optional<std::string> open();

    /** Test whether the connection is open.
     *
     *  Returns  true if this object is connected to a remote server. */
    bool isOpen() const;

    /** Download memory from an open connection.
     *
     *  If an address interval is supplied as an argument, then those addresses are downloaded. Otherwise the address interval
     *  is obtained from the @ref settings.
     *
     *  Returns the memory data downloaded from the remote terminal, or an error string. It is an error if the entire memory
     *  region could not be downloaded, but even if an error occurs any partial data that was downloaded is also returned.
     *
     * @{ */
    Sawyer::PartialResult<std::vector<uint8_t>, std::string> download();
    Sawyer::PartialResult<std::vector<uint8_t>, std::string> download(const AddressInterval&);
    /** @} */

    /** Download memory from an open connection into a map.
     *
     *  If an address interval is supplied then those addresses are downloaded, otherwise the address interval is obtained from
     *  the @ref settings. The name of the mapped segment is specified with an argument. The permissions come from the current
     *  terminal @ref settings.
     *
     *  Returns the region of memory that was downloaded. If an error occurs, then an error string is also returned.
     *
     * @{ */
    Sawyer::PartialResult<AddressInterval, std::string> download(const MemoryMapPtr &destination, const std::string &name);
    Sawyer::PartialResult<AddressInterval, std::string> download(const MemoryMapPtr &destination, const AddressInterval&,
                                                                 const std::string &name);
    /** @} */

private:

    bool matchPrompt(const std::string&);
    Sawyer::Result<bool, std::string> transferData(DataTransfer&);
};

std::ostream& operator<<(std::ostream&, const VxworksTerminal::Settings&);

} // namespace
} // namespace

#endif
#endif
