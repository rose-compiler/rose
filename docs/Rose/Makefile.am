include $(top_srcdir)/config/Makefile.for.ROSE.includes.and.libs

# When debugging latex documentation skip using the --interaction=batchmode option
# PDFLATEX = env TEXINPUTS=$(srcdir):$(top_srcdir)/tests:.: pdflatex --interaction=batchmode
# Liao 12/18/2009, use normal mode to ease finding bugs from hudson logs
PDFLATEX = env TEXINPUTS=$(srcdir):$(top_srcdir)/tests/nonsmoke/functional:.: pdflatex -file-line-error -halt-on-error

# Later we will add ROSETTA documentation here ...
SUBDIRS = Tutorial 

# Macros and code fragements that the Sage source code depends upon
# (this is where most of the documentation goes)
SOURCE_FOR_SAGE_GENERATED_CODE = \
     $(top_srcdir)/src/ROSETTA/Grammar/*.code \
     $(top_srcdir)/src/ROSETTA/Grammar/*.macro

# Use Cxx_Grammar.h as a representative for all the generated source code
# that Doxygen will use and make sure that it has been generated before
# we try to generate the doxygen documentation from it.
SAGE_GENERATED_CODE = $(top_builddir)/src/frontend/SageIII/Cxx_Grammar.h

# Name the Sage tag file used by Doxygen
SAGE_DOXYGEN_TAG_FILE = $(top_builddir)/docs/Rose/SageIntermediateForm/sageDoxygen.tags

# Representative files from generated Doxygen documentation
# (This must be a single file to avoid spawning more than one parallel job when using parallel make)
SageDoxygenDocumentation = $(top_builddir)/docs/Rose/SageIntermediateForm/html/index.html

RoseDoxygenDocumentation = $(top_builddir)/docs/Rose/ROSE_WebPages/ROSE_HTML_Reference/index.html

# What the generation of doxygen output for Sage depends upon
SageDocsDependencies = \
     sage.cfg \
     $(SAGE_GENERATED_CODE) \
     $(top_builddir)/src/frontend/SageIII/sage.docs \
     $(top_srcdir)/src/frontend/SageIII/sageClasses.docs

# What the generation of doxygen output for Rose depends upon
RoseDocsDependencies = \
     rose.cfg \
     $(top_builddir)/src/frontend/SageIII/sage.docs \
     $(top_srcdir)/src/frontend/SageIII/sage.docs.in \
     $(top_srcdir)/src/extra.docs \
     $(top_srcdir)/src/util/stringSupport/stringSupportDocumentation.docs \
     $(top_srcdir)/src/util/utilDocumentation.docs \
     $(top_srcdir)/src/midend/astQuery/QueryLib.docs \
     $(top_srcdir)/src/midend/astRewriteMechanism/ASTRewrite.docs \
     $(top_srcdir)/src/midend/astProcessing/AstProcessing.docs \
     $(top_srcdir)/src/backend/unparser/unparser.docs \
     $(top_srcdir)/src/3rdPartyLibraries/MSTL/MSTL.docs \
     $(top_srcdir)/src/roseExtensions/roseHPCToolkit/docs/roseHPCToolkit.docs

# If the generated sage source code is older than the code used to
# generate the sage source code then regenerate the sage source code
# by calling make in the ROSE/ROSETTA directory.
$(SAGE_GENERATED_CODE): $(SOURCE_FOR_SAGE_GENERATED_CODE)
	cd $(top_builddir)/src/ROSETTA; $(MAKE)

# The tag file is generated by Doxygen using the sage-docs rule
# $(SAGE_DOXYGEN_TAG_FILE): sage-docs

SAGE_MAINPAGE_DOCUMENTATION = $(top_builddir)/src/frontend/SageIII/sage.docs

# DQ (1/27/2014): Add simple makefile rule to run doxygen to generate ROSE API docs.
.PHONY: doxygen_docs
if ROSE_HAVE_DOXYGEN

doxygen_docs: rose.cfg
	$(DOXYGEN) rose.cfg
	if [ "$(DOXYINDEXER)" != "" -a -e ROSE_WebPages/searchdata.xml ]; then	\
	    $(DOXYINDEXER) ROSE_WebPages/searchdata.xml;			\
	fi

# A more complex dependence is defined that requires the sage.tag file
$(RoseDoxygenDocumentation): $(RoseDocsDependencies)  rose.cfg
	cd $(top_builddir)/src/frontend/SageIII; $(MAKE) sage.docs
	$(DOXYGEN) rose.cfg
	if [ "$(DOXYINDEXER)" != "" -a -e ROSE_WebPages/searchdata.xml ]; then	\
	    $(DOXYINDEXER) ROSE_WebPages/searchdata.xml;			\
	fi

else

doxygen_docs: rose.cfg
	@echo "Doxygen documentation not generated (configure with --with-doxygen)" >&2
	@false

$(RoseDoxygenDocumentation): $(RoseDocsDependencies) rose.cfg
	@echo "Doxygen documentation not generated (configure with --with-doxygen)" >&2
	@false
endif


# DQ (3/4/2014): This is a redundant makefile rule (mistake).
# DQ (7/11/2009): Added rule to force generation of Doxygen documentation.
#doxygen_docs: $(RoseDocsDependencies) rose.cfg
#	cd $(top_builddir)/src/frontend/SageIII; $(MAKE) sage.docs
#	doxygen rose.cfg || exit 1
#	echo "Doxygen generated documentation terminated normally."

# We can't specify the source directory to latex so we have to build
# links to the files in the source directory.  Other ideas?
latexFiles = preface.tex acknowledgments.tex introduction.tex \
             designOfRose.tex preprocessorDesign.tex examples.tex \
             loopTransformDoc.tex mm.tex lu.tex \
             tridvpk.tex appendix.tex glossary.tex bibliography.tex \
             rose-processing-phases.pdf testing.tex \
             writingYourFirstTranslator.tex overviewOfRose.tex \
             developersAppendix.tex astMerge.tex installRose.tex \
             binaryAnalysis.tex demo.tex OpenMPsupport.tex UPCsupport.tex \
             rose_exam_1.tex rose_exam_traversals_1.tex

# DQ (3/4/2009): Removed requirements.tex since it is not longer used.
# requirements.tex

roseDirectoryMap.pdf: Makefile
#	$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='CVS\|\.svn\|autom4te.cache\|developersScratchSpace\|testDoxygen\|ckpt\|compass' --basename -o=roseDirectoryMap.ps;
#	$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='\.git\|acmacros\|autom4te.cache\|docs\|libltdl\|scripts' --basename -o=roseDirectoryMap.ps;
	$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='acmacros\|projects' --basename -o=roseDirectoryMap.ps;
#	convert -geometry 5000 roseDirectoryMap.ps roseDirectoryMap.pdf
	w=`grep '^%%BoundingBox: [0-9]' roseDirectoryMap.ps | awk '{print $$4*10;}'` ; \
	h=`grep '^%%BoundingBox: [0-9]' roseDirectoryMap.ps | awk '{print $$5*10;}'` ; \
	ps2pdf -g$${w}x$${h} roseDirectoryMap.ps roseDirectoryMap.pdf

roseSrcDirectoryMap.png: Makefile
#	$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='CVS\|\.svn\|autom4te.cache\|developersScratchSpace\|testDoxygen\|ckpt\|compass' --basename -o=roseDirectoryMap.ps;
#	$(top_srcdir)/scripts/lsdot $(top_srcdir) --format=ps --exclude='\.git\|acmacros\|autom4te.cache\|docs\|libltdl\|scripts' --basename -o=roseDirectoryMap.ps;
	$(top_srcdir)/scripts/lsdot $(top_srcdir)/src --format=png --exclude='3rdPartyLibraries\|ROSETTA\|EDG_4.4\|EDG_4.7\|EDG_4.8' --basename -o=roseSrcDirectoryMap.png;
#	convert -geometry 5000 roseDirectoryMap.ps roseDirectoryMap.pdf
#	w=`grep '^%%BoundingBox: [0-9]' roseDirectoryMap.ps | awk '{print $$4*10;}'` ; \
#	h=`grep '^%%BoundingBox: [0-9]' roseDirectoryMap.ps | awk '{print $$5*10;}'` ; \
#	ps2pdf -g$${w}x$${h} roseDirectoryMap.ps roseDirectoryMap.pdf

if USE_ROSE_IN_BUILD_TREE_VAR
SET_ROSE_IN_BUILD_TREE=env ROSE_IN_BUILD_TREE=$(top_builddir)
else
SET_ROSE_IN_BUILD_TREE=
endif

#	Generate output from the --help commandline option for use in documentation
roseHelpOutput.txt:
	if (test -x $(top_builddir)/src/testSharedRoseLib); then \
	  env ROSE_IN_BUILD_TREE=$(top_builddir) $(top_builddir)/src/testSharedRoseLib --help >& roseHelpOutput.txt; \
	  $(SET_ROSE_IN_BUILD_TREE) $(top_builddir)/src/testSharedRoseLib --help >& roseHelpOutput.txt; \
	else \
	  echo "--help option output is not available (build ROSE, then rebuild documentation)." > roseHelpOutput.txt; \
	fi;

#	Generate sample output for inclusion into documentation
roseCommandline.txt:
	echo "exampleTranslator roseTestProgram.C" >& roseCommandline.txt;

# Generate an example of the output from running a test program
roseExecutionOutput.txt:
	if (test -x $(top_builddir)/src/testSharedRoseLib); then \
	  $(SET_ROSE_IN_BUILD_TREE) $(top_builddir)/src/testSharedRoseLib $(__minimal_input_code) >& roseExecutionOutput.txt; \
	else \
	  echo "Execution output is not available (build ROSE, then rebuild documentation)." > roseExecutionOutput.txt; \
	fi;

roseConfigureOptions.txt: $(top_srcdir)/configure
	if test -x $(top_srcdir)/configure; then \
	   $(top_srcdir)/configure --help >& roseConfigureOptions.txt; \
	else \
	   echo "Execution output is not available (build ROSE, then rebuild documentation)." > roseConfigureOptions.txt; \
	fi
# Build smaller versions of this file (so it fits onto two separate pages)
	split -80 roseConfigureOptions.txt roseConfigureOptions.

latexDependences = \
     roseDirectoryMap.pdf \
     roseHelpOutput.txt \
     roseCommandline.txt \
     roseExecutionOutput.txt \
     roseConfigureOptions.txt \
     rosePlatformPrerequisites.txt \
     rosePlatformConfigureOptions.txt

# website contents
html-local: $(RoseDoxygenDocumentation) $(PACKAGE_NAME)-$(PACKAGE_VERSION)-HTML-Docs.tar.gz

footer.html: footer.html.in
leftmenu.html: leftmenu.html.in

# Liao, 6/11/2008. Added a new directory (Projects) for various ROSE projects 
# compass_build_tooldir=$(top_builddir)/projects/compass/tools
#COMPASS_MANUAL = $(compass_build_tooldir)/compass/doc/compass.pdf
#$(COMPASS_MANUAL):
#	cd $(compass_build_tooldir)/compass/doc && $(MAKE) docs

# Liao, 8/11/2009. QROSE Manual
QROSE_MANUAL = $(top_srcdir)/src/3rdPartyLibraries/qrose/docs/QROSE.pdf

HASKELLPORT_APIDOCS = $(top_builddir)/projects/haskellport/dist/doc/html/rose
$(HASKELLPORT_APIDOCS):
	$(MAKE) -C$(top_builddir)/projects/haskellport docs

# DQ (9/15/2009): This appears to be a problem for Mac OSX
RoseQtDoc:
if !OS_MACOSX
	@echo "Skipping doxygen processing of roseQtWidgets.doxygen (failing in OSX)"
#	$(DOXYGEN) roseQtWidgets.doxygen
endif
# Liao, 2014/1/10, comment out $(HASKELLPORT_APIDOCS) to migrate to EDG 4.7 based rose
make-web-pages: $(RoseDoxygenDocumentation) $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf ROSE_InstallationInstructions.pdf ROSE_Exam.pdf ROSE_DeveloperInstructions.pdf ROSE_DemoGuide.pdf footer.html leftmenu.html RoseQtDoc
	cd Tutorial; $(MAKE) make-web-pages
	mkdir -p ROSE_WebPages
	mkdir -p ROSE_WebPages/ROSE_HTML_Reference;
	cp -f $(srcdir)/compass_rose.gif ROSE_WebPages/compass_rose.gif
	cp -f $(srcdir)/header.html ROSE_WebPages/header.html
	cp -f leftmenu.html ROSE_WebPages/leftmenu.html
	cp -f footer.html ROSE_WebPages/footer.html
	cp -f $(srcdir)/rose.html ROSE_WebPages/rose.html
	cp -f $(srcdir)/rose.html ROSE_WebPages/index.html
	cp -f $(srcdir)/projects.html ROSE_WebPages/projects.html
	cp -f $(srcdir)/FAQ.html ROSE_WebPages/FAQ.html
	cp -f $(srcdir)/documents.html ROSE_WebPages/documents.html
	cp -f $(srcdir)/highlights.html ROSE_WebPages/highlights.html
	cp -f $(srcdir)/news.html ROSE_WebPages/news.html
	cp -f $(srcdir)/regressionTest.html ROSE_WebPages/regressionTest.html
#	cp -f $(COMPASS_MANUAL) ROSE_WebPages/
	cp -f $(QROSE_MANUAL) ROSE_WebPages/
#	mkdir -p ROSE_WebPages/ROSE_HaskellAPI
#	cp -fr $(HASKELLPORT_APIDOCS)/* ROSE_WebPages/ROSE_HaskellAPI/
	cp -fr $(srcdir)/powerpoints ROSE_WebPages/
	cp -f ROSE_InstallationInstructions.pdf ROSE_WebPages/ROSE_InstallationInstructions.pdf
	cp -f ROSE_Exam.pdf ROSE_WebPages/ROSE_Exam.pdf
	cp -f ROSE_DeveloperInstructions.pdf ROSE_WebPages/ROSE_DeveloperInstructions.pdf
	cp -f ROSE_DemoGuide.pdf ROSE_WebPages/ROSE_DemoGuide.pdf
	mkdir -p ROSE_WebPages/ROSE_UserManual
	cp -f $(srcdir)/WEB_DOCS_README ROSE_WebPages
	cp -f $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf ROSE_WebPages/ROSE_UserManual/$(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf
# add a copy without version number as a permanent URL for external reference by 
# https://outreach.scidac.gov/docman/index.php?group_id=24&selected_doc_group_id=29&language_id=1
	cp -f $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf ROSE_WebPages/ROSE_UserManual/ROSE-UserManual.pdf

# Upload web pages to the LBL server 
copyWebPages: make-web-pages
#       Liao 5/6/2010 migrate to the new web server
#	Liao, 7/13/2009, must ensure the file permissions here
#	Liao, 12/8/2010, use dedicated data transferring node dtn01 
	cd ROSE_WebPages; chmod -R a+rx *; rsync -avz * liaoch@dtn01.nersc.gov:/project/projectdirs/rosecompiler/www.rosecompiler.org
#	cd ROSE_WebPages; chmod -R a+rx *; rsync -avz * liaoch@portal-auth.nersc.gov:/project/projectdirs/rosecompiler/www.rosecompiler.org
#	cd ROSE_WebPages; chmod -R a+rx *; rsync -avz * liaoch@web-dev.nersc.gov:/www/host/rosecompiler
#	scp $(PACKAGE_NAME)-$(PACKAGE_VERSION)-HTML-Docs.tar.gz quinlan1@cmg-1.llnl.gov:/green_dev/www/casc/rose

# Liao 12/7/2009, we mirror the content of the internal 
# /nfs/casc/overture/ROSE/git/ROSE_EDG_Binaries
# to a public http://www.rosecompiler.org/edg_binaries/
EDG_BINARY_STASH_PATH=/nfs/casc/overture/ROSE/git/ROSE_EDG_Binaries
# *.tar.gz within rsync is essential to only synchronize .tar.gz files.
# scripts/hudson/checkEDGBinaryFiles.sh untars all .tar.gz and grep for EDG files, it returns an error code 
# if any EDG source files are found
syncEDGBinaries:
	test -d ${EDG_BINARY_STASH_PATH} && $(top_srcdir)/scripts/hudson/checkEDGBinaryFiles.sh && \
	rsync -avz /nfs/casc/overture/ROSE/git/ROSE_EDG_Binaries/*.tar.gz -e ssh liaoch@web-dev.nersc.gov:/www/host/rosecompiler/edg_binaries \
	|| echo "${EDG_BINARY_STASH_PATH} does not exist, this rule can only run from within LLNL! "

copyWebPagesPanas: make-web-pages
	cd ROSE_WebPages; rsync -avz * panas2@web-dev.nersc.gov:/www/host/rosecompiler

$(PACKAGE_NAME)-$(PACKAGE_VERSION)-HTML-Docs.tar.gz: make-web-pages
	tar -zcf $(PACKAGE_NAME)-$(PACKAGE_VERSION)-HTML-Docs.tar.gz ROSE_WebPages

if ROSE_USE_GRAPHVIZ_DOT
# Simpler rule to build pdf documentation (requires GraphViz's dot program)
latex-docs: pdf
else
# Alternative documentation rule to output error message and exit with error.
latex-docs:
	echo "Error: GraphViz's dot program is not available, no latex-based documentation can be built."
	exit 1
endif

# simpler target for building manual only
manual: $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf

# DQ (1/4/2010): Make these separate steps (each takes a few seconds and this simplifies the debugging).
# pdf-local: $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf ROSE_InstallationInstructions.pdf ROSE_DeveloperInstructions.pdf ROSE_DemoGuide.pdf 
pdf-local:
	$(MAKE) $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf || exit 1
	$(MAKE) ROSE_InstallationInstructions.pdf || exit 1
	$(MAKE) ROSE_Exam.pdf || exit 1
	$(MAKE) ROSE_DeveloperInstructions.pdf || exit 1
	$(MAKE) ROSE_DemoGuide.pdf || exit 1

# DQ (9/9/2009): Added generated list of NMI compile farm platform prerequisites for ROSE documentation (ROSE_InstallationInstructions.pdf)
rosePlatformPrerequisites.txt:
	cd $(top_srcdir)/scripts/nmiBuildAndTestFarm/build_configs; grep -r PREREQS * | grep -v svn | grep minimal_default | grep -v minimal_default~ | grep -v "#" | sed 's/\/minimal_default:PREREQS=/ : /' >& rosePlatformPrerequisites.txt
	mv $(top_srcdir)/scripts/nmiBuildAndTestFarm/build_configs/rosePlatformPrerequisites.txt .

# DQ (9/29/2009): Added generated list of NMI compile farm platform configure options for ROSE documentation (ROSE_InstallationInstructions.pdf)
rosePlatformConfigureOptions.txt:
	cd $(top_srcdir)/scripts/nmiBuildAndTestFarm/build_configs; grep -r CONFIGURE_OPTIONS * | grep -v svn | grep minimal_default | grep -v minimal_default~ | grep -v "#" | sed 's/\/minimal_default:CONFIGURE_OPTIONS=/ : /' >& rosePlatformConfigureOptions.txt
	mv $(top_srcdir)/scripts/nmiBuildAndTestFarm/build_configs/rosePlatformConfigureOptions.txt .

ROSE_InstallationInstructions.pdf: $(latexFiles) $(latexDependences) ROSE_InstallationInstructions.tex
	($(PDFLATEX) ROSE_InstallationInstructions.tex && \
	$(PDFLATEX) ROSE_InstallationInstructions.tex && \
	$(PDFLATEX) ROSE_InstallationInstructions.tex) || exit 1;

ROSE_Exam.pdf: $(latexFiles) $(latexDependences) ROSE_Exam.tex rose_exam_1.tex rose_exam_traversals_1.tex
	($(PDFLATEX) ROSE_Exam.tex && \
	$(PDFLATEX) ROSE_Exam.tex && \
	$(PDFLATEX) ROSE_Exam.tex) || exit 1;

ROSE_DeveloperInstructions.pdf: $(latexFiles) $(latexDependences) ROSE_DeveloperInstructions.tex
	($(PDFLATEX) ROSE_DeveloperInstructions.tex && \
	$(PDFLATEX) ROSE_DeveloperInstructions.tex && \
	$(PDFLATEX) ROSE_DeveloperInstructions.tex) || exit 1

# DQ (1/18/2009): Added support for demo guide to support running and 
# presenting information from demos of different parts of ROSE.
ROSE_DemoGuide.pdf: $(latexFiles) $(latexDependences) ROSE_DemoGuide.tex
	($(PDFLATEX) ROSE_DemoGuide.tex && \
	$(PDFLATEX) ROSE_DemoGuide.tex && \
	$(PDFLATEX) ROSE_DemoGuide.tex) || exit 1


# Liao, 10/21/2009, run external tests before making manual
# I do this to avoid duplicated test/translator file in both tests and doc directories
# for ROSE manual: it needs generated files from OpenMP and UPC test directories
generated_ompLowering_files_for_manual = \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/rose_hello-1.c \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/rose_parallel-reduction.c \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/rose_ompfor.c \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/rose_ompfor5.c \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/rose_ompfor4.c \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/rose_threadprivate.c \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/rose_task_untied3.c \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/rose_task_wait.c \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/fortran/rose_helloworld.f \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/fortran/rose_shared.f \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/fortran/rose_ompdo-default.f \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/fortran/rose_ompdo-multiple.f \
       $(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests/fortran/rose_task_largenumber.f

generated_upcCompile_files_for_manual = \
       $(top_builddir)/tests/nonsmoke/functional/CompileTests/UPC_tests/rose_hello.upc \
       $(top_builddir)/tests/nonsmoke/functional/CompileTests/UPC_tests/rose_consistency.upc \
       $(top_builddir)/tests/nonsmoke/functional/CompileTests/UPC_tests/rose_continue.upc \
       $(top_builddir)/tests/nonsmoke/functional/CompileTests/UPC_tests/rose_affinity.upc \
       $(top_builddir)/tests/nonsmoke/functional/CompileTests/UPC_tests/rose_shared.upc.aa \
       $(top_builddir)/tests/nonsmoke/functional/CompileTests/UPC_tests/rose_shared.upc.ab \
       $(top_builddir)/tests/nonsmoke/functional/CompileTests/UPC_tests/rose_lock.upc

$(generated_ompLowering_files_for_manual):
	$(MAKE) -C$(top_builddir)/tests/nonsmoke/functional/roseTests/ompLoweringTests check

$(generated_upcCompile_files_for_manual):
	$(MAKE) -C$(top_builddir)/tests/nonsmoke/functional/CompileTests/UPC_tests check

generated_files_for_manual = \
	$(generated_ompLowering_files_for_manual) \
	$(generated_upcCompile_files_for_manual)

# DQ (7/25/2004): Need to include manual.tex and reference.tex since they are build from 
# manual.tex.in and reference.tex.in
#
$(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf: $(generated_files_for_manual) manual.tex gettingStarted.tex $(latexFiles) $(latexDependences)
	$(PDFLATEX) manual.tex && \
	$(PDFLATEX) manual.tex && \
	$(PDFLATEX) manual.tex && \
	cp -f manual.pdf $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf

#$(PDFLATEX) manual.tex) || exit 1 &&
#$(PDFLATEX) manual.tex &&
#docs: html-docs latex-docs
# docs: latex-docs html-docs 
# DQ (1/4/2010): To simplify the debugging, make these separate steps.
docs:
	@echo "Build the LaTeX documentation first (should build quickly)"
	$(MAKE) latex-docs || exit 1;
	@echo "Build the HTML documentation second (should take a while because doxygen takes a while)"
	$(MAKE) html-docs  || exit 1;
	@echo "Done building the ROSE documentation (both LaTeX and HTML docs)"

html-docs: html

EXTRA_DIST = CMakeLists.txt \
   WEB_DOCS_README \
   sage.cfg.in rose.cfg.in roseQtWidgets.doxygen.in \
   fixme.sty  acknowledgments.tex bothlevel.c \
   bibliography.tex  examples.tex fd-docs.tex overviewOfRose.tex pre-docs.tex loopTransformDoc.tex  \
   mm.tex preprocessorDesign.tex tridvpk.tex writingYourFirstTranslator.tex appendix.tex \
   developersAppendix.tex designOfRose.tex  FAQ.tex FAQ-Binary.dox glossary.tex introduction.tex lu.tex \
   preface.tex rose-processing-phases.pdf compass_rose.gif SageIII.tex QueryLibrary.tex \
   AstRewrite.tex ProgramAnalysis.tex AstProcessing.tex testing.tex astMerge.tex installRose.tex \
   roseExecutionOutput.txt roseHelpOutput.txt asm_code_samples_gcc.pdf introduction_start.tex \
   rose_exam_1.tex rose_exam_traversals_1.tex git_collaboration_diagram.pdf \
   HowToDocument.dox Attributes.dox

# DQ (3/4/2009): Removed requirements.tex since it is not longer used.
# requirements.tex

clean-web-pages:
#	DQ (9/15/2009): wrong syntax for chmod, at least on OSX.
#	test ! -d ROSE_WebPages || (test -d ROSE_WebPages && ( chmod +w -R ROSE_WebPages ))
	test ! -d ROSE_WebPages || (test -d ROSE_WebPages && ( chmod -R +w ROSE_WebPages ))
	rm -rf ROSE_WebPages

clean-local: clean-web-pages

CLEANFILES = roseDoxygen.tags SageIntermediateForm *.log *.aux *.dvi \
	     AstProcessing AstRewrite *.gz a.out roseDirectoryMap.ps roseDirectoryMap.pdf \
	     manual.pdf $(PACKAGE_NAME)-$(PACKAGE_VERSION)-UserManual.pdf \
        ROSE_InstallationInstructions.pdf ROSE_Exam.pdf \
	     rose.cfg roseCommandline.txt roseConfigureOptions* roseExecutionOutput.txt \
	     roseHelpOutput.txt rose_roseTestProgram.C roseTestProgram.C sage.cfg \
	     $(PACKAGE_NAME)-$(PACKAGE_VERSION)-HTML-Docs.tar.gz footer.html \
	     leftmenu.html rosePlatformPrerequisites.txt \
        rosePlatformConfigureOptions.txt

.PHONY :generated_files_for_manual generated_ompLowering_files_for_manual generated_autoPar_files_for_manual generated_upcCompile_files_for_manual generated_upcTrans_files_for_manual
