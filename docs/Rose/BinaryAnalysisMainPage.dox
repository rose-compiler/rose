// -*- c++ -*-

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The documentation in this file will appear on the main page generated by Doxygen (i.e., index.html). As such, it should describe
// the ROSE project in general, and contain things that are applicable across all parts of the ROSE project (the library, tools,
// examples, tests, etc.).  Documentation that's specific to the ROSE library should be attached to the ::Rose namespace.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/** @mainpage notitle
 *
 *  @note This documentation is intentionally incomplete. We plan to extend and improve it as we review and fix existing
 *  documentation.  Therefore, one should read this documentation in conjunction with the developer-oriented API documentation
 *  hosted at [Rose Compiler](http://rosecompiler.org).
 *
 *  @section mainpage_intro The ROSE library
 *
 *  The ROSE compiler infrastructure provides an open-source library that users can use to build tools that analyze and transform
 *  large-scale programs. These tools use the ROSE library to perform static analysis, program and domain-specific optimizations,
 *  arbitrary transformations, cyber-security checks, and more.  The library can analyze and transform source code written in C,
 *  C++, UPC, Fortran, OpenMP, Java, Python, Ada, Jovial, or PHP, and it can analyze binaries that employ the Intel x86, PowerPC,
 *  ARM, MIPS, M68k, JVM, or CIL instruction sets.
 *
 *  In prose, one spells ROSE in all capital letters. The ROSE naming conventions dictate the use of PascalCase for namespaces and
 *  types, and kebab-case for command lines, thus one spells the main @ref Rose "namespace" "Rose" and command-line tools use
 *  "rose".
 *
 *  @section mainpage_audience Audience
 *
 *  This documentation is intended for users who write ROSE-based analysis or transformation tools that link with an installed
 *  version of the ROSE library. This document places an emphasis on parts of the ROSE library particularly suited to binary
 *  analysis. The ROSE core developers have other developer-specific documentation available to them.
 *
 *  Some goals of this documentation:
 *
 *  @li To document all library entities in a way that users find useful. In other words, we strive to provide complete and correct
 *  documentation.
 *
 *  @li To exclude entities that users who write tools don't find useful. In other words, we exclude documentation for entities
 *  that serve only an internal purpose.
 *
 *  @li To exclude undocumented entities. All entities have names and we strive for names that clearly convey the entity's
 *  purpose. However, a name by itself, no matter how well chosen, does not provide complete documentation and can mislead a user.
 *  Excluding undocumented entities has the added benefit of encouraging their authors to write more adequate documentation.
 *
 *  @li To exclude entities that do not yet follow ROSE's naming conventions. Such entities not only confuse users by being
 *  exceptions to a rule, but their inclusion in the documentation encourages the ROSE core team to continue to violate the ROSE
 *  naming conventions.
 *
 *  @li To generate the consumable documentation formats (e.g., HTML) without any warnings or errors. Experience shows that when
 *  we tolerate warnings they accumulate until it becomes painful for a conscientious author to maintain correct documentation.
 *
 *  @section mainpage_naming Naming conventions
 *
 *  @subsection mainpage_naming_namespaces The Rose namespace
 *
 *  All parts of the ROSE library exist inside the @ref Rose namespace. ROSE does include some third-party libraries that use other
 *  top-level namespaces, such as @ref Sawyer. Entities used to analyze binaries exist inside the @ref Rose::BinaryAnalysis
 *  namespace.  The ROSE naming convention requires that namespaces use [PascalCase](https://en.wikipedia.org/wiki/Camel_case),
 *  which is why we spell the top-level namespace "Rose" instead of "ROSE".
 *
 *  @note At this time, many ROSE library symbols pollute the root namespace or appear in other non-Rose namespaces. These violate
 *  the naming convention and we plan to eventually rename them. As such, with a few exceptions, they do not appear in this
 *  document.
 *
 *  @subsection mainpage_naming_capitalization Capitalization of C++ symbols
 *
 *  Namespaces and types (e.g., classes) that are part of the ROSE public API use
 *  [PascalCase](https://en.wikipedia.org/wiki/Camel_case); macros begin with the string "ROSE_" and use uppercase letters with
 *  words separated by underscores; everything else that's part of the public API uses lower camel case (a.k.a., dromedary case).
 *
 *  We usually spell out acronyms and abbreviations in full unless they are extremely common in the ROSE source code and in standard
 *  use in the compiler field. When we use acronyms and abbreviations, we treat them as words for the purpose of capitalization in
 *  C++ symbols, except that API, AST, CFG, and IO are all upper-case when they appear *alone* as a C++ symbol. For instance, the
 *  correct spelling for a function that converts an AST to a PDF is "astToPdf", not "ASTToPDF".
 *
 *  @note At this time, many symbols in the ROSE public API violate this convention by using inconsistent capitalization and/or word
 *  separation. We continue to exclude many of them from this documentation until we fix them.
 *
 *  @subsection mainpage_headers Header files
 *
 *  The ROSE build system installs header files with path names that mirror the namespace hierarchy. The user should include these
 *  headers using `@#include <Rose/....h>`. The base names of public include files match the C++ symbol they primarily define and
 *  always end with a ".h" extension. Base names and path components use the same capitalization as the C++ symbols (described
 *  above). For instance, one includes the header file for the @ref Rose::CommandLine::SelfTest class as `@#include
 *  <Rose/CommandLine/SelfTest.h>`.  To support file systems that are not POSIX compliant with regard to case sensitivity, no ROSE
 *  include directory ever contains two header files whose names are identical when converted to lower case.
 *
 *  Each namespace has a header file that recursively includes all header files under that namespace. Although users find this
 *  convenient, the ROSE library itself does not include these namespace headers into its own compilation units because doing so
 *  can substantially increase build times.
 *
 *  Each namespace also has a header file named "BasicTypes.h" that declares entities that other header files find most useful.
 *  They mostly declare class names (forward class declarations) and incomplete shared pointer types (names ending with
 *  "Ptr"), but may also declare commonly used constants, enums, small classes, etc. The "BasicTypes.h" header files recursively
 *  include all "BasicTypes.h" header files for child namespaces.
 *
 *  One can include ROSE header files in any order. Including the same header file more than once has no ill effect since all header
 *  files contain include-once guards. We strive to make header files deterministic, idempotent, specific, and minimally dependent
 *  on other headers.
 *
 *  @note Many ROSE header files violate one or more of these policies and might not appear in this documentation until we fix
 *  them. In particular, some headers depend on a prior inclusion of "rose.h", and this practice contributes negatively to
 *  compilation times.
 *
 *  @note The "Rose.h" namespace header does not yet exist. Eventually it will replace the "rose.h" header file that currently has
 *  a somewhat similar purpose--to recursively include all ROSE header files.
 *
 *  @if rosedoc2024
 *  @note This documentation may refer to headers under an "AstNodes" directory. These headers serve as inputs to the Rosebud code
 *  generation system for AST node types and users should include them without the path.  For instance, if the documentation
 *  mentions "AstNodes/BinaryAnalysis/SgAsmInstruction.h", the user should include "SgAsmInstruction.h" instead.
 *  @endif
 *
 *  @section mainpage_binaryanalysis Binary analysis
 *
 *  Although ROSE has historically emphasized source code analysis and source-to-source transformations, binary analysis has become
 *  an important part of the ROSE ecosystem.  Binary analysis progresses by ingesting low-level, non-human oriented code like
 *  machine code and byte code from executables, libraries, and memory dumps; parsing it and decoding its instructions; analyzing
 *  those instructions; and unparsing to more human-consumable formats like assembly listings.
 *
 *  The ROSE library locates all binary analysis under the @ref Rose::BinaryAnalysis namespace, and that page should be your
 *  next stop in this journey.
 *
 *  @section mainpage_resources Other resources
 *
 *  ROSE comes with a number of binary analysis tools, some useful and some that intend to demonstrate a particular capability. We
 *  make additional tools available to collaborators and sponsors in separate, private repositories. All of these tools understand
 *  a "--help" command-line switch to show their manpage-style documentation, some of which is quite extensive.
 *
 *  One can find the full, developer-oriented API documentation, including stubs for undocumented entities, at
 *  [ROSECompiler.org](http://rosecompiler.org).
 *
 *  [GitHub](https://github.com/rose-compiler/rose) hosts the source code and installation instructions for external
 *  users. Internal developers should use the team's [internal GitLab](https://rosecompiler2.llnl.gov/gitlab) deployment.
 *
 *  @section mainpage_generation Documentation generation
 *
 *  The [Doxygen](https://www.doxygen.nl) tool generated this document on the date shown on the bottom of this page for the ROSE
 *  version shown at the top of this page. You can generate a local copy of this documentation by running the
 *  `generate-api-documentation` found in the "scripts" directory at the top of the ROSE source code. You should use Doxygen version
 *  1.9 or later. */
