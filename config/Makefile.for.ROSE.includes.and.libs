# These definitions are for the benefit of independent software contained			-*- makefile -*-
# in ROSE.  (Currently, this means SAGE and ROSETTA.)
# It defines ROSE_INCLUDES and ROSE_LIBS so they can use the ROSE codes.

# ROSE_INCLUDES contains the include flags for compiling with ROSE code.
# (ROSE software should set the include paths in their respective Makefile.am
# files, since they are expected to know the ROSE source tree structure.)
# To use ROSE_INCLUDES, the independent software packages contained in ROSE
# should define the variable ROSE_HOME to be the relative path to the root
# of the ROSE directory tree.

# This fixes some problem caused by automake or autoconf
# (detailed documentation is in the ChangeLog)
# MAKE=gmake

# DQ (8/10/2007): Valentin suggested this be commented out.
# DQ (4/23/2006): This is the default when build using automake version 1.6.3 but it
# causes errors so we would like to specify --run automake instead
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake-1.6
# AUTOMAKE = ${SHELL} $(top_srcdir)/config/missing --run automake

# force ranlib to just call touch so that *.so (dynamic libraries) will not
# be run with ranlib (which is a error).  This allows us to use dynamic
# libraries as the default within ROSE.
# JJW 7/25/2008: Do we really need this?
## RANLIB = touch

# JJW (2/25/2008): set a flag (only used when running ROSE applications) to
# have them run using the build tree rather than the install tree -- this is
# important for "make check" in an uninstalled copy of ROSE.
if USE_ROSE_IN_BUILD_TREE_VAR
export ROSE_IN_BUILD_TREE=$(top_builddir)
endif

# DQ (12/22/2008): Specification of Boost path for use with "-isystem" option (may be GNU
# specific).  We use this option only if the configuration of ROSE has detected a
# previously installed version of Boost (which we do not want to use).
# Note that only one of these will be non-empty makefile variables.
ROSE_BOOST_PREINCLUDE_PATH        = @ROSE_BOOST_PREINCLUDE_PATH@
ROSE_BOOST_NORMAL_INCLUDE_PATH    = @ROSE_BOOST_NORMAL_INCLUDE_PATH@

# SQLite is a simpler database to use than MySQL
if ROSE_USE_SQLITE_DATABASE
   ROSE_SQLITE_DATABASE_INCLUDE  = $(SQLITE3_CFLAGS)
   SQLITE_DATABASE_INCLUDE       = $(SQLITE3_CFLAGS) -I$(top_srcdir)/src/roseExtensions/sqlite3x
   SQLITE_DATABASE_LIBS          = $(SQLITE3_LDFLAGS)
#   ROSE_SQLITE_DATABASE_OBJS     = $(top_builddir)/src/roseExtensions/sqlite3x/*o
   ROSE_SQLITE_DATABASE_LIB_NAME = RoseSQLite3xDatabase
   ROSE_SQLITE_DATABASE_LIB_FILE = lib$(ROSE_SQLITE_DATABASE_LIB_NAME).la
   ROSE_SQLITE_DATABASE_LIBS     = -l$(ROSE_SQLITE_DATABASE_LIB_NAME)

   ROSE_SIDEEFFECT_INCLUDE						 = -I$(top_srcdir)/src/midend/programAnalysis/sideEffectAnalysis
endif

if ROSE_HAVE_LIBZ3
  Z3_LIB_NAME = z3
  Z3_LIB_FILE = lib$(Z3_LIB_NAME).so
  Z3_LIBS = -l$(Z3_LIB_NAME)

  Z3_INCLUDES = -I$(Z3_PREFIX)/include
  Z3_LIB_INCLUDES = -L$(Z3_PREFIX)/lib

  # The previous "Z3_*" variables should have been named "ROSE_Z3_*" following the pattern in the rest of this
  # makefile. I don't want to break code that uses the wrong names, so I'll just add the correct ones. [Matzke 2017-10-17]
  ROSE_Z3_INCLUDES = -I@ROSE_Z3_PREFIX@/include
  ROSE_Z3_LIBS = -lz3
  ROSE_Z3_LIBS_WITH_PATH = -L@ROSE_Z3_PREFIX@/lib -lz3
endif

# This is properly handled by automake even when specified in an include file
EDG_LIBS = @EDG_LIBS@

RT_LIBS = @RT_LIBS@

VALGRIND_BINARY = @VALGRIND_BINARY@

# Conditional support for Gabriel's QRose GUI Library
if ROSE_USE_QT
#  ROSE_GUI_INCLUDE =   -I${QROSE_PREFIX}/include
  ROSE_GUI_INCLUDE =  -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/Common -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/TreeBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/QueryBox -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Components/SourceBox

# ROSE_GUI_LIBS = -lqrose
#  ROSE_GUI_LIBS_WITH_PATH = -L${QROSE_PREFIX}/lib -lqrose
#  ROSE_GUI_LIBS_WITH_PATH =  -L${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/  -lqrose
   ROSE_GUI_LIBS_WITH_PATH = ${top_builddir}/src/3rdPartyLibraries/qrose/QRoseLib/libqrose.la

# ROSE_GUI_LIB_FILE = libqrose.a
endif

if ROSE_USE_QT
  ROSE_QT_INCLUDE = $(QT_INCLUDES)
# ROSE_QT_LIBS = -lqt
  ROSE_QT_LIBS_WITH_PATH = ${QT_LDFLAGS}
# ROSE_QT_LIB_FILE = libqt.a
endif

# ROSE-HPCToolkit module
if ROSE_BUILD_ROSEHPCT
  ROSE_ROSEHPCT_INCLUDES = -I$(top_srcdir)/src/roseExtensions/roseHPCToolkit/include
  ROSE_ROSEHPCT_LIBS = -lrosehpct
  ROSE_ROSEHPCT_LIBS_WITH_PATH = $(top_builddir)/src/roseExtensions/roseHPCToolkit/src/librosehpct.la
# ROSE_ROSEHPCT_LIB_FILE = librosehpct.so
endif

# ROSE-YICES Package (destributed by SRI as a static library)
if ROSE_HAVE_LIBYICES
  ROSE_YICES_INCLUDES = -I@ROSE_YICES_PREFIX@/include
  ROSE_YICES_LIBS = -lyices
  ROSE_YICES_LIBS_WITH_PATH = @ROSE_YICES_PREFIX@/lib/libyices.a
endif

# YAML-CPP package for parsing YAML/JSON files
if ROSE_HAVE_YAMLCPP
  ROSE_YAMLCPP_INCLUDES = -I@ROSE_YAMLCPP_PREFIX@/include
  ROSE_YAMLCPP_LIBS = -lyaml-cpp
  ROSE_YAMLCPP_LIBS_WITH_PATH = -L@ROSE_YAMLCPP_PREFIX@/lib -lyaml-cpp
endif

# GNU readline
if ROSE_WITH_LIBREADLINE
  ROSE_READLINE_INCLUDES = -I@LIBREADLINE_INCLUDE_PATH@
  ROSE_READLINE_LIBS = @LIBREADLINE_LIBS@
  ROSE_READLINE_LIBS_WITH_PATH = -L@LIBREADLINE_LIBRARY_PATH@ $(ROSE_READLINE_LIBS)
endif

# libmagic for identifying file types based on magic numbers
if ROSE_HAVE_LIBMAGIC
  ROSE_LIBMAGIC_INCLUDES = -I@ROSE_LIBMAGIC_PREFIX@/include
  ROSE_LIBMAGIC_LIBS = -lmagic
  ROSE_LIBMAGIC_LIBS_WITH_PATH = -L@ROSE_LIBMAGIC_PREFIX@/lib -lmagic
endif

# PostgreSQL C++ API
if ROSE_HAVE_LIBPQXX
  ROSE_LIBPQXX_INCLUDES = -I@ROSE_LIBPQXX_PREFIX@/include
  ROSE_LIBPQXX_LIBS = -lpqxx -lpq
  ROSE_LIBPQXX_LIBS_WITH_PATH = -L@ROSE_LIBPQXX_PREFIX@/lib -lpqxx -lpq
endif

# Capstone disassembler
if ROSE_HAVE_CAPSTONE
  ROSE_CAPSTONE_INCLUDES = -I@ROSE_CAPSTONE_PREFIX@/include
  ROSE_CAPSTONE_LIBS = -lcapstone
  ROSE_CAPSTONE_LIBS_WITH_PATH = -L@ROSE_CAPSTONE_PREFIX@/lib -lcapstone
endif

# Math algorithms from http://dlib.net.
if ROSE_HAVE_DLIB
  ROSE_DLIB_INCLUDES = -I@DLIB_PREFIX@/include
  ROSE_DLIB_LIBS = -ldlib
  ROSE_DLIB_LIBS_WITH_PATH = -L@DLIB_PREFIX@/lib -ldlib
endif

# DQ (11/4/2016): Adding support for use of Address Sanitizer (for where the ROSE Test Handler (RTH) is used.
# Note the quotes and escapes that are required:
# ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=halt_on_error=0:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"
ADDRESS_SANITIZER_OPTIONS = "ASAN_OPTIONS=halt_on_error=0:symbolize=1:detect_leaks=1 ASAN_SYMBOLIZER_PATH=\`which llvm-symbolizer\`"

# DQ(11/4/2016): Need a version when not using the ROSE Test Handler (RTH):
NON_RTH_ADDRESS_SANITIZER_OPTIONS = ASAN_OPTIONS=halt_on_error=1:symbolize=1:detect_leaks=0 ASAN_SYMBOLIZER_PATH=`which llvm-symbolizer`

GLUT_LIBS = ${glut_path}

if ROSE_HAVE_LIBELF
  ROSE_ELF_INCLUDES = @LIBELF_CPPFLAGS@
  ROSE_ELF_LIBS_WITH_PATH = @LIBELF_LDFLAGS@
endif

# ROSE gcrypt support (for things like md5, sha1, etc)
if ROSE_HAVE_LIBGCRYPT
  ROSE_GCRYPT_INCLUDES = @LIBGCRYPT_CPPFLAGS@
  ROSE_GCRYPT_LIBS_WITH_PATH = @LIBGCRYPT_LDFLAGS@
endif

# ROSE-DWARF libdwarf support
if ROSE_HAVE_LIBDWARF
  ROSE_DWARF_INCLUDES = @LIBDWARF_CPPFLAGS@

if ROSE_USE_INTEL_PIN
# DQ (3/13/2009):
# If Dwarf is used with Intel Pin then reference the same copy of libdwarf.a (in the same
# directory).  However, it does NOT work to link both references to libdwarf into more
# than one dynamic (shared) library, so we need to link libdwarf dynamically.
# To avoid additional LD_LIBRARY_PATH requirements, we do so using rpath.
# To support this the libdwarf.so should be placed into $(INTEL_PIN_PATH)/intel64/lib-ext
# and the static libdwarf.a moved out (renamed) so that it will not be used.
# Note that this will also cause librose.so to use the shared library for
# dwarf when used with Intel Pin.
  ROSE_DWARF_LIBS_WITH_PATH = -L$(INTEL_PIN_PATH)/intel64/lib-ext -ldwarf -lelf
# DQ (3/14/2009): This factors the lib paths.
  INTEL_PIN_WITH_DWARF_LIBS_PATH = $(INTEL_PIN_LIB_PATHS) -lpin -lxed -ldl $(ROSE_DWARF_LIBS_WITH_PATH)
else
  ROSE_DWARF_LIBS_WITH_PATH = @LIBDWARF_LDFLAGS@ @LIBDWARF_LIBS@
endif
endif

# ROSE-WINE Package (Wine is a package to permit execution of Windows binaries under Linux)
if ROSE_USE_WINDOWS_ANALYSIS_SUPPORT
  ROSE_WINE_INCLUDES = -I$(wine_path)/include
endif

if ROSE_USE_PHP
  ROSE_PHP_INCLUDES = -I$(php_path)/include/phc -I$(php_path)/include/php
  ROSE_PHP_LIBS = -lphp5 -lphc -lltdl
  ROSE_PHP_LIBS_WITH_PATH = $(php_path)/lib/libphc.so $(php_path)/lib/libphp5.so $(LIBLTDL)
endif

# ASR (06/09/2010): adding llvm support variables
if ROSE_USE_LLVM
  ROSE_LLVM_INCLUDES = -I$(llvm_path)/include
  ROSE_LLVM_LIBS = -L$(llvm_path)/lib -lLLVMXCoreCodeGen -lLLVMXCoreAsmPrinter -lLLVMXCoreInfo -lLLVMSystemZCodeGen -lLLVMSystemZAsmPrinter -lLLVMSystemZInfo -lLLVMSparcCodeGen -lLLVMSparcAsmPrinter -lLLVMSparcInfo -lLLVMPowerPCCodeGen -lLLVMPowerPCAsmPrinter -lLLVMPowerPCInfo -lLLVMpic16passes -lLLVMPIC16AsmPrinter -lLLVMPIC16CodeGen -lLLVMPIC16Info -lLLVMMSP430CodeGen -lLLVMMSP430AsmPrinter -lLLVMMSP430Info -lLLVMMSIL -lLLVMMSILInfo -lLLVMMipsAsmPrinter -lLLVMMipsCodeGen -lLLVMMipsInfo -lLLVMMBlazeAsmPrinter -lLLVMMBlazeCodeGen -lLLVMMBlazeInfo -lLLVMLinker -lLLVMipo -lLLVMInterpreter -lLLVMInstrumentation -lLLVMJIT -lLLVMExecutionEngine -lLLVMCppBackend -lLLVMCppBackendInfo -lLLVMCellSPUCodeGen -lLLVMCellSPUAsmPrinter -lLLVMCellSPUInfo -lLLVMCBackend -lLLVMCBackendInfo -lLLVMBlackfinCodeGen -lLLVMBlackfinAsmPrinter -lLLVMBlackfinInfo -lLLVMBitWriter -lLLVMX86Disassembler -lLLVMX86AsmParser -lLLVMX86AsmPrinter -lLLVMX86CodeGen -lLLVMX86Info -lLLVMAsmParser -lLLVMARMAsmParser -lLLVMMCParser -lLLVMARMAsmPrinter -lLLVMARMCodeGen -lLLVMARMInfo -lLLVMArchive -lLLVMBitReader -lLLVMAlphaCodeGen -lLLVMSelectionDAG -lLLVMAlphaAsmPrinter -lLLVMAsmPrinter -lLLVMCodeGen -lLLVMScalarOpts -lLLVMInstCombine -lLLVMTransformUtils -lLLVMipa -lLLVMAnalysis -lLLVMTarget -lLLVMMC -lLLVMCore -lLLVMAlphaInfo -lLLVMSupport -lLLVMSystem

# adding all libraries for now

endif

# Python API support
if ROSE_USE_PYTHON_DEV
  ROSE_PYTHON_INCLUDES = @PYTHON_CPPFLAGS@
  ROSE_PYTHON_LIBS_WITH_PATH = @PYTHON_LDFLAGS@
endif

# SSL support permits use of MD5 checksums internally for binary library identification.
if ROSE_USE_SSL_SUPPORT
  ROSE_SSL_LIBS = -lssl -lcrypto
endif

# support for precompiled headers
if ROSE_PCH
  ROSE_PCH_INCLUDE = -Winvalid-pch -fPIC -DPIC
endif

if ROSE_USE_INTEL_PIN
  INTEL_PIN_PATH          = @IntelPin_path@
  INTEL_PIN_INCLUDE_PATHS = -I$(INTEL_PIN_PATH)/source/include -I$(INTEL_PIN_PATH)/source/include/gen -I$(INTEL_PIN_PATH)/extras/xed2-intel64/include -I$(INTEL_PIN_PATH)/source/tools/InstLib

# DQ (3/8/2009): These cause rose/src/testSharedRoseLib to fail, I don't know why (fails in system call to map()).
# INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib -L$(INTEL_PIN_PATH)/intel64/lib-ext
  INTEL_PIN_LIB_PATHS     = -L$(INTEL_PIN_PATH)/intel64/lib -L$(INTEL_PIN_PATH)/extras/xed2-intel64/lib

# Do we want to handle this differently when Dwarf is used optionally with ROSE.
  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#if ROSE_HAVE_LIBDWARF
#  INTEL_PIN_LIBS          = -lpin -lxed -lelf -ldl
#else
#  INTEL_PIN_LIBS          = -lpin -lxed -ldwarf -lelf -ldl
#endif
endif

if ROSE_USE_ETHER
  ROSE_ETHER_INCLUDE = -I$(ETHER_PREFIX)/include
  ROSE_ETHER_LIBS    = -L$(ETHER_PREFIX)/lib -lxenctrl
endif

if ROSE_WITH_ATERM
  ROSE_ATERM_INCLUDE = -I$(ATERM_LIBRARY_PATH)/../include
  ROSE_ATERM_LIBS    = -L$(ATERM_LIBRARY_PATH) -lATerm
endif

# Added support for Fortran front-end development using the flang (F18) compiler [Rasmussen 8/12/2019]
if ROSE_EXPERIMENTAL_FLANG_ROSE_CONNECTION
  ROSE_FLANG_INCLUDES = -I$(FLANG_INSTALL_PATH)/include
  ROSE_FLANG_LIBS     = -L$(FLANG_INSTALL_PATH)/lib -lLLVMDemangle -lLLVMSupport -lLLVMFrontendOpenMP -lLLVMFrontendOpenACC -lFortranParser -lFortranSemantics -lFortranEvaluate -lFortranCommon -lFortranDecimal -lFortranLower -lncurses
endif

# DQ (5/9/2017): Adding Ada library support.
if ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION
  ROSE_ADA_INCLUDES = -I$(ada_path)/include_xxx
  DOT_ASIS_LIB_DIR_ = $(abs_top_builddir)/src/frontend/Experimental_Ada_ROSE_Connection/parser/asis_adapter/lib
#  ROSE_ADA_LIBS = -ldot_asis
#  ROSE_ADA_LIBS_WITH_PATH = $(DOT_ASIS_LIB_DIR_)/libdot_asis.so
endif

if ROSE_USE_EDG_QUAD_FLOAT
  ROSE_QUAD_FLOAT_MATH = -lquadmath
endif


# DQ (1/9/2010): Added use of libimf with libm (the two go together when using Intel icc and icpc)
if USING_INTEL_COMPILER
#  ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lm
# DQ (11/16/2017): We need to link in these Intel specific required libraries to avoid: error hidden symbol `__intel_cpu_features_init_x'
# ROSE_INTEL_COMPILER_MATH_LIBS =
ROSE_INTEL_COMPILER_MATH_LIBS = -limf -lirng -lintlc -lsvml
if ROSE_BUILD_FORTRAN_LANGUAGE_SUPPORT
#    ROSE_INTEL_COMPILER_MATH_LIBS += -limf
endif
ROSE_INTEL_COMPILER_MATH_LIBS += -lm
endif

if USING_CLANG_COMPILER
# DQ (4/13/2016): Is there were we put the support to include -lstdc++.so on the link line directly?
endif

# DQ (3/6/2013): We need to build a SWIG path that can't include the isystem option.
# Note use of "-isystem" option in ROSE_BOOST_PREINCLUDE_PATH to have the
# boost specified on the configure
# command-line be used instead of the OS version of boost that is sometimes
# installed with Linux (it is always a version too old to be used with ROSE).
# This is used only when the ROSE configuration detects a previously installed
# version of Boost (e.g /usr/include/boost) that we don't want to use.
if ROSE_USE_INTERNAL_FRONTEND_DEVELOPMENT
# ROSE_INCLUDES =
#    $(ROSE_BOOST_PREINCLUDE_PATH)
ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_ELF_INCLUDES) \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/generated \
     -I$(top_srcdir)/src/frontend \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I"$(JAVA_HOME)/include" \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astMatching \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/BinaryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/json \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/roseExtensions/failSafe \
     $(ROSE_ATERM_INCLUDE) \
     $(ROSE_FLANG_INCLUDES) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH)
else
# ROSE_INCLUDES =
#     $(ROSE_BOOST_PREINCLUDE_PATH)
ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH = \
     $(ROSE_DWARF_INCLUDES) \
     $(ROSE_ELF_INCLUDES) \
     -I$(top_builddir)/src/roseSupport \
     -I$(top_builddir)/src/frontend/SageIII \
     -I$(top_srcdir)/src \
     -I$(top_srcdir)/src/generated \
     -I$(top_srcdir)/src/frontend \
     -I$(top_srcdir)/src/frontend/SageIII \
     -I$(top_srcdir)/src/frontend/SageIII/astFixup \
     -I$(top_srcdir)/src/frontend/SageIII/astPostProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/astVisualization \
     -I$(top_srcdir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/sageInterface \
     -I$(top_srcdir)/src/frontend/SageIII/virtualCFG \
     -I$(top_srcdir)/src/frontend/SageIII/astTokenStream \
     -I$(top_srcdir)/src/frontend/SageIII/astHiddenTypeAndDeclarationLists \
     -I$(top_builddir)/src/frontend/SageIII/astFileIO \
     -I$(top_srcdir)/src/frontend/SageIII/astFromString \
     -I$(top_srcdir)/src/frontend/SageIII/includeDirectivesProcessing \
     -I$(top_srcdir)/src/frontend/SageIII/sage_support \
     -I$(top_srcdir)/src/frontend/OpenFortranParser_SAGE_Connection \
     -I$(top_srcdir)/src/frontend/ECJ_ROSE_Connection \
     -I"$(JAVA_HOME)/include" \
     -I$(top_srcdir)/src/frontend/PHPFrontend \
      $(ROSE_CLANG_FRONTEND_INCLUDE) \
     -I$(top_srcdir)/src/frontend/PythonFrontend \
     -I$(top_srcdir)/src/frontend/BinaryFormats \
     -I$(top_srcdir)/src/frontend/BinaryLoader \
     -I$(top_srcdir)/src/frontend/Disassemblers \
      $(ROSE_CLANG_INCLUDE) \
     -I$(top_srcdir)/src/backend/unparser \
     -I$(top_srcdir)/src/backend/unparser/formatSupport \
     -I$(top_srcdir)/src/backend/unparser/languageIndependenceSupport \
     -I$(top_srcdir)/src/backend/unparser/CxxCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JavaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/FortranCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PHPCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/PythonCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/AdaCodeGeneration \
     -I$(top_srcdir)/src/backend/unparser/JovialCodeGeneration \
     -I$(top_srcdir)/src/backend/asmUnparser \
     -I$(top_srcdir)/src/util \
     -I$(top_srcdir)/src/util/support \
     -I$(top_srcdir)/src/util/graphs  \
     -I$(top_srcdir)/src/util/stringSupport \
     -I$(top_srcdir)/src/util/commandlineProcessing \
     -I$(top_srcdir)/src/midend \
     -I$(top_srcdir)/src/midend/abstractHandle \
     -I$(top_srcdir)/src/midend/abstractMemoryObject \
     -I$(top_srcdir)/src/midend/abstractLayer \
     -I$(top_srcdir)/src/midend/astDiagnostics \
     -I$(top_srcdir)/src/midend/programTransformation/astInlining \
     -I$(top_srcdir)/src/midend/programTransformation/astOutlining  \
     -I$(top_srcdir)/src/midend/programTransformation/transformationTracking \
     -I$(top_srcdir)/src/midend/astProcessing \
     -I$(top_srcdir)/src/midend/astMatching \
     -I$(top_srcdir)/src/midend/astQuery \
     -I$(top_srcdir)/src/midend/astRewriteMechanism \
     -I$(top_srcdir)/src/midend/astUtil \
     -I$(top_srcdir)/src/midend/astUtil/annotation \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/src/midend/astUtil/astSupport \
     -I$(top_srcdir)/src/midend/astUtil/symbolicVal \
     -I$(top_srcdir)/src/midend/astUtil/dependenceTracking \
     -I$(top_srcdir)/src/midend/BinaryAnalysis \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/dataflowanalyses \
     -I$(top_srcdir)/src/midend/BinaryAnalysis/instructionSemantics \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/computation \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depGraph \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/depInfo \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/driver \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/outsideInterface \
     -I$(top_srcdir)/src/midend/programTransformation/loopProcessing/prepostTransformation \
     -I$(top_srcdir)/src/midend/programTransformation/ompLowering \
     -I$(top_srcdir)/src/midend/programTransformation/extractFunctionArgumentsNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/singleStatementToBlockNormalization \
     -I$(top_srcdir)/src/midend/programAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/arithmeticIntensity \
     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser \
     -I$(top_srcdir)/src/midend/programAnalysis/CFG \
     -I$(top_srcdir)/src/midend/programAnalysis/staticSingleAssignment \
     -I$(top_srcdir)/src/midend/programAnalysis/ssaUnfilteredCfg \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/systemDependenceGraph \
     -I$(top_srcdir)/src/midend/programAnalysis/CallGraphAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/OAWrap \
     -I$(top_srcdir)/src/midend/programAnalysis/bitvectorDataflow \
     -I$(top_srcdir)/src/midend/programAnalysis/VirtualFunctionAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/defUseAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/distributedMemoryAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/dominanceAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/pointerAnal \
     -I$(top_srcdir)/src/midend/programAnalysis/staticInterproceduralSlicing \
     -I$(top_srcdir)/src/midend/programAnalysis/ReadWriteSetAnalysis \
     -I$(top_srcdir)/src/midend/programAnalysis/valuePropagation \
     -I$(top_srcdir)/src/midend/programAnalysis/variableRenaming \
      $(ROSE_SIDEEFFECTS_INCLUDE) \
      $(ROSE_DATABASE_INCLUDE) \
      $(ROSE_GUI_INCLUDE) \
      $(ROSE_QT_INCLUDE) \
      $(ROSE_SQLITE_DATABASE_INCLUDE) \
			$(ROSE_SIDEEFFECT_INCLUDE) \
      $(SQLITE_DATABASE_INCLUDE) \
     -I$(top_srcdir)/src/midend/programTransformation/partialRedundancyElimination \
     -I$(top_srcdir)/src/midend/programTransformation/finiteDifferencing \
     -I$(top_srcdir)/src/midend/programTransformation/functionCallNormalization \
     -I$(top_srcdir)/src/midend/programTransformation/constantFolding \
     -I$(top_srcdir)/src/midend/programTransformation/implicitCodeGeneration \
     -I$(top_srcdir)/src/roseSupport \
     -I$(top_srcdir)/src/3rdPartyLibraries/MSTL \
     -I$(top_srcdir)/src/3rdPartyLibraries/json \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Framework \
     -I$(top_srcdir)/src/3rdPartyLibraries/qrose/Widgets  \
     -I$(top_srcdir)/src/util/graphs \
     -I$(top_srcdir)/src/midend/astUtil/astInterface \
     -I$(top_srcdir)/libltdl \
     -I$(top_srcdir)/src/roseExtensions/failSafe \
     $(ROSE_PHP_INCLUDES) \
     $(ROSE_PYTHON_INCLUDES) \
     $(ROSE_YICES_INCLUDES) \
     $(ROSE_Z3_INCLUDES) \
     $(ROSE_YAMLCPP_INCLUDES) \
     $(ROSE_LIBPQXX_INCLUDES) \
     $(ROSE_CAPSTONE_INCLUDES) \
     $(ROSE_READLINE_INCLUDES) \
     $(ROSE_LIBMAGIC_INCLUDES) \
     $(ROSE_DLIB_INCLUDES) \
     $(ROSE_GCRYPT_INCLUDES) \
     $(ROSE_WINE_INCLUDES) \
     $(VALGRIND_CFLAGS) \
     $(SQLITE3_CFLAGS) \
     $(ROSE_BOOST_NORMAL_INCLUDE_PATH) \
     $(ROSE_PCH_INCLUDE) \
     $(INTEL_PIN_INCLUDE_PATHS) \
     $(ROSE_ETHER_INCLUDE) \
     $(ROSE_ATERM_INCLUDE) \
     $(ROSE_FLANG_INCLUDES) \
     $(ROSE_CSHARP_INCLUDES) \
     $(ROSE_ADA_INCLUDES) \
     $(ROSE_JOVIAL_INCLUDES) \
     $(BOOST_CPPFLAGS)
endif

# DQ (10/23/2015): These paths have been replaces with the following variables.
# These variable are empty for now (reflecting the default usage, and need to
# be set properly where ever Clang support is processed as a configure option.
#    -I$(top_srcdir)/src/frontend/CxxFrontend/ClangFrontend
#    -I$(top_srcdir)/src/frontend/CxxFrontend/Clang
#    $(ROSE_CLANG_FRONTEND_INCLUDE)
#    $(ROSE_CLANG_INCLUDE)

SWIG_ROSE_INCLUDES = $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)
ROSE_INCLUDES = -I$(top_builddir) -I$(top_builddir)/src $(ROSE_BOOST_PREINCLUDE_PATH) $(ROSE_INCLUDES_WITHOUT_BOOST_ISYSTEM_PATH)

# DQ (8/15/2010): I have removed these directories from the include paths since it no longer exists.
# I expect that the directories were removed and the include list not properly cleaned up.
# -I$(top_srcdir)/src/midend/binaryAnalyses/graph
# -I$(top_srcdir)/src/midend/programTransformation/runtimeTransformation
# -I$(top_srcdir)/projects/dataBase

# DQ (12/22/2008): Move Boost directory to front and used "-isystem" option so
# that a system with a previous (older) installation of boost does not interfer
# with the use of ROSE (and the version of boost specified using "--with-boost").
# $(BOOST_CPPFLAGS)

# DQ (10/28/2008): I think these should be included, I don't know why they
# were removed (used with Microsoft Windows tests, and Yices tests).
# DQ: Not used currently
#     $(ROSE_WINE_INCLUDES)

# DQ (5/3/2007): Removed from ROSE
#     -I$(top_srcdir)/src/midend/programAnalysis/dominatorTreesAndDominanceFrontiers
#     -I$(top_srcdir)/src/midend/programAnalysis/staticProgramSlicing

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly with make distcheck rule
#     -I$(top_srcdir)/src/midend/programAnalysis/annotationLanguageParser

# New way using two libraries
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.a $(top_builddir)/src/libedg.a
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.so $(top_builddir)/src/libedg.so
# ROSE_LIBS_WITH_PATH = $(libdir)/librose.so $(libdir)/libedg.so
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la
# ROSE_LIBS_WITH_PATH = $(top_builddir)/src/librose.la $(JAVA_JVM_LIB)
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_LIBS_WITH_PATH = $(ROSE_LIBS)

# ROSE_LIBS = $(top_builddir)/src/librose.la -lm $(LEXLIB) $(SQLITE_DATABASE_LIBS) $(LIB_QT) $(WAVE_LDFLAGS) $(WAVE_LIBRARIES) $(WAVE_LIBS) $(JAVA_JVM_LIB) $(RT_LIBS)

# MS 10/19/2015: added ROSE_BOOST_LIBS variable to share exact same
# boost libs list in ROSE an in the ROSTTA Makefiles.
ROSE_BOOST_LIBS=$(BOOST_LDFLAGS) $(BOOST_DATE_TIME_LIB) $(BOOST_CHRONO_LIB) \
  $(BOOST_THREAD_LIB) $(BOOST_FILESYSTEM_LIB) $(BOOST_PROGRAM_OPTIONS_LIB) \
  $(BOOST_RANDOM_LIB) $(BOOST_REGEX_LIB)  $(BOOST_SYSTEM_LIB) $(BOOST_SERIALIZATION_LIB)  \
  $(BOOST_WAVE_LIB) $(BOOST_IOSTREAMS_LIB) $(BOOST_PYTHON_LIB) $(BOOST_ATOMIC_LIB)

ROSE_LIBS = $(abspath $(top_builddir)/src/librose.la) -lm $(JAVA_JVM_LINK) \
  $(ROSE_DWARF_LIBS_WITH_PATH) $(ROSE_ELF_LIBS_WITH_PATH) \
  $(SQLITE_DATABASE_LIBS) $(QT_LIBS) $(ROSE_BOOST_LIBS) \
  $(SQLITE3_LDFLAGS)  $(RT_LIBS) $(ROSE_YICES_LIBS_WITH_PATH) $(ROSE_Z3_LIBS_WITH_PATH) $(ROSE_PHP_LIBS_WITH_PATH) \
  $(ROSE_GUI_LIBS_WITH_PATH) $(ROSE_QT_LIBS_WITH_PATH) $(ROSE_SSL_LIBS) $(ROSE_ETHER_LIBS) \
  $(ROSE_INTEL_COMPILER_MATH_LIBS) $(ROSE_ATERM_LIBS) $(ROSE_FLANG_LIBS) \
  $(ROSE_YAMLCPP_LIBS_WITH_PATH) $(ROSE_LIBMAGIC_LIBS_WITH_PATH) $(ROSE_READLINE_LIBS_WITH_PATH) \
  $(ROSE_DLIB_LIBS_WITH_PATH) $(ROSE_GCRYPT_LIBS_WITH_PATH) $(ROSE_LIBPQXX_LIBS_WITH_PATH) \
  $(ROSE_QUAD_FLOAT_MATH) $(ROSE_CAPSTONE_LIBS_WITH_PATH)

if ROSE_USE_CLANG_FRONTEND
# DQ (10/23/2020): Pei-Hung and I think this may not be required (not available on my system).
# I get the error:
#    /bin/ld: skipping incompatible /lib/libtinfo.so when searching for -ltinfo
#    clang-10: error: linker command failed with exit code 1 (use -v to see invocation)
# ROSE_LIBS += $(CLANG_LDFLAGS) -ltinfo
ROSE_LIBS += $(CLANG_LDFLAGS)
endif

#if ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION
#ROSE_LIBS += $(libroseAdalibraries)
#endif

#========================================================================================================================
# These are the "-R directory" switches that need to be passed to libtool running in link mode to make sure that ROSE
# executables have rpath properties that point to the directories containing the libraries we're using. Do not add
# system directories (or at least not at the front of this list) because that will cause the system-installed version of
# a library to be used rather than some user-specific version.
#
# Here's the motivation for using rpath instead of LD_LIBRARY_PATH: Consider what happens if some ROSE tool, call it
# myTranslator, is compiled and linked against a custom, user-installed version of libz.so (perhaps because myTranslator
# is using a custom version of some graphics library, like libgraphicsmagick.so, that needs a newer libz.so than what's
# installed on the system).  If I then set LD_LIBRARY_PATH to point to the directory with my libz.so I'll be able to run
# myTranslator, however I probably won't be able any system installed tool that uses libz.so. This includes not being
# able to run /usr/bin/as, which might be called indirectly when myTranslator invokes the backend compiler (because
# LD_LIBRARY_PATH overrides the rpath built into /usr/bin/as).  Run-time linking with the wrong dynamic library at best
# produces an error message from the linker, but more often just results in a fault of some sort.
#
# How does rpath fix this problem? It encodes into each executable the list of directories that should be searched when
# the executable is run, similar to LD_LIBRARY_PATH but on a per-executable basis.
#
# The filter-out is removing specific libraries (-lwhatever), the GCC's POSIX thread switch (-pthread), static libraries
# (whatever.a), and various system directories that might have the wrong library versions and which are searched
# automatically anyway. The outer patsubst is changing "-Ldirectory" to just "directory", and the addprefix is changing
# each directory to "-R directory" which is libtool's switch for adding an rpath to an executable.
#
# The inner-most patsubst needs more explanation: Although most low-level libraries like libz, libpng, etc. are normally
# installed in well-known system-wide locations (like /usr/lib), when testing ROSE in matrix testing using RMC, these
# libraries are often compiled and installed locally in such ways that they're not binary compatible with the
# system-installed versions. However, ROSE doesn't have configuration or cmake options for all these libraries because
# there could eventually be far too many. Therefore, we use the fact that RMC has already chosen the correct library
# directories and added their names to various environment variables. The lines of the form
#     $(subst :, ,# $(whatever_LIBDIRS))
# split the named environment variable into individual directory names.  If there's a ROSE configure option to specify
# the library location, then DO NOT list an environment variable here--use the directory from configure instead (which
# goes into ROSE_LIBS above).

ROSE_RPATHS =                                                                           \
          $(patsubst -L%,-R %,                                                          \
            $(filter-out -L/lib% -L/usr/lib% -L/usr/local/lib% -L/var/lib%,             \
              $(filter -L%,                                                             \
                $(ROSE_LIBS)                                                            \
                $(subst :, , $(GNU_COMPILERS_LIBDIRS))                                  \
                $(subst :, , $(LIBBZ2_LIBDIRS))                                         \
                $(subst :, , $(LIBGRAPHICSMAGICK_LIBDIRS))                              \
                $(subst :, , $(LIBJPEG_LIBDIRS))                                        \
                $(subst :, , $(LIBLCMS_LIBDIRS))                                        \
                $(subst :, , $(LIBLZMA_LIBDIRS))                                        \
                $(subst :, , $(LIBPNG_LIBDIRS))                                         \
                $(subst :, , $(LIBTIFF_LIBDIRS))                                        \
                $(subst :, , $(PYTHON_LIBDIRS))                                         \
                $(subst :, , $(SPOT_LIBDIRS))                                           \
                $(subst :, , $(ZLIB_LIBDIRS))                                           \
                $(subst :, , $(INTEL_COMPILER_RPATHS))                                  \
              )                                                                         \
            )                                                                           \
          )


# Rasmussen (3/23/2018): Added ROSE_LINK_RPATHS to enable linking on Mac OSX with ROSE installation
if OS_MACOSX
ROSE_LINK_RPATHS = $(addprefix -Xlinker -rpath -Xlinker , $(filter-out -R , $(ROSE_RPATHS)))
else
comma = ,
ROSE_LINK_RPATHS = $(addprefix -Wl$(comma)-rpath , $(filter-out -R , $(ROSE_RPATHS)))
endif

if ROSE_EXPERIMENTAL_ADA_ROSE_CONNECTION
ROSE_RPATHS += -R $(DOT_ASIS_LIB_DIR_)
endif

if ROSE_EXPERIMENTAL_LIBADALANG_ROSE_CONNECTION
ROSE_RPATHS += -R $(GNAT_HOME)/lib
ROSE_RPATHS += -R $(GNAT_HOME)/lib/gcc/x86_64-pc-linux-gnu/10.3.1/adalib
endif

show-rpaths:
	@echo "ROSE_LIBS = $(ROSE_LIBS)"
	@echo "ROSE_RPATHS = $(ROSE_RPATHS)"
	@echo "ROSE_LINK_RPATHS = $(ROSE_LINK_RPATHS)"

INTEL_COMPILER_RPATHS = $(shell $(top_srcdir)/scripts/intel-compiler-rpaths.sh)

# DQ (3/8/2009): This fails when I try to include it (fails in rose/src/testSharedRoseLib).
#  $(INTEL_PIN_LIB_PATHS) $(INTEL_PIN_LIBS)

# DQ (3/14/2009): It is cleaner to just required that Intel Pin support require setting
# the LD_LIBRARYPATH to include: $(INTEL_PIN_PATH)/intel64/lib-ext


# This ROSE_SEPARATE_LIBS is used for the linking of preprocessor.C used within
# development. The use of the seperate libraries make the linking faster where the
# main librose library is not built.  Libtool may have changed this so that we could
# just link to librose now just as easily, but one has to rebuild librose each time
# instead of just the individual shared library.
# JJW 7/25/2008: This should probably just be the same as ROSE_LIBS
ROSE_SEPARATE_LIBS = $(ROSE_LIBS)

# QY (11/2/04): removed -lastoutlining from ROSE_SEPARATE_LIBS

# DQ (10/22/2004): Removed when I could not get annotation work to compile properly
# with make distcheck rule
# -lannotationLanguageParser(appears after -lvaluePropagation)

# Test harness variables. See "rth_run.pl --help" for more info.  The RTH_RUN_FLAGS is meant to be set on the
# "make" command-line, but the default depends on the value of the verbosity $(V) flag.

RTH_RUN_FLAGS_V_ =
RTH_RUN_FLAGS_V_0 =
RTH_RUN_FLAGS_V_1 = --immediate-output
RTH_RUN_FLAGS = $(RTH_RUN_FLAGS_V_$(V))

# Default timeout that you can override on the "make" commandline. Valid values
# are integers followed by "s" (seconds), "m" (minutes), "h" (hours), or the
# word "never".  See scripts/rth_run.pl for detailed documentation.
RTH_TIMEOUT = 15m

RTH_RUN=$(top_srcdir)/scripts/rth_run.pl $(RTH_RUN_FLAGS) \
	srcdir=$(abspath $(srcdir)) top_srcdir=$(abspath $(top_srcdir)) \
	blddir=$$(pwd) top_blddir=$(abspath $(top_builddir)) \
	VALGRIND=$(VALGRIND) TIMEOUT=$(RTH_TIMEOUT)

RTH_STATS=$(top_srcdir)/scripts/rth_stats.pl

# DQ (9/27/2015): Added to support new use of AM_CPPFLAGS instead of INCLUDES
# (depreicated in automake and for which many warnings are generated).
CPPFLAGS = $(AM_CPPFLAGS)

clean-test-targets:
	rm -f $(TEST_TARGETS)
	rm -f $(TEST_TARGETS:.passed=.failed)
	rm -f $(TEST_TARGETS:.passed=.out)
	rm -f $(TEST_TARGETS:.passed=.err)

clean-local: clean-test-targets

.PHONY: clean-test-targets
